'use strict';

angular.module('shopApp.controllers', [])

.controller('CurrCourseListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataCurrCourse = new Array()
			, $scope.ctrl = {
					  name: 'CurrCourseListCtrl'
					, original: 'CurrCourse'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'currcourse' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('CurrCourseListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataCurrCourse: new Array()
			  	})
			  	, $scope.dataCurrCourse = $scope.$storage.dataCurrCourse;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'CurrcourseEdit',
					controller: 'CurrCourseEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'currcourse' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.CurrCourseDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataCurrCourse.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/CurrcourseCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'CurrcourseEdit/' + itemId,
						controller: 'CurrCourseEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'currcourse' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataCurrCourse)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.CurrCourseDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataCurrCourse[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataCurrCourse[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/CurrcourseEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataCurrCourse); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.CurrCourseDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataCurrCourse.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataCurrCourse(true);
	    };
	    
	    $scope.loadAllDataCurrCourse = function() {
	    	$servicesStorage.CurrCourseDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataCurrCourse = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataCurrCourse = $scope.dataCurrCourse;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataCurrCourse = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.CurrCourseDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataCurrCourse = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataCurrCourse = APP.uniqueArray($scope.dataCurrCourse.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataCurrCourse = $scope.dataCurrCourse;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredCurrCourse = $scope.dataCurrCourse.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.CurrCourseDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataCurrCourse(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("CurrCourse", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('CurrCourseSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataCurrCourse = new Array()
		, $scope.ctrl = {
				  name: 'CurrCourseSelectorCtrl'
				, original: 'CurrCourse'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('CurrCourseSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataCurrCourse: new Object()
		  	})
		  	, $scope.dataCurrCourse = $scope.$storage.dataCurrCourse;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataCurrCourse = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.CurrCourseDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataCurrCourse = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataCurrCourse = APP.uniqueArray($scope.dataCurrCourse.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataCurrCourse = $scope.dataCurrCourse;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataCurrCourse(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("CurrCourse", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('CurrCourseEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'CurrCourseEditCtrl'
			, original: 'CurrCourse'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('CurrCourseEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemCurrCourse: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'CurrCourse', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.CurrCourseDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/CurrcourseList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.CurrCourseDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/CurrcourseList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.CurrCourseDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemCurrCourse = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'CurrCourse');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("CurrCourse", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'CurrCourse');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('CurrCurrencyListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataCurrCurrency = new Array()
			, $scope.ctrl = {
					  name: 'CurrCurrencyListCtrl'
					, original: 'CurrCurrency'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'currcurrency' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('CurrCurrencyListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataCurrCurrency: new Array()
			  	})
			  	, $scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'CurrcurrencyEdit',
					controller: 'CurrCurrencyEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'currcurrency' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.CurrCurrencyDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataCurrCurrency.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/CurrcurrencyCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'CurrcurrencyEdit/' + itemId,
						controller: 'CurrCurrencyEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'currcurrency' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataCurrCurrency)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.CurrCurrencyDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataCurrCurrency[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataCurrCurrency[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/CurrcurrencyEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataCurrCurrency); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.CurrCurrencyDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataCurrCurrency.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataCurrCurrency(true);
	    };
	    
	    $scope.loadAllDataCurrCurrency = function() {
	    	$servicesStorage.CurrCurrencyDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataCurrCurrency = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataCurrCurrency = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.CurrCurrencyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataCurrCurrency = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataCurrCurrency = APP.uniqueArray($scope.dataCurrCurrency.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredCurrCurrency = $scope.dataCurrCurrency.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.CurrCurrencyDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataCurrCurrency(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("CurrCurrency", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('CurrCurrencySelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataCurrCurrency = new Array()
		, $scope.ctrl = {
				  name: 'CurrCurrencySelectorCtrl'
				, original: 'CurrCurrency'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('CurrCurrencySelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataCurrCurrency: new Object()
		  	})
		  	, $scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataCurrCurrency = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.CurrCurrencyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataCurrCurrency = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataCurrCurrency = APP.uniqueArray($scope.dataCurrCurrency.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataCurrCurrency(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("CurrCurrency", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('CurrCurrencyEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'CurrCurrencyEditCtrl'
			, original: 'CurrCurrency'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('CurrCurrencyEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemCurrCurrency: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'CurrCurrency', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.CurrCurrencyDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/CurrcurrencyList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.CurrCurrencyDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/CurrcurrencyList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.CurrCurrencyDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemCurrCurrency = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'CurrCurrency');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("CurrCurrency", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'CurrCurrency');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServVisas = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasEdit',
				controller: 'ServVisasEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservVisases
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentContactRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContactRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccount = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccounts
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentContactRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContactRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccountRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccountRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactEdit',
				controller: 'PaymentContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContacts
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemCurrCourse = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'CurrcourseEdit',
				controller: 'CurrCourseEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemcurrCourses
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentContactRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContactRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServExcursions = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsEdit',
				controller: 'ServExcursionsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservExcursionses
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccountRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccountRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransfer = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransfers
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccountRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccountRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServInsurances = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservInsuranceses
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsRail = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsrailEdit',
				controller: 'ServTicketsRailEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsRails
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccountRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccountRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentContactRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContactRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransferRoute = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferrouteEdit',
				controller: 'ServTransferRouteEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransferRoutes
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentContactRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContactRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentPrice = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentpriceEdit',
				controller: 'PaymentPriceEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentPrices
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsAir = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsAirs
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccountRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccountRecords
							, editItemId: itemId
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServVisas = function () {
			if(typeof $scope.item.servVisases == "undefined"){
				$scope.item.servVisases = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasEdit',
				controller: 'ServVisasEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServVisas#item: ', item);
				}
				$scope.item.servVisases.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentContactRecord = function () {
			if(typeof $scope.item.paymentContactRecords == "undefined"){
				$scope.item.paymentContactRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContactRecord#item: ', item);
				}
				$scope.item.paymentContactRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccount = function () {
			if(typeof $scope.item.paymentAccounts == "undefined"){
				$scope.item.paymentAccounts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccount#item: ', item);
				}
				$scope.item.paymentAccounts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentContactRecord = function () {
			if(typeof $scope.item.paymentContactRecords == "undefined"){
				$scope.item.paymentContactRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContactRecord#item: ', item);
				}
				$scope.item.paymentContactRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccountRecord = function () {
			if(typeof $scope.item.paymentAccountRecords == "undefined"){
				$scope.item.paymentAccountRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccountRecord#item: ', item);
				}
				$scope.item.paymentAccountRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentContact = function () {
			if(typeof $scope.item.paymentContacts == "undefined"){
				$scope.item.paymentContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactEdit',
				controller: 'PaymentContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContact#item: ', item);
				}
				$scope.item.paymentContacts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemCurrCourse = function () {
			if(typeof $scope.item.currCourses == "undefined"){
				$scope.item.currCourses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'CurrcourseEdit',
				controller: 'CurrCourseEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemCurrCourse#item: ', item);
				}
				$scope.item.currCourses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentContactRecord = function () {
			if(typeof $scope.item.paymentContactRecords == "undefined"){
				$scope.item.paymentContactRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContactRecord#item: ', item);
				}
				$scope.item.paymentContactRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServExcursions = function () {
			if(typeof $scope.item.servExcursionses == "undefined"){
				$scope.item.servExcursionses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsEdit',
				controller: 'ServExcursionsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServExcursions#item: ', item);
				}
				$scope.item.servExcursionses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccountRecord = function () {
			if(typeof $scope.item.paymentAccountRecords == "undefined"){
				$scope.item.paymentAccountRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccountRecord#item: ', item);
				}
				$scope.item.paymentAccountRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransfer = function () {
			if(typeof $scope.item.servTransfers == "undefined"){
				$scope.item.servTransfers = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransfer#item: ', item);
				}
				$scope.item.servTransfers.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccountRecord = function () {
			if(typeof $scope.item.paymentAccountRecords == "undefined"){
				$scope.item.paymentAccountRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccountRecord#item: ', item);
				}
				$scope.item.paymentAccountRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServInsurances = function () {
			if(typeof $scope.item.servInsuranceses == "undefined"){
				$scope.item.servInsuranceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServInsurances#item: ', item);
				}
				$scope.item.servInsuranceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsRail = function () {
			if(typeof $scope.item.servTicketsRails == "undefined"){
				$scope.item.servTicketsRails = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsrailEdit',
				controller: 'ServTicketsRailEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsRail#item: ', item);
				}
				$scope.item.servTicketsRails.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccountRecord = function () {
			if(typeof $scope.item.paymentAccountRecords == "undefined"){
				$scope.item.paymentAccountRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccountRecord#item: ', item);
				}
				$scope.item.paymentAccountRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentContactRecord = function () {
			if(typeof $scope.item.paymentContactRecords == "undefined"){
				$scope.item.paymentContactRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContactRecord#item: ', item);
				}
				$scope.item.paymentContactRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransferRoute = function () {
			if(typeof $scope.item.servTransferRoutes == "undefined"){
				$scope.item.servTransferRoutes = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferrouteEdit',
				controller: 'ServTransferRouteEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransferRoute#item: ', item);
				}
				$scope.item.servTransferRoutes.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentContactRecord = function () {
			if(typeof $scope.item.paymentContactRecords == "undefined"){
				$scope.item.paymentContactRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContactRecord#item: ', item);
				}
				$scope.item.paymentContactRecords.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentPrice = function () {
			if(typeof $scope.item.paymentPrices == "undefined"){
				$scope.item.paymentPrices = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentpriceEdit',
				controller: 'PaymentPriceEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentPrice#item: ', item);
				}
				$scope.item.paymentPrices.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsAir = function () {
			if(typeof $scope.item.servTicketsAirs == "undefined"){
				$scope.item.servTicketsAirs = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsAir#item: ', item);
				}
				$scope.item.servTicketsAirs.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccountRecord = function () {
			if(typeof $scope.item.paymentAccountRecords == "undefined"){
				$scope.item.paymentAccountRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'currcurrency' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccountRecord#item: ', item);
				}
				$scope.item.paymentAccountRecords.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServVisas = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasFragmentSelector',
				controller: 'ServVisasSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servVisases = APP.checkDublicate2(
							$scope.item.servVisases
						  , data.data
						  , 'ServVisasView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentContactRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordFragmentSelector',
				controller: 'PaymentContactRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContactRecords = APP.checkDublicate2(
							$scope.item.paymentContactRecords
						  , data.data
						  , 'PaymentContactRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccount = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountFragmentSelector',
				controller: 'PaymentAccountSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccounts = APP.checkDublicate2(
							$scope.item.paymentAccounts
						  , data.data
						  , 'PaymentAccountView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentContactRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordFragmentSelector',
				controller: 'PaymentContactRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContactRecords = APP.checkDublicate2(
							$scope.item.paymentContactRecords
						  , data.data
						  , 'PaymentContactRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccountRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordFragmentSelector',
				controller: 'PaymentAccountRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccountRecords = APP.checkDublicate2(
							$scope.item.paymentAccountRecords
						  , data.data
						  , 'PaymentAccountRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactFragmentSelector',
				controller: 'PaymentContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContacts = APP.checkDublicate2(
							$scope.item.paymentContacts
						  , data.data
						  , 'PaymentContactView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemCurrCourse = function () {
			var modalInstance = $modal.open({
				templateUrl: 'CurrcourseFragmentSelector',
				controller: 'CurrCourseSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.currCourses = APP.checkDublicate2(
							$scope.item.currCourses
						  , data.data
						  , 'CurrCourseView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentContactRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordFragmentSelector',
				controller: 'PaymentContactRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContactRecords = APP.checkDublicate2(
							$scope.item.paymentContactRecords
						  , data.data
						  , 'PaymentContactRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServExcursions = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsFragmentSelector',
				controller: 'ServExcursionsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servExcursionses = APP.checkDublicate2(
							$scope.item.servExcursionses
						  , data.data
						  , 'ServExcursionsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccountRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordFragmentSelector',
				controller: 'PaymentAccountRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccountRecords = APP.checkDublicate2(
							$scope.item.paymentAccountRecords
						  , data.data
						  , 'PaymentAccountRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransfer = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferFragmentSelector',
				controller: 'ServTransferSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransfers = APP.checkDublicate2(
							$scope.item.servTransfers
						  , data.data
						  , 'ServTransferView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccountRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordFragmentSelector',
				controller: 'PaymentAccountRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccountRecords = APP.checkDublicate2(
							$scope.item.paymentAccountRecords
						  , data.data
						  , 'PaymentAccountRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServInsurances = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesFragmentSelector',
				controller: 'ServInsurancesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servInsuranceses = APP.checkDublicate2(
							$scope.item.servInsuranceses
						  , data.data
						  , 'ServInsurancesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsRail = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsrailFragmentSelector',
				controller: 'ServTicketsRailSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsRails = APP.checkDublicate2(
							$scope.item.servTicketsRails
						  , data.data
						  , 'ServTicketsRailView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccountRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordFragmentSelector',
				controller: 'PaymentAccountRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccountRecords = APP.checkDublicate2(
							$scope.item.paymentAccountRecords
						  , data.data
						  , 'PaymentAccountRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentContactRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordFragmentSelector',
				controller: 'PaymentContactRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContactRecords = APP.checkDublicate2(
							$scope.item.paymentContactRecords
						  , data.data
						  , 'PaymentContactRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransferRoute = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferrouteFragmentSelector',
				controller: 'ServTransferRouteSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransferRoutes = APP.checkDublicate2(
							$scope.item.servTransferRoutes
						  , data.data
						  , 'ServTransferRouteView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentContactRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordFragmentSelector',
				controller: 'PaymentContactRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContactRecords = APP.checkDublicate2(
							$scope.item.paymentContactRecords
						  , data.data
						  , 'PaymentContactRecordView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentPrice = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentpriceFragmentSelector',
				controller: 'PaymentPriceSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentPrices = APP.checkDublicate2(
							$scope.item.paymentPrices
						  , data.data
						  , 'PaymentPriceView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsAir = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairFragmentSelector',
				controller: 'ServTicketsAirSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsAirs = APP.checkDublicate2(
							$scope.item.servTicketsAirs
						  , data.data
						  , 'ServTicketsAirView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccountRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordFragmentSelector',
				controller: 'PaymentAccountRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccountRecords = APP.checkDublicate2(
							$scope.item.paymentAccountRecords
						  , data.data
						  , 'PaymentAccountRecordView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('DictGlobalListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataDictGlobal = new Array()
			, $scope.ctrl = {
					  name: 'DictGlobalListCtrl'
					, original: 'DictGlobal'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'dictglobal' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('DictGlobalListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataDictGlobal: new Array()
			  	})
			  	, $scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'DictglobalEdit',
					controller: 'DictGlobalEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'dictglobal' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.DictGlobalDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataDictGlobal.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/DictglobalCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'DictglobalEdit/' + itemId,
						controller: 'DictGlobalEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'dictglobal' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataDictGlobal)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.DictGlobalDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataDictGlobal[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataDictGlobal[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/DictglobalEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataDictGlobal); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.DictGlobalDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataDictGlobal.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataDictGlobal(true);
	    };
	    
	    $scope.loadAllDataDictGlobal = function() {
	    	$servicesStorage.DictGlobalDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataDictGlobal = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataDictGlobal = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.DictGlobalDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataDictGlobal = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataDictGlobal = APP.uniqueArray($scope.dataDictGlobal.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredDictGlobal = $scope.dataDictGlobal.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.DictGlobalDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataDictGlobal(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("DictGlobal", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('DictGlobalSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataDictGlobal = new Array()
		, $scope.ctrl = {
				  name: 'DictGlobalSelectorCtrl'
				, original: 'DictGlobal'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('DictGlobalSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataDictGlobal: new Object()
		  	})
		  	, $scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataDictGlobal = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.DictGlobalDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataDictGlobal = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataDictGlobal = APP.uniqueArray($scope.dataDictGlobal.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataDictGlobal(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("DictGlobal", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('DictGlobalEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'DictGlobalEditCtrl'
			, original: 'DictGlobal'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('DictGlobalEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemDictGlobal: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'DictGlobal', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.DictGlobalDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/DictglobalList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.DictGlobalDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/DictglobalList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.DictGlobalDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemDictGlobal = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'DictGlobal');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("DictGlobal", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'DictGlobal');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServHotelServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelservicesEdit',
				controller: 'ServHotelServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotelServiceses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmOrder = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderEdit',
				controller: 'TmOrderEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmOrders
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotelRoom = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomEdit',
				controller: 'ServHotelRoomEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotelRooms
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsAir = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsAirs
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelEntertainmentAndSport = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelentertainmentandsportEdit',
				controller: 'RelServHotelEntertainmentAndSportEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelEntertainmentAndSports
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransfer = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransfers
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelCreditCards = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelcreditcardsEdit',
				controller: 'RelServHotelCreditCardsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelCreditCardses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccount = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccounts
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServVisas = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasEdit',
				controller: 'ServVisasEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservVisases
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotelRoom = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomEdit',
				controller: 'ServHotelRoomEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotelRooms
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServKidsRuleFeatures = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservkidsrulefeaturesEdit',
				controller: 'RelServKidsRuleFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServKidsRuleFeatureses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqServHotels
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmContactCommunications = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsEdit',
				controller: 'TmContactCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmContactCommunicationses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqServHotelRoomBusy = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelroombusyEdit',
				controller: 'ReqServHotelRoomBusyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqServHotelRoomBusies
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelRoomFeatures = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelroomfeaturesEdit',
				controller: 'RelServHotelRoomFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelRoomFeatureses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqServHotels
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServCruise = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServcruiseEdit',
				controller: 'ServCruiseEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservCruises
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransfer = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransfers
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsAir = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsAirs
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServGifts = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServgiftsEdit',
				controller: 'ServGiftsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservGiftses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmCommercial = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmcommercialEdit',
				controller: 'TmCommercialEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmCommercials
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccount = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccounts
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotelServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelservicesEdit',
				controller: 'ServHotelServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotelServiceses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqCruiseServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesEdit',
				controller: 'ReqCruiseServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqCruiseServiceses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsAir = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsAirs
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransfer = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransfers
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmPolicies = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmpoliciesEdit',
				controller: 'TmPoliciesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmPolicieses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmPolicies = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmpoliciesEdit',
				controller: 'TmPoliciesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmPolicieses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemLocationTypePlacement = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'LocationtypeplacementEdit',
				controller: 'LocationTypePlacementEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemlocationTypePlacements
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactEdit',
				controller: 'PaymentContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContacts
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmAccountCommunications = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsEdit',
				controller: 'TmAccountCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmAccountCommunicationses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServInsurances = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservInsuranceses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelFeatures = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelfeaturesEdit',
				controller: 'RelServHotelFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelFeatureses
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqHotelRoomsBusy = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqhotelroomsbusyEdit',
				controller: 'ReqHotelRoomsBusyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqHotelRoomsBusies
							, editItemId: itemId
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServHotelServices = function () {
			if(typeof $scope.item.servHotelServiceses == "undefined"){
				$scope.item.servHotelServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelservicesEdit',
				controller: 'ServHotelServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotelServices#item: ', item);
				}
				$scope.item.servHotelServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmOrder = function () {
			if(typeof $scope.item.tmOrders == "undefined"){
				$scope.item.tmOrders = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmorderEdit',
				controller: 'TmOrderEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmOrder#item: ', item);
				}
				$scope.item.tmOrders.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotelRoom = function () {
			if(typeof $scope.item.servHotelRooms == "undefined"){
				$scope.item.servHotelRooms = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomEdit',
				controller: 'ServHotelRoomEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotelRoom#item: ', item);
				}
				$scope.item.servHotelRooms.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsAir = function () {
			if(typeof $scope.item.servTicketsAirs == "undefined"){
				$scope.item.servTicketsAirs = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsAir#item: ', item);
				}
				$scope.item.servTicketsAirs.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelEntertainmentAndSport = function () {
			if(typeof $scope.item.relServHotelEntertainmentAndSports == "undefined"){
				$scope.item.relServHotelEntertainmentAndSports = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelentertainmentandsportEdit',
				controller: 'RelServHotelEntertainmentAndSportEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelEntertainmentAndSport#item: ', item);
				}
				$scope.item.relServHotelEntertainmentAndSports.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransfer = function () {
			if(typeof $scope.item.servTransfers == "undefined"){
				$scope.item.servTransfers = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransfer#item: ', item);
				}
				$scope.item.servTransfers.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelCreditCards = function () {
			if(typeof $scope.item.relServHotelCreditCardses == "undefined"){
				$scope.item.relServHotelCreditCardses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelcreditcardsEdit',
				controller: 'RelServHotelCreditCardsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelCreditCards#item: ', item);
				}
				$scope.item.relServHotelCreditCardses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccount = function () {
			if(typeof $scope.item.paymentAccounts == "undefined"){
				$scope.item.paymentAccounts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccount#item: ', item);
				}
				$scope.item.paymentAccounts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServVisas = function () {
			if(typeof $scope.item.servVisases == "undefined"){
				$scope.item.servVisases = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasEdit',
				controller: 'ServVisasEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServVisas#item: ', item);
				}
				$scope.item.servVisases.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotelRoom = function () {
			if(typeof $scope.item.servHotelRooms == "undefined"){
				$scope.item.servHotelRooms = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomEdit',
				controller: 'ServHotelRoomEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotelRoom#item: ', item);
				}
				$scope.item.servHotelRooms.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServKidsRuleFeatures = function () {
			if(typeof $scope.item.relServKidsRuleFeatureses == "undefined"){
				$scope.item.relServKidsRuleFeatureses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservkidsrulefeaturesEdit',
				controller: 'RelServKidsRuleFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServKidsRuleFeatures#item: ', item);
				}
				$scope.item.relServKidsRuleFeatureses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqServHotel = function () {
			if(typeof $scope.item.reqServHotels == "undefined"){
				$scope.item.reqServHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqServHotel#item: ', item);
				}
				$scope.item.reqServHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmContactCommunications = function () {
			if(typeof $scope.item.tmContactCommunicationses == "undefined"){
				$scope.item.tmContactCommunicationses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsEdit',
				controller: 'TmContactCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmContactCommunications#item: ', item);
				}
				$scope.item.tmContactCommunicationses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqServHotelRoomBusy = function () {
			if(typeof $scope.item.reqServHotelRoomBusies == "undefined"){
				$scope.item.reqServHotelRoomBusies = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelroombusyEdit',
				controller: 'ReqServHotelRoomBusyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqServHotelRoomBusy#item: ', item);
				}
				$scope.item.reqServHotelRoomBusies.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelRoomFeatures = function () {
			if(typeof $scope.item.relServHotelRoomFeatureses == "undefined"){
				$scope.item.relServHotelRoomFeatureses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelroomfeaturesEdit',
				controller: 'RelServHotelRoomFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelRoomFeatures#item: ', item);
				}
				$scope.item.relServHotelRoomFeatureses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqServHotel = function () {
			if(typeof $scope.item.reqServHotels == "undefined"){
				$scope.item.reqServHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqServHotel#item: ', item);
				}
				$scope.item.reqServHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServCruise = function () {
			if(typeof $scope.item.servCruises == "undefined"){
				$scope.item.servCruises = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServcruiseEdit',
				controller: 'ServCruiseEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServCruise#item: ', item);
				}
				$scope.item.servCruises.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransfer = function () {
			if(typeof $scope.item.servTransfers == "undefined"){
				$scope.item.servTransfers = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransfer#item: ', item);
				}
				$scope.item.servTransfers.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsAir = function () {
			if(typeof $scope.item.servTicketsAirs == "undefined"){
				$scope.item.servTicketsAirs = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsAir#item: ', item);
				}
				$scope.item.servTicketsAirs.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServGifts = function () {
			if(typeof $scope.item.servGiftses == "undefined"){
				$scope.item.servGiftses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServgiftsEdit',
				controller: 'ServGiftsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServGifts#item: ', item);
				}
				$scope.item.servGiftses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmCommercial = function () {
			if(typeof $scope.item.tmCommercials == "undefined"){
				$scope.item.tmCommercials = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmcommercialEdit',
				controller: 'TmCommercialEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmCommercial#item: ', item);
				}
				$scope.item.tmCommercials.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccount = function () {
			if(typeof $scope.item.paymentAccounts == "undefined"){
				$scope.item.paymentAccounts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccount#item: ', item);
				}
				$scope.item.paymentAccounts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotelServices = function () {
			if(typeof $scope.item.servHotelServiceses == "undefined"){
				$scope.item.servHotelServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelservicesEdit',
				controller: 'ServHotelServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotelServices#item: ', item);
				}
				$scope.item.servHotelServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqCruiseServices = function () {
			if(typeof $scope.item.reqCruiseServiceses == "undefined"){
				$scope.item.reqCruiseServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesEdit',
				controller: 'ReqCruiseServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqCruiseServices#item: ', item);
				}
				$scope.item.reqCruiseServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsAir = function () {
			if(typeof $scope.item.servTicketsAirs == "undefined"){
				$scope.item.servTicketsAirs = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsAir#item: ', item);
				}
				$scope.item.servTicketsAirs.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransfer = function () {
			if(typeof $scope.item.servTransfers == "undefined"){
				$scope.item.servTransfers = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransfer#item: ', item);
				}
				$scope.item.servTransfers.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmPolicies = function () {
			if(typeof $scope.item.tmPolicieses == "undefined"){
				$scope.item.tmPolicieses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmpoliciesEdit',
				controller: 'TmPoliciesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmPolicies#item: ', item);
				}
				$scope.item.tmPolicieses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmPolicies = function () {
			if(typeof $scope.item.tmPolicieses == "undefined"){
				$scope.item.tmPolicieses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmpoliciesEdit',
				controller: 'TmPoliciesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmPolicies#item: ', item);
				}
				$scope.item.tmPolicieses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemLocationTypePlacement = function () {
			if(typeof $scope.item.locationTypePlacements == "undefined"){
				$scope.item.locationTypePlacements = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'LocationtypeplacementEdit',
				controller: 'LocationTypePlacementEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemLocationTypePlacement#item: ', item);
				}
				$scope.item.locationTypePlacements.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentContact = function () {
			if(typeof $scope.item.paymentContacts == "undefined"){
				$scope.item.paymentContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactEdit',
				controller: 'PaymentContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContact#item: ', item);
				}
				$scope.item.paymentContacts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmAccountCommunications = function () {
			if(typeof $scope.item.tmAccountCommunicationses == "undefined"){
				$scope.item.tmAccountCommunicationses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsEdit',
				controller: 'TmAccountCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmAccountCommunications#item: ', item);
				}
				$scope.item.tmAccountCommunicationses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServInsurances = function () {
			if(typeof $scope.item.servInsuranceses == "undefined"){
				$scope.item.servInsuranceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServInsurances#item: ', item);
				}
				$scope.item.servInsuranceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelFeatures = function () {
			if(typeof $scope.item.relServHotelFeatureses == "undefined"){
				$scope.item.relServHotelFeatureses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelfeaturesEdit',
				controller: 'RelServHotelFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelFeatures#item: ', item);
				}
				$scope.item.relServHotelFeatureses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqHotelRoomsBusy = function () {
			if(typeof $scope.item.reqHotelRoomsBusies == "undefined"){
				$scope.item.reqHotelRoomsBusies = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqhotelroomsbusyEdit',
				controller: 'ReqHotelRoomsBusyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'dictglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqHotelRoomsBusy#item: ', item);
				}
				$scope.item.reqHotelRoomsBusies.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServHotelServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelservicesFragmentSelector',
				controller: 'ServHotelServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotelServiceses = APP.checkDublicate2(
							$scope.item.servHotelServiceses
						  , data.data
						  , 'ServHotelServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmOrder = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderFragmentSelector',
				controller: 'TmOrderSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmOrders = APP.checkDublicate2(
							$scope.item.tmOrders
						  , data.data
						  , 'TmOrderView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotelRoom = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomFragmentSelector',
				controller: 'ServHotelRoomSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotelRooms = APP.checkDublicate2(
							$scope.item.servHotelRooms
						  , data.data
						  , 'ServHotelRoomView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsAir = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairFragmentSelector',
				controller: 'ServTicketsAirSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsAirs = APP.checkDublicate2(
							$scope.item.servTicketsAirs
						  , data.data
						  , 'ServTicketsAirView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelEntertainmentAndSport = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelEntertainmentAndSports = APP.checkDublicate(
							$scope.item.relServHotelEntertainmentAndSports
						  , data.data
						  , 'servhotel'
						  , 'dictglobal'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransfer = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferFragmentSelector',
				controller: 'ServTransferSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransfers = APP.checkDublicate2(
							$scope.item.servTransfers
						  , data.data
						  , 'ServTransferView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelCreditCards = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelCreditCardses = APP.checkDublicate(
							$scope.item.relServHotelCreditCardses
						  , data.data
						  , 'servhotel'
						  , 'dictglobal'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccount = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountFragmentSelector',
				controller: 'PaymentAccountSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccounts = APP.checkDublicate2(
							$scope.item.paymentAccounts
						  , data.data
						  , 'PaymentAccountView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServVisas = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasFragmentSelector',
				controller: 'ServVisasSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servVisases = APP.checkDublicate2(
							$scope.item.servVisases
						  , data.data
						  , 'ServVisasView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotelRoom = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomFragmentSelector',
				controller: 'ServHotelRoomSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotelRooms = APP.checkDublicate2(
							$scope.item.servHotelRooms
						  , data.data
						  , 'ServHotelRoomView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServKidsRuleFeatures = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServkidsruleFragmentSelector',
				controller: 'ServKidsRuleSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServKidsRuleFeatureses = APP.checkDublicate(
							$scope.item.relServKidsRuleFeatureses
						  , data.data
						  , 'servkidsrule'
						  , 'dictglobal'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqServHotels = APP.checkDublicate2(
							$scope.item.reqServHotels
						  , data.data
						  , 'ReqServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmContactCommunications = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsFragmentSelector',
				controller: 'TmContactCommunicationsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmContactCommunicationses = APP.checkDublicate2(
							$scope.item.tmContactCommunicationses
						  , data.data
						  , 'TmContactCommunicationsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqServHotelRoomBusy = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelroombusyFragmentSelector',
				controller: 'ReqServHotelRoomBusySelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqServHotelRoomBusies = APP.checkDublicate2(
							$scope.item.reqServHotelRoomBusies
						  , data.data
						  , 'ReqServHotelRoomBusyView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelRoomFeatures = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomFragmentSelector',
				controller: 'ServHotelRoomSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelRoomFeatureses = APP.checkDublicate(
							$scope.item.relServHotelRoomFeatureses
						  , data.data
						  , 'servhotelroom'
						  , 'dictglobal'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqServHotels = APP.checkDublicate2(
							$scope.item.reqServHotels
						  , data.data
						  , 'ReqServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServCruise = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServcruiseFragmentSelector',
				controller: 'ServCruiseSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servCruises = APP.checkDublicate2(
							$scope.item.servCruises
						  , data.data
						  , 'ServCruiseView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransfer = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferFragmentSelector',
				controller: 'ServTransferSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransfers = APP.checkDublicate2(
							$scope.item.servTransfers
						  , data.data
						  , 'ServTransferView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsAir = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairFragmentSelector',
				controller: 'ServTicketsAirSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsAirs = APP.checkDublicate2(
							$scope.item.servTicketsAirs
						  , data.data
						  , 'ServTicketsAirView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServGifts = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServgiftsFragmentSelector',
				controller: 'ServGiftsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servGiftses = APP.checkDublicate2(
							$scope.item.servGiftses
						  , data.data
						  , 'ServGiftsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmCommercial = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcommercialFragmentSelector',
				controller: 'TmCommercialSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmCommercials = APP.checkDublicate2(
							$scope.item.tmCommercials
						  , data.data
						  , 'TmCommercialView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccount = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountFragmentSelector',
				controller: 'PaymentAccountSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccounts = APP.checkDublicate2(
							$scope.item.paymentAccounts
						  , data.data
						  , 'PaymentAccountView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotelServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelservicesFragmentSelector',
				controller: 'ServHotelServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotelServiceses = APP.checkDublicate2(
							$scope.item.servHotelServiceses
						  , data.data
						  , 'ServHotelServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqCruiseServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesFragmentSelector',
				controller: 'ReqCruiseServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqCruiseServiceses = APP.checkDublicate2(
							$scope.item.reqCruiseServiceses
						  , data.data
						  , 'ReqCruiseServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsAir = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairFragmentSelector',
				controller: 'ServTicketsAirSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsAirs = APP.checkDublicate2(
							$scope.item.servTicketsAirs
						  , data.data
						  , 'ServTicketsAirView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransfer = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferFragmentSelector',
				controller: 'ServTransferSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransfers = APP.checkDublicate2(
							$scope.item.servTransfers
						  , data.data
						  , 'ServTransferView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmPolicies = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmpoliciesFragmentSelector',
				controller: 'TmPoliciesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmPolicieses = APP.checkDublicate2(
							$scope.item.tmPolicieses
						  , data.data
						  , 'TmPoliciesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmPolicies = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmpoliciesFragmentSelector',
				controller: 'TmPoliciesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmPolicieses = APP.checkDublicate2(
							$scope.item.tmPolicieses
						  , data.data
						  , 'TmPoliciesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemLocationTypePlacement = function () {
			var modalInstance = $modal.open({
				templateUrl: 'LocationtypeplacementFragmentSelector',
				controller: 'LocationTypePlacementSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.locationTypePlacements = APP.checkDublicate2(
							$scope.item.locationTypePlacements
						  , data.data
						  , 'LocationTypePlacementView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactFragmentSelector',
				controller: 'PaymentContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContacts = APP.checkDublicate2(
							$scope.item.paymentContacts
						  , data.data
						  , 'PaymentContactView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmAccountCommunications = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsFragmentSelector',
				controller: 'TmAccountCommunicationsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmAccountCommunicationses = APP.checkDublicate2(
							$scope.item.tmAccountCommunicationses
						  , data.data
						  , 'TmAccountCommunicationsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServInsurances = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesFragmentSelector',
				controller: 'ServInsurancesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servInsuranceses = APP.checkDublicate2(
							$scope.item.servInsuranceses
						  , data.data
						  , 'ServInsurancesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelFeatures = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelFeatureses = APP.checkDublicate(
							$scope.item.relServHotelFeatureses
						  , data.data
						  , 'servhotel'
						  , 'dictglobal'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqHotelRoomsBusy = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqhotelroomsbusyFragmentSelector',
				controller: 'ReqHotelRoomsBusySelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqHotelRoomsBusies = APP.checkDublicate2(
							$scope.item.reqHotelRoomsBusies
						  , data.data
						  , 'ReqHotelRoomsBusyView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('DocDocumentsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataDocDocuments = new Array()
			, $scope.ctrl = {
					  name: 'DocDocumentsListCtrl'
					, original: 'DocDocuments'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'docdocuments' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('DocDocumentsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataDocDocuments: new Array()
			  	})
			  	, $scope.dataDocDocuments = $scope.$storage.dataDocDocuments;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'DocdocumentsEdit',
					controller: 'DocDocumentsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'docdocuments' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.DocDocumentsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataDocDocuments.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/DocdocumentsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'DocdocumentsEdit/' + itemId,
						controller: 'DocDocumentsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'docdocuments' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataDocDocuments)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.DocDocumentsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataDocDocuments[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataDocDocuments[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/DocdocumentsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataDocDocuments); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.DocDocumentsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataDocDocuments.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataDocDocuments(true);
	    };
	    
	    $scope.loadAllDataDocDocuments = function() {
	    	$servicesStorage.DocDocumentsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataDocDocuments = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataDocDocuments = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.DocDocumentsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataDocDocuments = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataDocDocuments = APP.uniqueArray($scope.dataDocDocuments.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredDocDocuments = $scope.dataDocDocuments.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.DocDocumentsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataDocDocuments(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("DocDocuments", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('DocDocumentsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataDocDocuments = new Array()
		, $scope.ctrl = {
				  name: 'DocDocumentsSelectorCtrl'
				, original: 'DocDocuments'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('DocDocumentsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataDocDocuments: new Object()
		  	})
		  	, $scope.dataDocDocuments = $scope.$storage.dataDocDocuments;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataDocDocuments = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.DocDocumentsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataDocDocuments = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataDocDocuments = APP.uniqueArray($scope.dataDocDocuments.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataDocDocuments(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("DocDocuments", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('DocDocumentsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'DocDocumentsEditCtrl'
			, original: 'DocDocuments'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('DocDocumentsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemDocDocuments: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'DocDocuments', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.DocDocumentsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/DocdocumentsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.DocDocumentsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/DocdocumentsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.DocDocumentsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemDocDocuments = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'DocDocuments');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("DocDocuments", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'DocDocuments');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelReqServHotelDocDocumentsForHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteldocdocumentsforhotelEdit',
				controller: 'RelReqServHotelDocDocumentsForHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelReqServHotelDocDocumentsForHotels
							, editItemId: itemId
							, excludeList: [ 'docdocuments' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelReqServHotelDocDocumentsForUser = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteldocdocumentsforuserEdit',
				controller: 'RelReqServHotelDocDocumentsForUserEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelReqServHotelDocDocumentsForUsers
							, editItemId: itemId
							, excludeList: [ 'docdocuments' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTmOrderDocDocuments = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderdocdocumentsEdit',
				controller: 'RelTmOrderDocDocumentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTmOrderDocDocumentses
							, editItemId: itemId
							, excludeList: [ 'docdocuments' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTourDocs = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltourdocsEdit',
				controller: 'RelTourDocsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTourDocses
							, editItemId: itemId
							, excludeList: [ 'docdocuments' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelDocDocuments = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhoteldocdocumentsEdit',
				controller: 'RelServHotelDocDocumentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelDocDocumentses
							, editItemId: itemId
							, excludeList: [ 'docdocuments' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelCruiseDocs = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelcruisedocsEdit',
				controller: 'RelCruiseDocsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelCruiseDocses
							, editItemId: itemId
							, excludeList: [ 'docdocuments' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelReqServHotelDocDocumentsForHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteldocdocumentsforhotelFragmentMedit',
				controller: 'RelReqServHotelDocDocumentsForHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relreqservhoteldocdocumentsforhotels' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				$scope.item.relReqServHotelDocDocumentsForHotels.push(item);
			}, function(){});
		};
		
		$scope.uploadRelReqServHotelDocDocumentsForHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadDocument',
				controller: 'UploadDocumentCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relreqservhoteldocdocumentsforhotels' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relReqServHotelDocDocumentsForHotels = APP.checkDublicate(
						$scope.item.relReqServHotelDocDocumentsForHotels
					  , data.data[0]
					  , 'docdocuments'
					  , 'docdocuments'
					  , $scope.item
				);
				
			}, function(){});
		};
		
		$scope.createModalItemRelReqServHotelDocDocumentsForUser = function () {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteldocdocumentsforuserFragmentMedit',
				controller: 'RelReqServHotelDocDocumentsForUserEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relreqservhoteldocdocumentsforusers' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				$scope.item.relReqServHotelDocDocumentsForUsers.push(item);
			}, function(){});
		};
		
		$scope.uploadRelReqServHotelDocDocumentsForUser = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadDocument',
				controller: 'UploadDocumentCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relreqservhoteldocdocumentsforusers' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relReqServHotelDocDocumentsForUsers = APP.checkDublicate(
						$scope.item.relReqServHotelDocDocumentsForUsers
					  , data.data[0]
					  , 'docdocuments'
					  , 'docdocuments'
					  , $scope.item
				);
				
			}, function(){});
		};
		
		$scope.createModalItemRelTmOrderDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderdocdocumentsFragmentMedit',
				controller: 'RelTmOrderDocDocumentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'reltmorderdocdocumentses' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				$scope.item.relTmOrderDocDocumentses.push(item);
			}, function(){});
		};
		
		$scope.uploadRelTmOrderDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadDocument',
				controller: 'UploadDocumentCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'reltmorderdocdocumentses' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relTmOrderDocDocumentses = APP.checkDublicate(
						$scope.item.relTmOrderDocDocumentses
					  , data.data[0]
					  , 'docdocuments'
					  , 'docdocuments'
					  , $scope.item
				);
				
			}, function(){});
		};
		
		$scope.createModalItemRelTourDocs = function () {
			if(typeof $scope.item.relTourDocses == "undefined"){
				$scope.item.relTourDocses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltourdocsEdit',
				controller: 'RelTourDocsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'docdocuments' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTourDocs#item: ', item);
				}
				$scope.item.relTourDocses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhoteldocdocumentsFragmentMedit',
				controller: 'RelServHotelDocDocumentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relservhoteldocdocumentses' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				$scope.item.relServHotelDocDocumentses.push(item);
			}, function(){});
		};
		
		$scope.uploadRelServHotelDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadDocument',
				controller: 'UploadDocumentCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relservhoteldocdocumentses' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relServHotelDocDocumentses = APP.checkDublicate(
						$scope.item.relServHotelDocDocumentses
					  , data.data[0]
					  , 'docdocuments'
					  , 'docdocuments'
					  , $scope.item
				);
				
			}, function(){});
		};
		
		$scope.createModalItemRelCruiseDocs = function () {
			if(typeof $scope.item.relCruiseDocses == "undefined"){
				$scope.item.relCruiseDocses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelcruisedocsEdit',
				controller: 'RelCruiseDocsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'docdocuments' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelCruiseDocs#item: ', item);
				}
				$scope.item.relCruiseDocses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelReqServHotelDocDocumentsForHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relReqServHotelDocDocumentsForHotels = APP.checkDublicate(
							$scope.item.relReqServHotelDocDocumentsForHotels
						  , data.data
						  , 'reqservhotel'
						  , 'docdocuments'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelReqServHotelDocDocumentsForUser = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relReqServHotelDocDocumentsForUsers = APP.checkDublicate(
							$scope.item.relReqServHotelDocDocumentsForUsers
						  , data.data
						  , 'reqservhotel'
						  , 'docdocuments'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTmOrderDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderFragmentSelector',
				controller: 'TmOrderSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTmOrderDocDocumentses = APP.checkDublicate(
							$scope.item.relTmOrderDocDocumentses
						  , data.data
						  , 'tmorder'
						  , 'docdocuments'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTourDocs = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourFragmentSelector',
				controller: 'ServTourSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTourDocses = APP.checkDublicate(
							$scope.item.relTourDocses
						  , data.data
						  , 'servtour'
						  , 'docdocuments'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelDocDocumentses = APP.checkDublicate(
							$scope.item.relServHotelDocDocumentses
						  , data.data
						  , 'servhotel'
						  , 'docdocuments'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelCruiseDocs = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServcruiseFragmentSelector',
				controller: 'ServCruiseSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relCruiseDocses = APP.checkDublicate(
							$scope.item.relCruiseDocses
						  , data.data
						  , 'servcruise'
						  , 'docdocuments'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('GroupGlobalListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataGroupGlobal = new Array()
			, $scope.ctrl = {
					  name: 'GroupGlobalListCtrl'
					, original: 'GroupGlobal'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'groupglobal' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('GroupGlobalListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataGroupGlobal: new Array()
			  	})
			  	, $scope.dataGroupGlobal = $scope.$storage.dataGroupGlobal;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'GroupglobalEdit',
					controller: 'GroupGlobalEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'groupglobal' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.GroupGlobalDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataGroupGlobal.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/GroupglobalCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'GroupglobalEdit/' + itemId,
						controller: 'GroupGlobalEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'groupglobal' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataGroupGlobal)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.GroupGlobalDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataGroupGlobal[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataGroupGlobal[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/GroupglobalEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataGroupGlobal); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.GroupGlobalDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataGroupGlobal.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataGroupGlobal(true);
	    };
	    
	    $scope.loadAllDataGroupGlobal = function() {
	    	$servicesStorage.GroupGlobalDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataGroupGlobal = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataGroupGlobal = $scope.dataGroupGlobal;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataGroupGlobal = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.GroupGlobalDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataGroupGlobal = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataGroupGlobal = APP.uniqueArray($scope.dataGroupGlobal.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataGroupGlobal = $scope.dataGroupGlobal;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredGroupGlobal = $scope.dataGroupGlobal.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.GroupGlobalDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataGroupGlobal(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("GroupGlobal", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('GroupGlobalSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataGroupGlobal = new Array()
		, $scope.ctrl = {
				  name: 'GroupGlobalSelectorCtrl'
				, original: 'GroupGlobal'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('GroupGlobalSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataGroupGlobal: new Object()
		  	})
		  	, $scope.dataGroupGlobal = $scope.$storage.dataGroupGlobal;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataGroupGlobal = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.GroupGlobalDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataGroupGlobal = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataGroupGlobal = APP.uniqueArray($scope.dataGroupGlobal.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataGroupGlobal = $scope.dataGroupGlobal;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataGroupGlobal(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("GroupGlobal", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('GroupGlobalEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'GroupGlobalEditCtrl'
			, original: 'GroupGlobal'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('GroupGlobalEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemGroupGlobal: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'GroupGlobal', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.GroupGlobalDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/GroupglobalList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.GroupGlobalDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/GroupglobalList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.GroupGlobalDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemGroupGlobal = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'GroupGlobal');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("GroupGlobal", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'GroupGlobal');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServHotelRoom = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomEdit',
				controller: 'ServHotelRoomEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotelRooms
							, editItemId: itemId
							, excludeList: [ 'groupglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTour = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourEdit',
				controller: 'ServTourEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTours
							, editItemId: itemId
							, excludeList: [ 'groupglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServHotelRoom = function () {
			if(typeof $scope.item.servHotelRooms == "undefined"){
				$scope.item.servHotelRooms = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomEdit',
				controller: 'ServHotelRoomEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'groupglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotelRoom#item: ', item);
				}
				$scope.item.servHotelRooms.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTour = function () {
			if(typeof $scope.item.servTours == "undefined"){
				$scope.item.servTours = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtourEdit',
				controller: 'ServTourEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'groupglobal' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTour#item: ', item);
				}
				$scope.item.servTours.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServHotelRoom = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomFragmentSelector',
				controller: 'ServHotelRoomSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotelRooms = APP.checkDublicate2(
							$scope.item.servHotelRooms
						  , data.data
						  , 'ServHotelRoomView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTour = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourFragmentSelector',
				controller: 'ServTourSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTours = APP.checkDublicate2(
							$scope.item.servTours
						  , data.data
						  , 'ServTourView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('InfoContactInformationListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataInfoContactInformation = new Array()
			, $scope.ctrl = {
					  name: 'InfoContactInformationListCtrl'
					, original: 'InfoContactInformation'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'infocontactinformation' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('InfoContactInformationListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataInfoContactInformation: new Array()
			  	})
			  	, $scope.dataInfoContactInformation = $scope.$storage.dataInfoContactInformation;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'InfocontactinformationEdit',
					controller: 'InfoContactInformationEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'infocontactinformation' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.InfoContactInformationDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataInfoContactInformation.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/InfocontactinformationCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'InfocontactinformationEdit/' + itemId,
						controller: 'InfoContactInformationEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'infocontactinformation' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataInfoContactInformation)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.InfoContactInformationDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataInfoContactInformation[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataInfoContactInformation[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/InfocontactinformationEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataInfoContactInformation); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.InfoContactInformationDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataInfoContactInformation.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataInfoContactInformation(true);
	    };
	    
	    $scope.loadAllDataInfoContactInformation = function() {
	    	$servicesStorage.InfoContactInformationDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataInfoContactInformation = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataInfoContactInformation = $scope.dataInfoContactInformation;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataInfoContactInformation = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.InfoContactInformationDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataInfoContactInformation = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataInfoContactInformation = APP.uniqueArray($scope.dataInfoContactInformation.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataInfoContactInformation = $scope.dataInfoContactInformation;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredInfoContactInformation = $scope.dataInfoContactInformation.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.InfoContactInformationDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataInfoContactInformation(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("InfoContactInformation", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('InfoContactInformationSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataInfoContactInformation = new Array()
		, $scope.ctrl = {
				  name: 'InfoContactInformationSelectorCtrl'
				, original: 'InfoContactInformation'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('InfoContactInformationSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataInfoContactInformation: new Object()
		  	})
		  	, $scope.dataInfoContactInformation = $scope.$storage.dataInfoContactInformation;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataInfoContactInformation = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.InfoContactInformationDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataInfoContactInformation = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataInfoContactInformation = APP.uniqueArray($scope.dataInfoContactInformation.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataInfoContactInformation = $scope.dataInfoContactInformation;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataInfoContactInformation(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("InfoContactInformation", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('InfoContactInformationEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'InfoContactInformationEditCtrl'
			, original: 'InfoContactInformation'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('InfoContactInformationEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemInfoContactInformation: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'InfoContactInformation', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.InfoContactInformationDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/InfocontactinformationList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.InfoContactInformationDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/InfocontactinformationList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.InfoContactInformationDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemInfoContactInformation = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'InfoContactInformation');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("InfoContactInformation", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'InfoContactInformation');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'infocontactinformation' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'infocontactinformation' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('InfoServicesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataInfoServices = new Array()
			, $scope.ctrl = {
					  name: 'InfoServicesListCtrl'
					, original: 'InfoServices'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'infoservices' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('InfoServicesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataInfoServices: new Array()
			  	})
			  	, $scope.dataInfoServices = $scope.$storage.dataInfoServices;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'InfoservicesEdit',
					controller: 'InfoServicesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'infoservices' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.InfoServicesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataInfoServices.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/InfoservicesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'InfoservicesEdit/' + itemId,
						controller: 'InfoServicesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'infoservices' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataInfoServices)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.InfoServicesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataInfoServices[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataInfoServices[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/InfoservicesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataInfoServices); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.InfoServicesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataInfoServices.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataInfoServices(true);
	    };
	    
	    $scope.loadAllDataInfoServices = function() {
	    	$servicesStorage.InfoServicesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataInfoServices = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataInfoServices = $scope.dataInfoServices;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataInfoServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.InfoServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataInfoServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataInfoServices = APP.uniqueArray($scope.dataInfoServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataInfoServices = $scope.dataInfoServices;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredInfoServices = $scope.dataInfoServices.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.InfoServicesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataInfoServices(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("InfoServices", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('InfoServicesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataOtherServicesStoreView = new Array()
		, $scope.ctrl = {
				  name: 'InfoServicesSelectorCtrl'
				, original: 'InfoServices'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('InfoServicesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataInfoServices: new Object()
		  	})
		  	, $scope.dataOtherServicesStoreView = $scope.$storage.dataOtherServicesStoreView;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataOtherServicesStoreView = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.OtherServicesStoreViewDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataOtherServicesStoreView = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataOtherServicesStoreView = APP.uniqueArray($scope.dataOtherServicesStoreView.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataOtherServicesStoreView = $scope.dataOtherServicesStoreView;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataOtherServicesStoreView(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("InfoServices", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('InfoServicesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'InfoServicesEditCtrl'
			, original: 'InfoServices'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('InfoServicesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemInfoServices: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'InfoServices', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.InfoServicesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/InfoservicesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.InfoServicesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/InfoservicesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.InfoServicesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemInfoServices = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'InfoServices');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServCruise = $scope.$storage.dataServCruise;
			}
			$servicesStorage.ServCruiseDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServCruise = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServCruise = $scope.dataServCruise;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServExcursions = $scope.$storage.dataServExcursions;
			}
			$servicesStorage.ServExcursionsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServExcursions = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServExcursions = $scope.dataServExcursions;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServGifts = $scope.$storage.dataServGifts;
			}
			$servicesStorage.ServGiftsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServGifts = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServGifts = $scope.dataServGifts;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServInsurances = $scope.$storage.dataServInsurances;
			}
			$servicesStorage.ServInsurancesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServInsurances = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServInsurances = $scope.dataServInsurances;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTicketsAir = $scope.$storage.dataServTicketsAir;
			}
			$servicesStorage.ServTicketsAirDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTicketsAir = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTicketsAir = $scope.dataServTicketsAir;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTicketsRail = $scope.$storage.dataServTicketsRail;
			}
			$servicesStorage.ServTicketsRailDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTicketsRail = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTicketsRail = $scope.dataServTicketsRail;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTour = $scope.$storage.dataServTour;
			}
			$servicesStorage.ServTourDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTour = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTour = $scope.dataServTour;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTransfer = $scope.$storage.dataServTransfer;
			}
			$servicesStorage.ServTransferDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTransfer = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTransfer = $scope.dataServTransfer;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServVisas = $scope.$storage.dataServVisas;
			}
			$servicesStorage.ServVisasDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServVisas = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServVisas = $scope.dataServVisas;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("InfoServices", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'InfoServices');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelTmOrderInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderinfoservicesEdit',
				controller: 'RelTmOrderInfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTmOrderInfoServiceses
							, editItemId: itemId
							, excludeList: [ 'infoservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqCruiseServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesEdit',
				controller: 'ReqCruiseServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqCruiseServiceses
							, editItemId: itemId
							, excludeList: [ 'infoservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTourServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltourservicesEdit',
				controller: 'RelTourServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTourServiceses
							, editItemId: itemId
							, excludeList: [ 'infoservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccount = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccounts
							, editItemId: itemId
							, excludeList: [ 'infoservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelTmOrderInfoServices = function () {
			if(typeof $scope.item.relTmOrderInfoServiceses == "undefined"){
				$scope.item.relTmOrderInfoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderinfoservicesEdit',
				controller: 'RelTmOrderInfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'infoservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTmOrderInfoServices#item: ', item);
				}
				$scope.item.relTmOrderInfoServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqCruiseServices = function () {
			if(typeof $scope.item.reqCruiseServiceses == "undefined"){
				$scope.item.reqCruiseServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesEdit',
				controller: 'ReqCruiseServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'infoservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqCruiseServices#item: ', item);
				}
				$scope.item.reqCruiseServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTourServices = function () {
			if(typeof $scope.item.relTourServiceses == "undefined"){
				$scope.item.relTourServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltourservicesEdit',
				controller: 'RelTourServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'infoservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTourServices#item: ', item);
				}
				$scope.item.relTourServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccount = function () {
			if(typeof $scope.item.paymentAccounts == "undefined"){
				$scope.item.paymentAccounts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'infoservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccount#item: ', item);
				}
				$scope.item.paymentAccounts.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelTmOrderInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderFragmentSelector',
				controller: 'TmOrderSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTmOrderInfoServiceses = APP.checkDublicate(
							$scope.item.relTmOrderInfoServiceses
						  , data.data
						  , 'tmorder'
						  , 'infoservices'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqCruiseServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesFragmentSelector',
				controller: 'ReqCruiseServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqCruiseServiceses = APP.checkDublicate2(
							$scope.item.reqCruiseServiceses
						  , data.data
						  , 'ReqCruiseServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTourServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourFragmentSelector',
				controller: 'ServTourSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTourServiceses = APP.checkDublicate(
							$scope.item.relTourServiceses
						  , data.data
						  , 'servtour'
						  , 'infoservices'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccount = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountFragmentSelector',
				controller: 'PaymentAccountSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccounts = APP.checkDublicate2(
							$scope.item.paymentAccounts
						  , data.data
						  , 'PaymentAccountView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('LocationAddressListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataLocationAddress = new Array()
			, $scope.ctrl = {
					  name: 'LocationAddressListCtrl'
					, original: 'LocationAddress'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'locationaddress' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('LocationAddressListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataLocationAddress: new Array()
			  	})
			  	, $scope.dataLocationAddress = $scope.$storage.dataLocationAddress;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'LocationaddressEdit',
					controller: 'LocationAddressEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'locationaddress' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.LocationAddressDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataLocationAddress.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/LocationaddressCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'LocationaddressEdit/' + itemId,
						controller: 'LocationAddressEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'locationaddress' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataLocationAddress)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.LocationAddressDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataLocationAddress[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataLocationAddress[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/LocationaddressEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataLocationAddress); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.LocationAddressDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataLocationAddress.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataLocationAddress(true);
	    };
	    
	    $scope.loadAllDataLocationAddress = function() {
	    	$servicesStorage.LocationAddressDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationAddress = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationAddress = $scope.dataLocationAddress;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataLocationAddress = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.LocationAddressDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataLocationAddress = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationAddress = APP.uniqueArray($scope.dataLocationAddress.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationAddress = $scope.dataLocationAddress;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredLocationAddress = $scope.dataLocationAddress.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.LocationAddressDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataLocationAddress(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("LocationAddress", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('LocationAddressSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataLocationAddress = new Array()
		, $scope.ctrl = {
				  name: 'LocationAddressSelectorCtrl'
				, original: 'LocationAddress'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('LocationAddressSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataLocationAddress: new Object()
		  	})
		  	, $scope.dataLocationAddress = $scope.$storage.dataLocationAddress;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataLocationAddress = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.LocationAddressDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataLocationAddress = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationAddress = APP.uniqueArray($scope.dataLocationAddress.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationAddress = $scope.dataLocationAddress;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataLocationAddress(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("LocationAddress", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('LocationAddressEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'LocationAddressEditCtrl'
			, original: 'LocationAddress'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('LocationAddressEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemLocationAddress: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'LocationAddress', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.LocationAddressDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/LocationaddressList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.LocationAddressDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/LocationaddressList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.LocationAddressDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemLocationAddress = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'LocationAddress');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("LocationAddress", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'LocationAddress');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'locationaddress' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationaddress' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('LocationCitiesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataLocationCities = new Array()
			, $scope.ctrl = {
					  name: 'LocationCitiesListCtrl'
					, original: 'LocationCities'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'locationcities' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('LocationCitiesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataLocationCities: new Array()
			  	})
			  	, $scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'LocationcitiesEdit',
					controller: 'LocationCitiesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'locationcities' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.LocationCitiesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataLocationCities.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/LocationcitiesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'LocationcitiesEdit/' + itemId,
						controller: 'LocationCitiesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'locationcities' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataLocationCities)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.LocationCitiesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataLocationCities[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataLocationCities[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/LocationcitiesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataLocationCities); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.LocationCitiesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataLocationCities.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataLocationCities(true);
	    };
	    
	    $scope.loadAllDataLocationCities = function() {
	    	$servicesStorage.LocationCitiesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationCities = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationCities = $scope.dataLocationCities;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataLocationCities = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.LocationCitiesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataLocationCities = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationCities = APP.uniqueArray($scope.dataLocationCities.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationCities = $scope.dataLocationCities;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredLocationCities = $scope.dataLocationCities.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.LocationCitiesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataLocationCities(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("LocationCities", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('LocationCitiesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataLocationCities = new Array()
		, $scope.ctrl = {
				  name: 'LocationCitiesSelectorCtrl'
				, original: 'LocationCities'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('LocationCitiesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataLocationCities: new Object()
		  	})
		  	, $scope.dataLocationCities = $scope.$storage.dataLocationCities;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataLocationCities = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.LocationCitiesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataLocationCities = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationCities = APP.uniqueArray($scope.dataLocationCities.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationCities = $scope.dataLocationCities;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataLocationCities(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("LocationCities", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('LocationCitiesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'LocationCitiesEditCtrl'
			, original: 'LocationCities'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('LocationCitiesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemLocationCities: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'LocationCities', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.LocationCitiesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/LocationcitiesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.LocationCitiesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/LocationcitiesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.LocationCitiesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemLocationCities = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'LocationCities');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("LocationCities", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'LocationCities');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemTmContactCommunications = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsEdit',
				controller: 'TmContactCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmContactCommunicationses
							, editItemId: itemId
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmAccountCommunications = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsEdit',
				controller: 'TmAccountCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmAccountCommunicationses
							, editItemId: itemId
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransfer = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransfers
							, editItemId: itemId
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmContactAddresses = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactaddressesEdit',
				controller: 'TmContactAddressesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmContactAddresseses
							, editItemId: itemId
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmAccountAddresses = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountaddressesEdit',
				controller: 'TmAccountAddressesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmAccountAddresseses
							, editItemId: itemId
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServExcursions = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsEdit',
				controller: 'ServExcursionsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservExcursionses
							, editItemId: itemId
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTour = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourEdit',
				controller: 'ServTourEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTours
							, editItemId: itemId
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemTmContactCommunications = function () {
			if(typeof $scope.item.tmContactCommunicationses == "undefined"){
				$scope.item.tmContactCommunicationses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsEdit',
				controller: 'TmContactCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmContactCommunications#item: ', item);
				}
				$scope.item.tmContactCommunicationses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmAccountCommunications = function () {
			if(typeof $scope.item.tmAccountCommunicationses == "undefined"){
				$scope.item.tmAccountCommunicationses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsEdit',
				controller: 'TmAccountCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmAccountCommunications#item: ', item);
				}
				$scope.item.tmAccountCommunicationses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransfer = function () {
			if(typeof $scope.item.servTransfers == "undefined"){
				$scope.item.servTransfers = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransfer#item: ', item);
				}
				$scope.item.servTransfers.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmContactAddresses = function () {
			if(typeof $scope.item.tmContactAddresseses == "undefined"){
				$scope.item.tmContactAddresseses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactaddressesEdit',
				controller: 'TmContactAddressesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmContactAddresses#item: ', item);
				}
				$scope.item.tmContactAddresseses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmAccountAddresses = function () {
			if(typeof $scope.item.tmAccountAddresseses == "undefined"){
				$scope.item.tmAccountAddresseses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountaddressesEdit',
				controller: 'TmAccountAddressesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmAccountAddresses#item: ', item);
				}
				$scope.item.tmAccountAddresseses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServExcursions = function () {
			if(typeof $scope.item.servExcursionses == "undefined"){
				$scope.item.servExcursionses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsEdit',
				controller: 'ServExcursionsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServExcursions#item: ', item);
				}
				$scope.item.servExcursionses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTour = function () {
			if(typeof $scope.item.servTours == "undefined"){
				$scope.item.servTours = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtourEdit',
				controller: 'ServTourEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcities' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTour#item: ', item);
				}
				$scope.item.servTours.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemTmContactCommunications = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsFragmentSelector',
				controller: 'TmContactCommunicationsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmContactCommunicationses = APP.checkDublicate2(
							$scope.item.tmContactCommunicationses
						  , data.data
						  , 'TmContactCommunicationsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmAccountCommunications = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsFragmentSelector',
				controller: 'TmAccountCommunicationsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmAccountCommunicationses = APP.checkDublicate2(
							$scope.item.tmAccountCommunicationses
						  , data.data
						  , 'TmAccountCommunicationsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransfer = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferFragmentSelector',
				controller: 'ServTransferSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransfers = APP.checkDublicate2(
							$scope.item.servTransfers
						  , data.data
						  , 'ServTransferView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmContactAddresses = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactaddressesFragmentSelector',
				controller: 'TmContactAddressesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmContactAddresseses = APP.checkDublicate2(
							$scope.item.tmContactAddresseses
						  , data.data
						  , 'TmContactAddressesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmAccountAddresses = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountaddressesFragmentSelector',
				controller: 'TmAccountAddressesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmAccountAddresseses = APP.checkDublicate2(
							$scope.item.tmAccountAddresseses
						  , data.data
						  , 'TmAccountAddressesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServExcursions = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsFragmentSelector',
				controller: 'ServExcursionsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servExcursionses = APP.checkDublicate2(
							$scope.item.servExcursionses
						  , data.data
						  , 'ServExcursionsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTour = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourFragmentSelector',
				controller: 'ServTourSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTours = APP.checkDublicate2(
							$scope.item.servTours
						  , data.data
						  , 'ServTourView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('LocationCountriesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataLocationCountries = new Array()
			, $scope.ctrl = {
					  name: 'LocationCountriesListCtrl'
					, original: 'LocationCountries'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'locationcountries' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('LocationCountriesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataLocationCountries: new Array()
			  	})
			  	, $scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'LocationcountriesEdit',
					controller: 'LocationCountriesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'locationcountries' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.LocationCountriesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataLocationCountries.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/LocationcountriesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'LocationcountriesEdit/' + itemId,
						controller: 'LocationCountriesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'locationcountries' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataLocationCountries)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.LocationCountriesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataLocationCountries[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataLocationCountries[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/LocationcountriesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataLocationCountries); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.LocationCountriesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataLocationCountries.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataLocationCountries(true);
	    };
	    
	    $scope.loadAllDataLocationCountries = function() {
	    	$servicesStorage.LocationCountriesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationCountries = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataLocationCountries = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.LocationCountriesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataLocationCountries = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationCountries = APP.uniqueArray($scope.dataLocationCountries.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredLocationCountries = $scope.dataLocationCountries.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.LocationCountriesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataLocationCountries(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("LocationCountries", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('LocationCountriesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataLocationCountries = new Array()
		, $scope.ctrl = {
				  name: 'LocationCountriesSelectorCtrl'
				, original: 'LocationCountries'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('LocationCountriesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataLocationCountries: new Object()
		  	})
		  	, $scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataLocationCountries = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.LocationCountriesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataLocationCountries = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationCountries = APP.uniqueArray($scope.dataLocationCountries.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataLocationCountries(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("LocationCountries", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('LocationCountriesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'LocationCountriesEditCtrl'
			, original: 'LocationCountries'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('LocationCountriesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemLocationCountries: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'LocationCountries', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.LocationCountriesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/LocationcountriesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.LocationCountriesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/LocationcountriesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.LocationCountriesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemLocationCountries = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'LocationCountries');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("LocationCountries", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'LocationCountries');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServTour = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourEdit',
				controller: 'ServTourEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTours
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServVisas = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasEdit',
				controller: 'ServVisasEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservVisases
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactEdit',
				controller: 'TmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmContacts
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemLocationCities = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'LocationcitiesEdit',
				controller: 'LocationCitiesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemlocationCitieses
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServInsurances = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservInsuranceses
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransfer = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransfers
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmAccount = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountEdit',
				controller: 'TmAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmAccounts
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmContactEasy = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontacteasyEdit',
				controller: 'TmContactEasyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmContactEasies
							, editItemId: itemId
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServTour = function () {
			if(typeof $scope.item.servTours == "undefined"){
				$scope.item.servTours = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtourEdit',
				controller: 'ServTourEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTour#item: ', item);
				}
				$scope.item.servTours.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServVisas = function () {
			if(typeof $scope.item.servVisases == "undefined"){
				$scope.item.servVisases = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasEdit',
				controller: 'ServVisasEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServVisas#item: ', item);
				}
				$scope.item.servVisases.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmContact = function () {
			if(typeof $scope.item.tmContacts == "undefined"){
				$scope.item.tmContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactEdit',
				controller: 'TmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmContact#item: ', item);
				}
				$scope.item.tmContacts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemLocationCities = function () {
			if(typeof $scope.item.locationCitieses == "undefined"){
				$scope.item.locationCitieses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'LocationcitiesEdit',
				controller: 'LocationCitiesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemLocationCities#item: ', item);
				}
				$scope.item.locationCitieses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServInsurances = function () {
			if(typeof $scope.item.servInsuranceses == "undefined"){
				$scope.item.servInsuranceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServInsurances#item: ', item);
				}
				$scope.item.servInsuranceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransfer = function () {
			if(typeof $scope.item.servTransfers == "undefined"){
				$scope.item.servTransfers = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransfer#item: ', item);
				}
				$scope.item.servTransfers.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmAccount = function () {
			if(typeof $scope.item.tmAccounts == "undefined"){
				$scope.item.tmAccounts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountEdit',
				controller: 'TmAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmAccount#item: ', item);
				}
				$scope.item.tmAccounts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmContactEasy = function () {
			if(typeof $scope.item.tmContactEasies == "undefined"){
				$scope.item.tmContactEasies = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmcontacteasyEdit',
				controller: 'TmContactEasyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationcountries' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmContactEasy#item: ', item);
				}
				$scope.item.tmContactEasies.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServTour = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourFragmentSelector',
				controller: 'ServTourSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTours = APP.checkDublicate2(
							$scope.item.servTours
						  , data.data
						  , 'ServTourView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServVisas = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasFragmentSelector',
				controller: 'ServVisasSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servVisases = APP.checkDublicate2(
							$scope.item.servVisases
						  , data.data
						  , 'ServVisasView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactFragmentSelector',
				controller: 'TmContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmContacts = APP.checkDublicate2(
							$scope.item.tmContacts
						  , data.data
						  , 'TmContactView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemLocationCities = function () {
			var modalInstance = $modal.open({
				templateUrl: 'LocationcitiesFragmentSelector',
				controller: 'LocationCitiesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.locationCitieses = APP.checkDublicate2(
							$scope.item.locationCitieses
						  , data.data
						  , 'LocationCitiesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServInsurances = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesFragmentSelector',
				controller: 'ServInsurancesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servInsuranceses = APP.checkDublicate2(
							$scope.item.servInsuranceses
						  , data.data
						  , 'ServInsurancesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransfer = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferFragmentSelector',
				controller: 'ServTransferSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransfers = APP.checkDublicate2(
							$scope.item.servTransfers
						  , data.data
						  , 'ServTransferView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmAccount = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountFragmentSelector',
				controller: 'TmAccountSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmAccounts = APP.checkDublicate2(
							$scope.item.tmAccounts
						  , data.data
						  , 'TmAccountView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmContactEasy = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontacteasyFragmentSelector',
				controller: 'TmContactEasySelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmContactEasies = APP.checkDublicate2(
							$scope.item.tmContactEasies
						  , data.data
						  , 'TmContactEasyView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('LocationTypePlacementListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataLocationTypePlacement = new Array()
			, $scope.ctrl = {
					  name: 'LocationTypePlacementListCtrl'
					, original: 'LocationTypePlacement'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'locationtypeplacement' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('LocationTypePlacementListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataLocationTypePlacement: new Array()
			  	})
			  	, $scope.dataLocationTypePlacement = $scope.$storage.dataLocationTypePlacement;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'LocationtypeplacementEdit',
					controller: 'LocationTypePlacementEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'locationtypeplacement' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.LocationTypePlacementDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataLocationTypePlacement.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/LocationtypeplacementCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'LocationtypeplacementEdit/' + itemId,
						controller: 'LocationTypePlacementEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'locationtypeplacement' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataLocationTypePlacement)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.LocationTypePlacementDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataLocationTypePlacement[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataLocationTypePlacement[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/LocationtypeplacementEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataLocationTypePlacement); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.LocationTypePlacementDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataLocationTypePlacement.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataLocationTypePlacement(true);
	    };
	    
	    $scope.loadAllDataLocationTypePlacement = function() {
	    	$servicesStorage.LocationTypePlacementDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationTypePlacement = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationTypePlacement = $scope.dataLocationTypePlacement;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataLocationTypePlacement = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.LocationTypePlacementDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataLocationTypePlacement = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationTypePlacement = APP.uniqueArray($scope.dataLocationTypePlacement.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationTypePlacement = $scope.dataLocationTypePlacement;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredLocationTypePlacement = $scope.dataLocationTypePlacement.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.LocationTypePlacementDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataLocationTypePlacement(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("LocationTypePlacement", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('LocationTypePlacementSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataLocationTypePlacement = new Array()
		, $scope.ctrl = {
				  name: 'LocationTypePlacementSelectorCtrl'
				, original: 'LocationTypePlacement'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('LocationTypePlacementSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataLocationTypePlacement: new Object()
		  	})
		  	, $scope.dataLocationTypePlacement = $scope.$storage.dataLocationTypePlacement;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataLocationTypePlacement = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.LocationTypePlacementDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataLocationTypePlacement = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataLocationTypePlacement = APP.uniqueArray($scope.dataLocationTypePlacement.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataLocationTypePlacement = $scope.dataLocationTypePlacement;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataLocationTypePlacement(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("LocationTypePlacement", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('LocationTypePlacementEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'LocationTypePlacementEditCtrl'
			, original: 'LocationTypePlacement'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('LocationTypePlacementEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemLocationTypePlacement: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'LocationTypePlacement', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.LocationTypePlacementDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/LocationtypeplacementList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.LocationTypePlacementDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/LocationtypeplacementList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.LocationTypePlacementDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemLocationTypePlacement = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'LocationTypePlacement');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("LocationTypePlacement", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'LocationTypePlacement');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'locationtypeplacement' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'locationtypeplacement' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('PaymentAccountListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataPaymentAccount = new Array()
			, $scope.ctrl = {
					  name: 'PaymentAccountListCtrl'
					, original: 'PaymentAccount'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'paymentaccount' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('PaymentAccountListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataPaymentAccount: new Array()
			  	})
			  	, $scope.dataPaymentAccount = $scope.$storage.dataPaymentAccount;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'PaymentaccountEdit',
					controller: 'PaymentAccountEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'paymentaccount' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.PaymentAccountDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataPaymentAccount.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/PaymentaccountCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'PaymentaccountEdit/' + itemId,
						controller: 'PaymentAccountEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'paymentaccount' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataPaymentAccount)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.PaymentAccountDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataPaymentAccount[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataPaymentAccount[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/PaymentaccountEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataPaymentAccount); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.PaymentAccountDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataPaymentAccount.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataPaymentAccount(true);
	    };
	    
	    $scope.loadAllDataPaymentAccount = function() {
	    	$servicesStorage.PaymentAccountDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentAccount = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentAccount = $scope.dataPaymentAccount;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataPaymentAccount = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentAccountDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentAccount = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentAccount = APP.uniqueArray($scope.dataPaymentAccount.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentAccount = $scope.dataPaymentAccount;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredPaymentAccount = $scope.dataPaymentAccount.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.PaymentAccountDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentAccount(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentAccount", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentAccountSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataPaymentAccount = new Array()
		, $scope.ctrl = {
				  name: 'PaymentAccountSelectorCtrl'
				, original: 'PaymentAccount'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('PaymentAccountSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataPaymentAccount: new Object()
		  	})
		  	, $scope.dataPaymentAccount = $scope.$storage.dataPaymentAccount;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataPaymentAccount = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentAccountDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentAccount = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentAccount = APP.uniqueArray($scope.dataPaymentAccount.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentAccount = $scope.dataPaymentAccount;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentAccount(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentAccount", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentAccountEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'PaymentAccountEditCtrl'
			, original: 'PaymentAccount'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('PaymentAccountEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemPaymentAccount: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'PaymentAccount', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.PaymentAccountDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentaccountList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.PaymentAccountDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentaccountList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.PaymentAccountDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemPaymentAccount = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'PaymentAccount');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByPaymentMethodId = $scope.$storage.dataDictGlobalByPaymentMethodId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByPaymentMethodId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByPaymentMethodId = $scope.dataDictGlobalByPaymentMethodId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByServiceTypeId = $scope.$storage.dataDictGlobalByServiceTypeId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByServiceTypeId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByServiceTypeId = $scope.dataDictGlobalByServiceTypeId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataInfoServices = $scope.$storage.dataInfoServices;
			}
			$servicesStorage.InfoServicesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataInfoServices = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataInfoServices = $scope.dataInfoServices;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmOrder = $scope.$storage.dataTmOrder;
			}
			$servicesStorage.TmOrderDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmOrder = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmOrder = $scope.dataTmOrder;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("PaymentAccount", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'PaymentAccount');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemPaymentAccountRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccountRecords
							, editItemId: itemId
							, excludeList: [ 'paymentaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemPaymentAccountRecord = function () {
			if(typeof $scope.item.paymentAccountRecords == "undefined"){
				$scope.item.paymentAccountRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordEdit',
				controller: 'PaymentAccountRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'paymentaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccountRecord#item: ', item);
				}
				$scope.item.paymentAccountRecords.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemPaymentAccountRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountrecordFragmentSelector',
				controller: 'PaymentAccountRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccountRecords = APP.checkDublicate2(
							$scope.item.paymentAccountRecords
						  , data.data
						  , 'PaymentAccountRecordView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('PaymentAccountRecordListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataPaymentAccountRecord = new Array()
			, $scope.ctrl = {
					  name: 'PaymentAccountRecordListCtrl'
					, original: 'PaymentAccountRecord'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'paymentaccountrecord' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('PaymentAccountRecordListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataPaymentAccountRecord: new Array()
			  	})
			  	, $scope.dataPaymentAccountRecord = $scope.$storage.dataPaymentAccountRecord;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'PaymentaccountrecordEdit',
					controller: 'PaymentAccountRecordEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'paymentaccountrecord' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.PaymentAccountRecordDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataPaymentAccountRecord.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/PaymentaccountrecordCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'PaymentaccountrecordEdit/' + itemId,
						controller: 'PaymentAccountRecordEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'paymentaccountrecord' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataPaymentAccountRecord)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.PaymentAccountRecordDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataPaymentAccountRecord[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataPaymentAccountRecord[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/PaymentaccountrecordEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataPaymentAccountRecord); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.PaymentAccountRecordDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataPaymentAccountRecord.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataPaymentAccountRecord(true);
	    };
	    
	    $scope.loadAllDataPaymentAccountRecord = function() {
	    	$servicesStorage.PaymentAccountRecordDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentAccountRecord = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentAccountRecord = $scope.dataPaymentAccountRecord;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataPaymentAccountRecord = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentAccountRecordDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentAccountRecord = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentAccountRecord = APP.uniqueArray($scope.dataPaymentAccountRecord.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentAccountRecord = $scope.dataPaymentAccountRecord;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredPaymentAccountRecord = $scope.dataPaymentAccountRecord.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.PaymentAccountRecordDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentAccountRecord(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentAccountRecord", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentAccountRecordSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataPaymentAccountRecord = new Array()
		, $scope.ctrl = {
				  name: 'PaymentAccountRecordSelectorCtrl'
				, original: 'PaymentAccountRecord'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('PaymentAccountRecordSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataPaymentAccountRecord: new Object()
		  	})
		  	, $scope.dataPaymentAccountRecord = $scope.$storage.dataPaymentAccountRecord;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataPaymentAccountRecord = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentAccountRecordDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentAccountRecord = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentAccountRecord = APP.uniqueArray($scope.dataPaymentAccountRecord.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentAccountRecord = $scope.dataPaymentAccountRecord;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentAccountRecord(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentAccountRecord", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentAccountRecordEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'PaymentAccountRecordEditCtrl'
			, original: 'PaymentAccountRecord'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('PaymentAccountRecordEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemPaymentAccountRecord: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'PaymentAccountRecord', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.PaymentAccountRecordDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentaccountrecordList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.PaymentAccountRecordDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentaccountrecordList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.PaymentAccountRecordDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemPaymentAccountRecord = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'PaymentAccountRecord');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByResidualAmountCurrencyId = $scope.$storage.dataCurrCurrencyByResidualAmountCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByResidualAmountCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByResidualAmountCurrencyId = $scope.dataCurrCurrencyByResidualAmountCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByOverdueAmountCurrencyId = $scope.$storage.dataCurrCurrencyByOverdueAmountCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByOverdueAmountCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByOverdueAmountCurrencyId = $scope.dataCurrCurrencyByOverdueAmountCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByPenaltyCurrencyId = $scope.$storage.dataCurrCurrencyByPenaltyCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByPenaltyCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByPenaltyCurrencyId = $scope.dataCurrCurrencyByPenaltyCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByMonthinstalCurrencyId = $scope.$storage.dataCurrCurrencyByMonthinstalCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByMonthinstalCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByMonthinstalCurrencyId = $scope.dataCurrCurrencyByMonthinstalCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByFineCurrencyId = $scope.$storage.dataCurrCurrencyByFineCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByFineCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByFineCurrencyId = $scope.dataCurrCurrencyByFineCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataPaymentAccount = $scope.$storage.dataPaymentAccount;
			}
			$servicesStorage.PaymentAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataPaymentAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataPaymentAccount = $scope.dataPaymentAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("PaymentAccountRecord", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'PaymentAccountRecord');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('PaymentContactListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataPaymentContact = new Array()
			, $scope.ctrl = {
					  name: 'PaymentContactListCtrl'
					, original: 'PaymentContact'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'paymentcontact' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('PaymentContactListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataPaymentContact: new Array()
			  	})
			  	, $scope.dataPaymentContact = $scope.$storage.dataPaymentContact;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'PaymentcontactEdit',
					controller: 'PaymentContactEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'paymentcontact' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.PaymentContactDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataPaymentContact.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/PaymentcontactCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'PaymentcontactEdit/' + itemId,
						controller: 'PaymentContactEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'paymentcontact' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataPaymentContact)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.PaymentContactDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataPaymentContact[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataPaymentContact[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/PaymentcontactEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataPaymentContact); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.PaymentContactDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataPaymentContact.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataPaymentContact(true);
	    };
	    
	    $scope.loadAllDataPaymentContact = function() {
	    	$servicesStorage.PaymentContactDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentContact = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentContact = $scope.dataPaymentContact;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataPaymentContact = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentContactDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentContact = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentContact = APP.uniqueArray($scope.dataPaymentContact.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentContact = $scope.dataPaymentContact;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredPaymentContact = $scope.dataPaymentContact.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.PaymentContactDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentContact(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentContact", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentContactSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataPaymentContact = new Array()
		, $scope.ctrl = {
				  name: 'PaymentContactSelectorCtrl'
				, original: 'PaymentContact'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('PaymentContactSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataPaymentContact: new Object()
		  	})
		  	, $scope.dataPaymentContact = $scope.$storage.dataPaymentContact;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataPaymentContact = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentContactDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentContact = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentContact = APP.uniqueArray($scope.dataPaymentContact.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentContact = $scope.dataPaymentContact;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentContact(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentContact", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentContactEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'PaymentContactEditCtrl'
			, original: 'PaymentContact'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('PaymentContactEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemPaymentContact: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'PaymentContact', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.PaymentContactDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentcontactList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.PaymentContactDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentcontactList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.PaymentContactDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemPaymentContact = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'PaymentContact');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmOrder = $scope.$storage.dataTmOrder;
			}
			$servicesStorage.TmOrderDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmOrder = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmOrder = $scope.dataTmOrder;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("PaymentContact", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'PaymentContact');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemPaymentContactRecord = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContactRecords
							, editItemId: itemId
							, excludeList: [ 'paymentcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemPaymentContactRecord = function () {
			if(typeof $scope.item.paymentContactRecords == "undefined"){
				$scope.item.paymentContactRecords = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordEdit',
				controller: 'PaymentContactRecordEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'paymentcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContactRecord#item: ', item);
				}
				$scope.item.paymentContactRecords.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemPaymentContactRecord = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactrecordFragmentSelector',
				controller: 'PaymentContactRecordSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContactRecords = APP.checkDublicate2(
							$scope.item.paymentContactRecords
						  , data.data
						  , 'PaymentContactRecordView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('PaymentContactRecordListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataPaymentContactRecord = new Array()
			, $scope.ctrl = {
					  name: 'PaymentContactRecordListCtrl'
					, original: 'PaymentContactRecord'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'paymentcontactrecord' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('PaymentContactRecordListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataPaymentContactRecord: new Array()
			  	})
			  	, $scope.dataPaymentContactRecord = $scope.$storage.dataPaymentContactRecord;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'PaymentcontactrecordEdit',
					controller: 'PaymentContactRecordEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'paymentcontactrecord' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.PaymentContactRecordDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataPaymentContactRecord.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/PaymentcontactrecordCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'PaymentcontactrecordEdit/' + itemId,
						controller: 'PaymentContactRecordEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'paymentcontactrecord' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataPaymentContactRecord)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.PaymentContactRecordDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataPaymentContactRecord[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataPaymentContactRecord[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/PaymentcontactrecordEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataPaymentContactRecord); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.PaymentContactRecordDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataPaymentContactRecord.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataPaymentContactRecord(true);
	    };
	    
	    $scope.loadAllDataPaymentContactRecord = function() {
	    	$servicesStorage.PaymentContactRecordDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentContactRecord = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentContactRecord = $scope.dataPaymentContactRecord;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataPaymentContactRecord = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentContactRecordDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentContactRecord = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentContactRecord = APP.uniqueArray($scope.dataPaymentContactRecord.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentContactRecord = $scope.dataPaymentContactRecord;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredPaymentContactRecord = $scope.dataPaymentContactRecord.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.PaymentContactRecordDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentContactRecord(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentContactRecord", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentContactRecordSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataPaymentContactRecord = new Array()
		, $scope.ctrl = {
				  name: 'PaymentContactRecordSelectorCtrl'
				, original: 'PaymentContactRecord'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('PaymentContactRecordSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataPaymentContactRecord: new Object()
		  	})
		  	, $scope.dataPaymentContactRecord = $scope.$storage.dataPaymentContactRecord;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataPaymentContactRecord = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentContactRecordDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentContactRecord = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentContactRecord = APP.uniqueArray($scope.dataPaymentContactRecord.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentContactRecord = $scope.dataPaymentContactRecord;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentContactRecord(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentContactRecord", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentContactRecordEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'PaymentContactRecordEditCtrl'
			, original: 'PaymentContactRecord'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('PaymentContactRecordEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemPaymentContactRecord: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'PaymentContactRecord', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.PaymentContactRecordDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentcontactrecordList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.PaymentContactRecordDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentcontactrecordList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.PaymentContactRecordDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemPaymentContactRecord = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'PaymentContactRecord');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByOverdueAmountCurrencyId = $scope.$storage.dataCurrCurrencyByOverdueAmountCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByOverdueAmountCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByOverdueAmountCurrencyId = $scope.dataCurrCurrencyByOverdueAmountCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByMonthinstalCurrencyId = $scope.$storage.dataCurrCurrencyByMonthinstalCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByMonthinstalCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByMonthinstalCurrencyId = $scope.dataCurrCurrencyByMonthinstalCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByFineCurrencyId = $scope.$storage.dataCurrCurrencyByFineCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByFineCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByFineCurrencyId = $scope.dataCurrCurrencyByFineCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByResidualAmountCurrencyId = $scope.$storage.dataCurrCurrencyByResidualAmountCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByResidualAmountCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByResidualAmountCurrencyId = $scope.dataCurrCurrencyByResidualAmountCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrencyByPenaltyCurrencyId = $scope.$storage.dataCurrCurrencyByPenaltyCurrencyId;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrencyByPenaltyCurrencyId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrencyByPenaltyCurrencyId = $scope.dataCurrCurrencyByPenaltyCurrencyId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataPaymentContact = $scope.$storage.dataPaymentContact;
			}
			$servicesStorage.PaymentContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataPaymentContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataPaymentContact = $scope.dataPaymentContact;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("PaymentContactRecord", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'PaymentContactRecord');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('PaymentDetailsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataPaymentDetails = new Array()
			, $scope.ctrl = {
					  name: 'PaymentDetailsListCtrl'
					, original: 'PaymentDetails'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'paymentdetails' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('PaymentDetailsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataPaymentDetails: new Array()
			  	})
			  	, $scope.dataPaymentDetails = $scope.$storage.dataPaymentDetails;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'PaymentdetailsEdit',
					controller: 'PaymentDetailsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'paymentdetails' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.PaymentDetailsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataPaymentDetails.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/PaymentdetailsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'PaymentdetailsEdit/' + itemId,
						controller: 'PaymentDetailsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'paymentdetails' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataPaymentDetails)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.PaymentDetailsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataPaymentDetails[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataPaymentDetails[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/PaymentdetailsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataPaymentDetails); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.PaymentDetailsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataPaymentDetails.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataPaymentDetails(true);
	    };
	    
	    $scope.loadAllDataPaymentDetails = function() {
	    	$servicesStorage.PaymentDetailsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentDetails = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentDetails = $scope.dataPaymentDetails;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataPaymentDetails = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentDetailsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentDetails = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentDetails = APP.uniqueArray($scope.dataPaymentDetails.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentDetails = $scope.dataPaymentDetails;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredPaymentDetails = $scope.dataPaymentDetails.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.PaymentDetailsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentDetails(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentDetails", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentDetailsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataPaymentDetails = new Array()
		, $scope.ctrl = {
				  name: 'PaymentDetailsSelectorCtrl'
				, original: 'PaymentDetails'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('PaymentDetailsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataPaymentDetails: new Object()
		  	})
		  	, $scope.dataPaymentDetails = $scope.$storage.dataPaymentDetails;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataPaymentDetails = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentDetailsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentDetails = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentDetails = APP.uniqueArray($scope.dataPaymentDetails.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentDetails = $scope.dataPaymentDetails;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentDetails(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentDetails", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentDetailsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'PaymentDetailsEditCtrl'
			, original: 'PaymentDetails'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('PaymentDetailsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemPaymentDetails: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'PaymentDetails', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.PaymentDetailsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentdetailsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.PaymentDetailsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentdetailsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.PaymentDetailsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemPaymentDetails = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'PaymentDetails');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("PaymentDetails", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'PaymentDetails');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'paymentdetails' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'paymentdetails' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('PaymentPriceListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataPaymentPrice = new Array()
			, $scope.ctrl = {
					  name: 'PaymentPriceListCtrl'
					, original: 'PaymentPrice'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'paymentprice' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('PaymentPriceListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataPaymentPrice: new Array()
			  	})
			  	, $scope.dataPaymentPrice = $scope.$storage.dataPaymentPrice;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'PaymentpriceEdit',
					controller: 'PaymentPriceEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'paymentprice' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.PaymentPriceDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataPaymentPrice.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/PaymentpriceCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'PaymentpriceEdit/' + itemId,
						controller: 'PaymentPriceEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'paymentprice' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataPaymentPrice)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.PaymentPriceDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataPaymentPrice[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataPaymentPrice[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/PaymentpriceEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataPaymentPrice); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.PaymentPriceDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataPaymentPrice.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataPaymentPrice(true);
	    };
	    
	    $scope.loadAllDataPaymentPrice = function() {
	    	$servicesStorage.PaymentPriceDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentPrice = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentPrice = $scope.dataPaymentPrice;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataPaymentPrice = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentPriceDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentPrice = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentPrice = APP.uniqueArray($scope.dataPaymentPrice.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentPrice = $scope.dataPaymentPrice;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredPaymentPrice = $scope.dataPaymentPrice.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.PaymentPriceDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentPrice(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentPrice", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentPriceSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataPaymentPrice = new Array()
		, $scope.ctrl = {
				  name: 'PaymentPriceSelectorCtrl'
				, original: 'PaymentPrice'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('PaymentPriceSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataPaymentPrice: new Object()
		  	})
		  	, $scope.dataPaymentPrice = $scope.$storage.dataPaymentPrice;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataPaymentPrice = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentPriceDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentPrice = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentPrice = APP.uniqueArray($scope.dataPaymentPrice.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentPrice = $scope.dataPaymentPrice;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentPrice(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentPrice", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentPriceEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'PaymentPriceEditCtrl'
			, original: 'PaymentPrice'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('PaymentPriceEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemPaymentPrice: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'PaymentPrice', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.PaymentPriceDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentpriceList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.PaymentPriceDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymentpriceList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.PaymentPriceDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemPaymentPrice = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'PaymentPrice');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataPaymentTariff = $scope.$storage.dataPaymentTariff;
			}
			$servicesStorage.PaymentTariffDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataPaymentTariff = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataPaymentTariff = $scope.dataPaymentTariff;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("PaymentPrice", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'PaymentPrice');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('PaymentTariffListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataPaymentTariff = new Array()
			, $scope.ctrl = {
					  name: 'PaymentTariffListCtrl'
					, original: 'PaymentTariff'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'paymenttariff' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('PaymentTariffListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataPaymentTariff: new Array()
			  	})
			  	, $scope.dataPaymentTariff = $scope.$storage.dataPaymentTariff;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'PaymenttariffEdit',
					controller: 'PaymentTariffEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'paymenttariff' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.PaymentTariffDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataPaymentTariff.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/PaymenttariffCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'PaymenttariffEdit/' + itemId,
						controller: 'PaymentTariffEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'paymenttariff' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataPaymentTariff)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.PaymentTariffDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataPaymentTariff[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataPaymentTariff[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/PaymenttariffEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataPaymentTariff); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.PaymentTariffDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataPaymentTariff.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataPaymentTariff(true);
	    };
	    
	    $scope.loadAllDataPaymentTariff = function() {
	    	$servicesStorage.PaymentTariffDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentTariff = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentTariff = $scope.dataPaymentTariff;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataPaymentTariff = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentTariffDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentTariff = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentTariff = APP.uniqueArray($scope.dataPaymentTariff.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentTariff = $scope.dataPaymentTariff;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredPaymentTariff = $scope.dataPaymentTariff.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.PaymentTariffDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentTariff(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentTariff", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentTariffSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataPaymentTariff = new Array()
		, $scope.ctrl = {
				  name: 'PaymentTariffSelectorCtrl'
				, original: 'PaymentTariff'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('PaymentTariffSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataPaymentTariff: new Object()
		  	})
		  	, $scope.dataPaymentTariff = $scope.$storage.dataPaymentTariff;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataPaymentTariff = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.PaymentTariffDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataPaymentTariff = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataPaymentTariff = APP.uniqueArray($scope.dataPaymentTariff.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataPaymentTariff = $scope.dataPaymentTariff;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataPaymentTariff(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("PaymentTariff", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('PaymentTariffEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'PaymentTariffEditCtrl'
			, original: 'PaymentTariff'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('PaymentTariffEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemPaymentTariff: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'PaymentTariff', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.PaymentTariffDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymenttariffList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.PaymentTariffDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/PaymenttariffList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.PaymentTariffDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemPaymentTariff = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'PaymentTariff');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotelRoom = $scope.$storage.dataServHotelRoom;
			}
			$servicesStorage.ServHotelRoomDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotelRoom = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("PaymentTariff", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'PaymentTariff');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemPaymentPrice = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentpriceEdit',
				controller: 'PaymentPriceEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentPrices
							, editItemId: itemId
							, excludeList: [ 'paymenttariff' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemPaymentPrice = function () {
			if(typeof $scope.item.paymentPrices == "undefined"){
				$scope.item.paymentPrices = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentpriceEdit',
				controller: 'PaymentPriceEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'paymenttariff' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentPrice#item: ', item);
				}
				$scope.item.paymentPrices.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemPaymentPrice = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentpriceFragmentSelector',
				controller: 'PaymentPriceSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentPrices = APP.checkDublicate2(
							$scope.item.paymentPrices
						  , data.data
						  , 'PaymentPriceView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('RelAccountContactsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelAccountContacts = new Array()
			, $scope.ctrl = {
					  name: 'RelAccountContactsListCtrl'
					, original: 'RelAccountContacts'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relaccountcontacts' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelAccountContactsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelAccountContacts: new Array()
			  	})
			  	, $scope.dataRelAccountContacts = $scope.$storage.dataRelAccountContacts;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelaccountcontactsEdit',
					controller: 'RelAccountContactsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relaccountcontacts' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelAccountContactsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelAccountContacts.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelaccountcontactsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelaccountcontactsEdit/' + itemId,
						controller: 'RelAccountContactsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relaccountcontacts' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelAccountContacts)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelAccountContactsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelAccountContacts[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelAccountContacts[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelaccountcontactsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelAccountContacts); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelAccountContactsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelAccountContacts.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelAccountContacts(true);
	    };
	    
	    $scope.loadAllDataRelAccountContacts = function() {
	    	$servicesStorage.RelAccountContactsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelAccountContacts = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelAccountContacts = $scope.dataRelAccountContacts;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelAccountContacts = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelAccountContactsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelAccountContacts = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelAccountContacts = APP.uniqueArray($scope.dataRelAccountContacts.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelAccountContacts = $scope.dataRelAccountContacts;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelAccountContacts = $scope.dataRelAccountContacts.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelAccountContactsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelAccountContacts(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelAccountContacts", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelAccountContactsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelAccountContacts = new Array()
		, $scope.ctrl = {
				  name: 'RelAccountContactsSelectorCtrl'
				, original: 'RelAccountContacts'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelAccountContactsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelAccountContacts: new Object()
		  	})
		  	, $scope.dataRelAccountContacts = $scope.$storage.dataRelAccountContacts;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelAccountContacts = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelAccountContactsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelAccountContacts = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelAccountContacts = APP.uniqueArray($scope.dataRelAccountContacts.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelAccountContacts = $scope.dataRelAccountContacts;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelAccountContacts(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelAccountContacts", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelAccountContactsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelAccountContactsEditCtrl'
			, original: 'RelAccountContacts'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelAccountContactsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelAccountContacts: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelAccountContacts', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelAccountContactsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelaccountcontactsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelAccountContactsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelaccountcontactsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelAccountContactsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelAccountContacts = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelAccountContacts');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelAccountContacts", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelAccountContacts');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelCruiseContactsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelCruiseContacts = new Array()
			, $scope.ctrl = {
					  name: 'RelCruiseContactsListCtrl'
					, original: 'RelCruiseContacts'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relcruisecontacts' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelCruiseContactsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelCruiseContacts: new Array()
			  	})
			  	, $scope.dataRelCruiseContacts = $scope.$storage.dataRelCruiseContacts;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelcruisecontactsEdit',
					controller: 'RelCruiseContactsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relcruisecontacts' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelCruiseContactsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelCruiseContacts.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelcruisecontactsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelcruisecontactsEdit/' + itemId,
						controller: 'RelCruiseContactsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relcruisecontacts' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelCruiseContacts)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelCruiseContactsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelCruiseContacts[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelCruiseContacts[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelcruisecontactsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelCruiseContacts); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelCruiseContactsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelCruiseContacts.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelCruiseContacts(true);
	    };
	    
	    $scope.loadAllDataRelCruiseContacts = function() {
	    	$servicesStorage.RelCruiseContactsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelCruiseContacts = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelCruiseContacts = $scope.dataRelCruiseContacts;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelCruiseContacts = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelCruiseContactsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelCruiseContacts = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelCruiseContacts = APP.uniqueArray($scope.dataRelCruiseContacts.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelCruiseContacts = $scope.dataRelCruiseContacts;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelCruiseContacts = $scope.dataRelCruiseContacts.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelCruiseContactsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelCruiseContacts(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelCruiseContacts", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelCruiseContactsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelCruiseContacts = new Array()
		, $scope.ctrl = {
				  name: 'RelCruiseContactsSelectorCtrl'
				, original: 'RelCruiseContacts'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelCruiseContactsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelCruiseContacts: new Object()
		  	})
		  	, $scope.dataRelCruiseContacts = $scope.$storage.dataRelCruiseContacts;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelCruiseContacts = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelCruiseContactsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelCruiseContacts = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelCruiseContacts = APP.uniqueArray($scope.dataRelCruiseContacts.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelCruiseContacts = $scope.dataRelCruiseContacts;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelCruiseContacts(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelCruiseContacts", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelCruiseContactsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelCruiseContactsEditCtrl'
			, original: 'RelCruiseContacts'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelCruiseContactsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelCruiseContacts: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelCruiseContacts', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelCruiseContactsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelcruisecontactsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelCruiseContactsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelcruisecontactsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelCruiseContactsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelCruiseContacts = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelCruiseContacts');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServCruise = $scope.$storage.dataServCruise;
			}
			$servicesStorage.ServCruiseDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServCruise = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServCruise = $scope.dataServCruise;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelCruiseContacts", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelCruiseContacts');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelCruiseDocsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelCruiseDocs = new Array()
			, $scope.ctrl = {
					  name: 'RelCruiseDocsListCtrl'
					, original: 'RelCruiseDocs'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relcruisedocs' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelCruiseDocsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelCruiseDocs: new Array()
			  	})
			  	, $scope.dataRelCruiseDocs = $scope.$storage.dataRelCruiseDocs;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelcruisedocsEdit',
					controller: 'RelCruiseDocsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relcruisedocs' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelCruiseDocsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelCruiseDocs.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelcruisedocsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelcruisedocsEdit/' + itemId,
						controller: 'RelCruiseDocsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relcruisedocs' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelCruiseDocs)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelCruiseDocsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelCruiseDocs[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelCruiseDocs[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelcruisedocsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelCruiseDocs); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelCruiseDocsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelCruiseDocs.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelCruiseDocs(true);
	    };
	    
	    $scope.loadAllDataRelCruiseDocs = function() {
	    	$servicesStorage.RelCruiseDocsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelCruiseDocs = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelCruiseDocs = $scope.dataRelCruiseDocs;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelCruiseDocs = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelCruiseDocsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelCruiseDocs = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelCruiseDocs = APP.uniqueArray($scope.dataRelCruiseDocs.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelCruiseDocs = $scope.dataRelCruiseDocs;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelCruiseDocs = $scope.dataRelCruiseDocs.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelCruiseDocsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelCruiseDocs(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelCruiseDocs", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelCruiseDocsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelCruiseDocs = new Array()
		, $scope.ctrl = {
				  name: 'RelCruiseDocsSelectorCtrl'
				, original: 'RelCruiseDocs'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelCruiseDocsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelCruiseDocs: new Object()
		  	})
		  	, $scope.dataRelCruiseDocs = $scope.$storage.dataRelCruiseDocs;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelCruiseDocs = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelCruiseDocsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelCruiseDocs = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelCruiseDocs = APP.uniqueArray($scope.dataRelCruiseDocs.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelCruiseDocs = $scope.dataRelCruiseDocs;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelCruiseDocs(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelCruiseDocs", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelCruiseDocsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelCruiseDocsEditCtrl'
			, original: 'RelCruiseDocs'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelCruiseDocsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelCruiseDocs: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelCruiseDocs', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelCruiseDocsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelcruisedocsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelCruiseDocsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelcruisedocsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelCruiseDocsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelCruiseDocs = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelCruiseDocs');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDocDocuments = $scope.$storage.dataDocDocuments;
			}
			$servicesStorage.DocDocumentsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDocDocuments = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServCruise = $scope.$storage.dataServCruise;
			}
			$servicesStorage.ServCruiseDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServCruise = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServCruise = $scope.dataServCruise;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelCruiseDocs", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelCruiseDocs');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelReqServHotelDocDocumentsForHotelListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelReqServHotelDocDocumentsForHotel = new Array()
			, $scope.ctrl = {
					  name: 'RelReqServHotelDocDocumentsForHotelListCtrl'
					, original: 'RelReqServHotelDocDocumentsForHotel'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relreqservhoteldocdocumentsforhotel' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelReqServHotelDocDocumentsForHotelListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelReqServHotelDocDocumentsForHotel: new Array()
			  	})
			  	, $scope.dataRelReqServHotelDocDocumentsForHotel = $scope.$storage.dataRelReqServHotelDocDocumentsForHotel;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelreqservhoteldocdocumentsforhotelEdit',
					controller: 'RelReqServHotelDocDocumentsForHotelEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relreqservhoteldocdocumentsforhotel' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelReqServHotelDocDocumentsForHotel.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelreqservhoteldocdocumentsforhotelCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelreqservhoteldocdocumentsforhotelEdit/' + itemId,
						controller: 'RelReqServHotelDocDocumentsForHotelEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relreqservhoteldocdocumentsforhotel' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelReqServHotelDocDocumentsForHotel)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelReqServHotelDocDocumentsForHotel[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelReqServHotelDocDocumentsForHotel[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelreqservhoteldocdocumentsforhotelEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelReqServHotelDocDocumentsForHotel); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelReqServHotelDocDocumentsForHotelDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelReqServHotelDocDocumentsForHotel.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelReqServHotelDocDocumentsForHotel(true);
	    };
	    
	    $scope.loadAllDataRelReqServHotelDocDocumentsForHotel = function() {
	    	$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelDocDocumentsForHotel = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelDocDocumentsForHotel = $scope.dataRelReqServHotelDocDocumentsForHotel;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelReqServHotelDocDocumentsForHotel = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelReqServHotelDocDocumentsForHotel = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelDocDocumentsForHotel = APP.uniqueArray($scope.dataRelReqServHotelDocDocumentsForHotel.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelDocDocumentsForHotel = $scope.dataRelReqServHotelDocDocumentsForHotel;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelReqServHotelDocDocumentsForHotel = $scope.dataRelReqServHotelDocDocumentsForHotel.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelReqServHotelDocDocumentsForHotel(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelReqServHotelDocDocumentsForHotel", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelReqServHotelDocDocumentsForHotelSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelReqServHotelDocDocumentsForHotel = new Array()
		, $scope.ctrl = {
				  name: 'RelReqServHotelDocDocumentsForHotelSelectorCtrl'
				, original: 'RelReqServHotelDocDocumentsForHotel'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelReqServHotelDocDocumentsForHotelSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelReqServHotelDocDocumentsForHotel: new Object()
		  	})
		  	, $scope.dataRelReqServHotelDocDocumentsForHotel = $scope.$storage.dataRelReqServHotelDocDocumentsForHotel;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelReqServHotelDocDocumentsForHotel = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelReqServHotelDocDocumentsForHotel = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelDocDocumentsForHotel = APP.uniqueArray($scope.dataRelReqServHotelDocDocumentsForHotel.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelDocDocumentsForHotel = $scope.dataRelReqServHotelDocDocumentsForHotel;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelReqServHotelDocDocumentsForHotel(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelReqServHotelDocDocumentsForHotel", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelReqServHotelDocDocumentsForHotelEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelReqServHotelDocDocumentsForHotelEditCtrl'
			, original: 'RelReqServHotelDocDocumentsForHotel'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelReqServHotelDocDocumentsForHotelEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelReqServHotelDocDocumentsForHotel: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelReqServHotelDocDocumentsForHotel', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelreqservhoteldocdocumentsforhotelList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelreqservhoteldocdocumentsforhotelList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelReqServHotelDocDocumentsForHotelDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelReqServHotelDocDocumentsForHotel = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelReqServHotelDocDocumentsForHotel');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDocDocuments = $scope.$storage.dataDocDocuments;
			}
			$servicesStorage.DocDocumentsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDocDocuments = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataReqServHotel = $scope.$storage.dataReqServHotel;
			}
			$servicesStorage.ReqServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataReqServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataReqServHotel = $scope.dataReqServHotel;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelReqServHotelDocDocumentsForHotel", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelReqServHotelDocDocumentsForHotel');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelReqServHotelDocDocumentsForUserListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelReqServHotelDocDocumentsForUser = new Array()
			, $scope.ctrl = {
					  name: 'RelReqServHotelDocDocumentsForUserListCtrl'
					, original: 'RelReqServHotelDocDocumentsForUser'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relreqservhoteldocdocumentsforuser' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelReqServHotelDocDocumentsForUserListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelReqServHotelDocDocumentsForUser: new Array()
			  	})
			  	, $scope.dataRelReqServHotelDocDocumentsForUser = $scope.$storage.dataRelReqServHotelDocDocumentsForUser;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelreqservhoteldocdocumentsforuserEdit',
					controller: 'RelReqServHotelDocDocumentsForUserEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relreqservhoteldocdocumentsforuser' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelReqServHotelDocDocumentsForUserDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelReqServHotelDocDocumentsForUser.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelreqservhoteldocdocumentsforuserCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelreqservhoteldocdocumentsforuserEdit/' + itemId,
						controller: 'RelReqServHotelDocDocumentsForUserEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relreqservhoteldocdocumentsforuser' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelReqServHotelDocDocumentsForUser)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelReqServHotelDocDocumentsForUserDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelReqServHotelDocDocumentsForUser[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelReqServHotelDocDocumentsForUser[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelreqservhoteldocdocumentsforuserEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelReqServHotelDocDocumentsForUser); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelReqServHotelDocDocumentsForUserDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelReqServHotelDocDocumentsForUser.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelReqServHotelDocDocumentsForUser(true);
	    };
	    
	    $scope.loadAllDataRelReqServHotelDocDocumentsForUser = function() {
	    	$servicesStorage.RelReqServHotelDocDocumentsForUserDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelDocDocumentsForUser = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelDocDocumentsForUser = $scope.dataRelReqServHotelDocDocumentsForUser;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelReqServHotelDocDocumentsForUser = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelReqServHotelDocDocumentsForUserDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelReqServHotelDocDocumentsForUser = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelDocDocumentsForUser = APP.uniqueArray($scope.dataRelReqServHotelDocDocumentsForUser.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelDocDocumentsForUser = $scope.dataRelReqServHotelDocDocumentsForUser;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelReqServHotelDocDocumentsForUser = $scope.dataRelReqServHotelDocDocumentsForUser.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelReqServHotelDocDocumentsForUserDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelReqServHotelDocDocumentsForUser(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelReqServHotelDocDocumentsForUser", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelReqServHotelDocDocumentsForUserSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelReqServHotelDocDocumentsForUser = new Array()
		, $scope.ctrl = {
				  name: 'RelReqServHotelDocDocumentsForUserSelectorCtrl'
				, original: 'RelReqServHotelDocDocumentsForUser'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelReqServHotelDocDocumentsForUserSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelReqServHotelDocDocumentsForUser: new Object()
		  	})
		  	, $scope.dataRelReqServHotelDocDocumentsForUser = $scope.$storage.dataRelReqServHotelDocDocumentsForUser;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelReqServHotelDocDocumentsForUser = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelReqServHotelDocDocumentsForUserDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelReqServHotelDocDocumentsForUser = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelDocDocumentsForUser = APP.uniqueArray($scope.dataRelReqServHotelDocDocumentsForUser.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelDocDocumentsForUser = $scope.dataRelReqServHotelDocDocumentsForUser;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelReqServHotelDocDocumentsForUser(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelReqServHotelDocDocumentsForUser", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelReqServHotelDocDocumentsForUserEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelReqServHotelDocDocumentsForUserEditCtrl'
			, original: 'RelReqServHotelDocDocumentsForUser'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelReqServHotelDocDocumentsForUserEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelReqServHotelDocDocumentsForUser: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelReqServHotelDocDocumentsForUser', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelReqServHotelDocDocumentsForUserDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelreqservhoteldocdocumentsforuserList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelReqServHotelDocDocumentsForUserDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelreqservhoteldocdocumentsforuserList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelReqServHotelDocDocumentsForUserDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelReqServHotelDocDocumentsForUser = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelReqServHotelDocDocumentsForUser');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDocDocuments = $scope.$storage.dataDocDocuments;
			}
			$servicesStorage.DocDocumentsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDocDocuments = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataReqServHotel = $scope.$storage.dataReqServHotel;
			}
			$servicesStorage.ReqServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataReqServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataReqServHotel = $scope.dataReqServHotel;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelReqServHotelDocDocumentsForUser", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelReqServHotelDocDocumentsForUser');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelReqServHotelTmContactEasyListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelReqServHotelTmContactEasy = new Array()
			, $scope.ctrl = {
					  name: 'RelReqServHotelTmContactEasyListCtrl'
					, original: 'RelReqServHotelTmContactEasy'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relreqservhoteltmcontacteasy' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelReqServHotelTmContactEasyListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelReqServHotelTmContactEasy: new Array()
			  	})
			  	, $scope.dataRelReqServHotelTmContactEasy = $scope.$storage.dataRelReqServHotelTmContactEasy;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelreqservhoteltmcontacteasyEdit',
					controller: 'RelReqServHotelTmContactEasyEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relreqservhoteltmcontacteasy' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelReqServHotelTmContactEasyDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelReqServHotelTmContactEasy.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelreqservhoteltmcontacteasyCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelreqservhoteltmcontacteasyEdit/' + itemId,
						controller: 'RelReqServHotelTmContactEasyEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relreqservhoteltmcontacteasy' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelReqServHotelTmContactEasy)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelReqServHotelTmContactEasyDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelReqServHotelTmContactEasy[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelReqServHotelTmContactEasy[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelreqservhoteltmcontacteasyEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelReqServHotelTmContactEasy); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelReqServHotelTmContactEasyDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelReqServHotelTmContactEasy.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelReqServHotelTmContactEasy(true);
	    };
	    
	    $scope.loadAllDataRelReqServHotelTmContactEasy = function() {
	    	$servicesStorage.RelReqServHotelTmContactEasyDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelTmContactEasy = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelTmContactEasy = $scope.dataRelReqServHotelTmContactEasy;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelReqServHotelTmContactEasy = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelReqServHotelTmContactEasyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelReqServHotelTmContactEasy = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelTmContactEasy = APP.uniqueArray($scope.dataRelReqServHotelTmContactEasy.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelTmContactEasy = $scope.dataRelReqServHotelTmContactEasy;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelReqServHotelTmContactEasy = $scope.dataRelReqServHotelTmContactEasy.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelReqServHotelTmContactEasyDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelReqServHotelTmContactEasy(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelReqServHotelTmContactEasy", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelReqServHotelTmContactEasySelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelReqServHotelTmContactEasy = new Array()
		, $scope.ctrl = {
				  name: 'RelReqServHotelTmContactEasySelectorCtrl'
				, original: 'RelReqServHotelTmContactEasy'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelReqServHotelTmContactEasySelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelReqServHotelTmContactEasy: new Object()
		  	})
		  	, $scope.dataRelReqServHotelTmContactEasy = $scope.$storage.dataRelReqServHotelTmContactEasy;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelReqServHotelTmContactEasy = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelReqServHotelTmContactEasyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelReqServHotelTmContactEasy = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelReqServHotelTmContactEasy = APP.uniqueArray($scope.dataRelReqServHotelTmContactEasy.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelReqServHotelTmContactEasy = $scope.dataRelReqServHotelTmContactEasy;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelReqServHotelTmContactEasy(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelReqServHotelTmContactEasy", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelReqServHotelTmContactEasyEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelReqServHotelTmContactEasyEditCtrl'
			, original: 'RelReqServHotelTmContactEasy'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelReqServHotelTmContactEasyEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelReqServHotelTmContactEasy: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelReqServHotelTmContactEasy', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelReqServHotelTmContactEasyDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelreqservhoteltmcontacteasyList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelReqServHotelTmContactEasyDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelreqservhoteltmcontacteasyList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelReqServHotelTmContactEasyDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelReqServHotelTmContactEasy = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelReqServHotelTmContactEasy');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataReqServHotel = $scope.$storage.dataReqServHotel;
			}
			$servicesStorage.ReqServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataReqServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataReqServHotel = $scope.dataReqServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContactEasy = $scope.$storage.dataTmContactEasy;
			}
			$servicesStorage.TmContactEasyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContactEasy = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContactEasy = $scope.dataTmContactEasy;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelReqServHotelTmContactEasy", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelReqServHotelTmContactEasy');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelCreditCardsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelCreditCards = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelCreditCardsListCtrl'
					, original: 'RelServHotelCreditCards'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelcreditcards' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelCreditCardsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelCreditCards: new Array()
			  	})
			  	, $scope.dataRelServHotelCreditCards = $scope.$storage.dataRelServHotelCreditCards;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelcreditcardsEdit',
					controller: 'RelServHotelCreditCardsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelcreditcards' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelCreditCardsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelCreditCards.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelcreditcardsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelcreditcardsEdit/' + itemId,
						controller: 'RelServHotelCreditCardsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelcreditcards' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelCreditCards)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelCreditCardsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelCreditCards[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelCreditCards[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelcreditcardsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelCreditCards); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelCreditCardsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelCreditCards.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelCreditCards(true);
	    };
	    
	    $scope.loadAllDataRelServHotelCreditCards = function() {
	    	$servicesStorage.RelServHotelCreditCardsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelCreditCards = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelCreditCards = $scope.dataRelServHotelCreditCards;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelCreditCards = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelCreditCardsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelCreditCards = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelCreditCards = APP.uniqueArray($scope.dataRelServHotelCreditCards.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelCreditCards = $scope.dataRelServHotelCreditCards;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelCreditCards = $scope.dataRelServHotelCreditCards.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelCreditCardsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelCreditCards(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelCreditCards", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelCreditCardsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelCreditCards = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelCreditCardsSelectorCtrl'
				, original: 'RelServHotelCreditCards'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelCreditCardsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelCreditCards: new Object()
		  	})
		  	, $scope.dataRelServHotelCreditCards = $scope.$storage.dataRelServHotelCreditCards;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelCreditCards = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelCreditCardsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelCreditCards = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelCreditCards = APP.uniqueArray($scope.dataRelServHotelCreditCards.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelCreditCards = $scope.dataRelServHotelCreditCards;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelCreditCards(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelCreditCards", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelCreditCardsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelCreditCardsEditCtrl'
			, original: 'RelServHotelCreditCards'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelCreditCardsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelCreditCards: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelCreditCards', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelCreditCardsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelcreditcardsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelCreditCardsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelcreditcardsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelCreditCardsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelCreditCards = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelCreditCards');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelCreditCards", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelCreditCards');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelDocDocumentsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelDocDocuments = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelDocDocumentsListCtrl'
					, original: 'RelServHotelDocDocuments'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhoteldocdocuments' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelDocDocumentsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelDocDocuments: new Array()
			  	})
			  	, $scope.dataRelServHotelDocDocuments = $scope.$storage.dataRelServHotelDocDocuments;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhoteldocdocumentsEdit',
					controller: 'RelServHotelDocDocumentsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhoteldocdocuments' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelDocDocumentsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelDocDocuments.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhoteldocdocumentsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhoteldocdocumentsEdit/' + itemId,
						controller: 'RelServHotelDocDocumentsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhoteldocdocuments' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelDocDocuments)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelDocDocumentsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelDocDocuments[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelDocDocuments[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhoteldocdocumentsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelDocDocuments); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelDocDocumentsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelDocDocuments.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelDocDocuments(true);
	    };
	    
	    $scope.loadAllDataRelServHotelDocDocuments = function() {
	    	$servicesStorage.RelServHotelDocDocumentsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelDocDocuments = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelDocDocuments = $scope.dataRelServHotelDocDocuments;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelDocDocuments = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelDocDocumentsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelDocDocuments = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelDocDocuments = APP.uniqueArray($scope.dataRelServHotelDocDocuments.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelDocDocuments = $scope.dataRelServHotelDocDocuments;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelDocDocuments = $scope.dataRelServHotelDocDocuments.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelDocDocumentsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelDocDocuments(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelDocDocuments", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelDocDocumentsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelDocDocuments = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelDocDocumentsSelectorCtrl'
				, original: 'RelServHotelDocDocuments'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelDocDocumentsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelDocDocuments: new Object()
		  	})
		  	, $scope.dataRelServHotelDocDocuments = $scope.$storage.dataRelServHotelDocDocuments;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelDocDocuments = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelDocDocumentsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelDocDocuments = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelDocDocuments = APP.uniqueArray($scope.dataRelServHotelDocDocuments.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelDocDocuments = $scope.dataRelServHotelDocDocuments;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelDocDocuments(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelDocDocuments", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelDocDocumentsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelDocDocumentsEditCtrl'
			, original: 'RelServHotelDocDocuments'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelDocDocumentsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelDocDocuments: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelDocDocuments', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelDocDocumentsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhoteldocdocumentsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelDocDocumentsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhoteldocdocumentsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelDocDocumentsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelDocDocuments = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelDocDocuments');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDocDocuments = $scope.$storage.dataDocDocuments;
			}
			$servicesStorage.DocDocumentsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDocDocuments = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelDocDocuments", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelDocDocuments');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelEntertainmentAndSportListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelEntertainmentAndSport = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelEntertainmentAndSportListCtrl'
					, original: 'RelServHotelEntertainmentAndSport'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelentertainmentandsport' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelEntertainmentAndSportListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelEntertainmentAndSport: new Array()
			  	})
			  	, $scope.dataRelServHotelEntertainmentAndSport = $scope.$storage.dataRelServHotelEntertainmentAndSport;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelentertainmentandsportEdit',
					controller: 'RelServHotelEntertainmentAndSportEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelentertainmentandsport' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelEntertainmentAndSportDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelEntertainmentAndSport.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelentertainmentandsportCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelentertainmentandsportEdit/' + itemId,
						controller: 'RelServHotelEntertainmentAndSportEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelentertainmentandsport' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelEntertainmentAndSport)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelEntertainmentAndSportDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelEntertainmentAndSport[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelEntertainmentAndSport[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelentertainmentandsportEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelEntertainmentAndSport); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelEntertainmentAndSportDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelEntertainmentAndSport.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelEntertainmentAndSport(true);
	    };
	    
	    $scope.loadAllDataRelServHotelEntertainmentAndSport = function() {
	    	$servicesStorage.RelServHotelEntertainmentAndSportDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelEntertainmentAndSport = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelEntertainmentAndSport = $scope.dataRelServHotelEntertainmentAndSport;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelEntertainmentAndSport = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelEntertainmentAndSportDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelEntertainmentAndSport = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelEntertainmentAndSport = APP.uniqueArray($scope.dataRelServHotelEntertainmentAndSport.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelEntertainmentAndSport = $scope.dataRelServHotelEntertainmentAndSport;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelEntertainmentAndSport = $scope.dataRelServHotelEntertainmentAndSport.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelEntertainmentAndSportDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelEntertainmentAndSport(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelEntertainmentAndSport", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelEntertainmentAndSportSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelEntertainmentAndSport = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelEntertainmentAndSportSelectorCtrl'
				, original: 'RelServHotelEntertainmentAndSport'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelEntertainmentAndSportSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelEntertainmentAndSport: new Object()
		  	})
		  	, $scope.dataRelServHotelEntertainmentAndSport = $scope.$storage.dataRelServHotelEntertainmentAndSport;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelEntertainmentAndSport = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelEntertainmentAndSportDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelEntertainmentAndSport = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelEntertainmentAndSport = APP.uniqueArray($scope.dataRelServHotelEntertainmentAndSport.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelEntertainmentAndSport = $scope.dataRelServHotelEntertainmentAndSport;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelEntertainmentAndSport(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelEntertainmentAndSport", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelEntertainmentAndSportEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelEntertainmentAndSportEditCtrl'
			, original: 'RelServHotelEntertainmentAndSport'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelEntertainmentAndSportEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelEntertainmentAndSport: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelEntertainmentAndSport', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelEntertainmentAndSportDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelentertainmentandsportList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelEntertainmentAndSportDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelentertainmentandsportList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelEntertainmentAndSportDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelEntertainmentAndSport = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelEntertainmentAndSport');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelEntertainmentAndSport", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelEntertainmentAndSport');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelFeaturesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelFeatures = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelFeaturesListCtrl'
					, original: 'RelServHotelFeatures'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelfeatures' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelFeaturesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelFeatures: new Array()
			  	})
			  	, $scope.dataRelServHotelFeatures = $scope.$storage.dataRelServHotelFeatures;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelfeaturesEdit',
					controller: 'RelServHotelFeaturesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelfeatures' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelFeaturesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelFeatures.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelfeaturesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelfeaturesEdit/' + itemId,
						controller: 'RelServHotelFeaturesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelfeatures' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelFeatures)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelFeaturesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelFeatures[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelFeatures[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelfeaturesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelFeatures); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelFeaturesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelFeatures.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelFeatures(true);
	    };
	    
	    $scope.loadAllDataRelServHotelFeatures = function() {
	    	$servicesStorage.RelServHotelFeaturesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelFeatures = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelFeatures = $scope.dataRelServHotelFeatures;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelFeatures = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelFeaturesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelFeatures = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelFeatures = APP.uniqueArray($scope.dataRelServHotelFeatures.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelFeatures = $scope.dataRelServHotelFeatures;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelFeatures = $scope.dataRelServHotelFeatures.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelFeaturesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelFeatures(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelFeatures", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelFeaturesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelFeatures = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelFeaturesSelectorCtrl'
				, original: 'RelServHotelFeatures'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelFeaturesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelFeatures: new Object()
		  	})
		  	, $scope.dataRelServHotelFeatures = $scope.$storage.dataRelServHotelFeatures;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelFeatures = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelFeaturesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelFeatures = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelFeatures = APP.uniqueArray($scope.dataRelServHotelFeatures.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelFeatures = $scope.dataRelServHotelFeatures;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelFeatures(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelFeatures", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelFeaturesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelFeaturesEditCtrl'
			, original: 'RelServHotelFeatures'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelFeaturesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelFeatures: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelFeatures', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelFeaturesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelfeaturesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelFeaturesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelfeaturesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelFeaturesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelFeatures = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelFeatures');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelFeatures", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelFeatures');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelImageListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelImage = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelImageListCtrl'
					, original: 'RelServHotelImage'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelimage' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelImageListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelImage: new Array()
			  	})
			  	, $scope.dataRelServHotelImage = $scope.$storage.dataRelServHotelImage;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelimageEdit',
					controller: 'RelServHotelImageEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelimage' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelImageDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelImage.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelimageCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelimageEdit/' + itemId,
						controller: 'RelServHotelImageEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelimage' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelImage)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelImageDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelImage[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelImage[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelimageEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelImage); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelImageDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelImage.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelImage(true);
	    };
	    
	    $scope.loadAllDataRelServHotelImage = function() {
	    	$servicesStorage.RelServHotelImageDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelImage = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelImage = $scope.dataRelServHotelImage;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelImage = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelImageDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelImage = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelImage = APP.uniqueArray($scope.dataRelServHotelImage.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelImage = $scope.dataRelServHotelImage;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelImage = $scope.dataRelServHotelImage.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelImageDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelImage(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelImage", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelImageSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelImage = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelImageSelectorCtrl'
				, original: 'RelServHotelImage'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelImageSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelImage: new Object()
		  	})
		  	, $scope.dataRelServHotelImage = $scope.$storage.dataRelServHotelImage;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelImage = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelImageDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelImage = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelImage = APP.uniqueArray($scope.dataRelServHotelImage.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelImage = $scope.dataRelServHotelImage;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelImage(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelImage", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelImageEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelImageEditCtrl'
			, original: 'RelServHotelImage'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelImageEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelImage: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelImage', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelImageDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelimageList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelImageDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelimageList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelImageDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelImage = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelImage');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmImage = $scope.$storage.dataTmImage;
			}
			$servicesStorage.TmImageDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmImage = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmImage = $scope.dataTmImage;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelImage", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelImage');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelInfoCommercialListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelInfoCommercial = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelInfoCommercialListCtrl'
					, original: 'RelServHotelInfoCommercial'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelinfocommercial' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelInfoCommercialListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelInfoCommercial: new Array()
			  	})
			  	, $scope.dataRelServHotelInfoCommercial = $scope.$storage.dataRelServHotelInfoCommercial;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelinfocommercialEdit',
					controller: 'RelServHotelInfoCommercialEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelinfocommercial' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelInfoCommercialDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelInfoCommercial.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelinfocommercialCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelinfocommercialEdit/' + itemId,
						controller: 'RelServHotelInfoCommercialEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelinfocommercial' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelInfoCommercial)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelInfoCommercialDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelInfoCommercial[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelInfoCommercial[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelinfocommercialEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelInfoCommercial); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelInfoCommercialDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelInfoCommercial.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelInfoCommercial(true);
	    };
	    
	    $scope.loadAllDataRelServHotelInfoCommercial = function() {
	    	$servicesStorage.RelServHotelInfoCommercialDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoCommercial = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoCommercial = $scope.dataRelServHotelInfoCommercial;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelInfoCommercial = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelInfoCommercialDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelInfoCommercial = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoCommercial = APP.uniqueArray($scope.dataRelServHotelInfoCommercial.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoCommercial = $scope.dataRelServHotelInfoCommercial;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelInfoCommercial = $scope.dataRelServHotelInfoCommercial.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelInfoCommercialDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelInfoCommercial(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelInfoCommercial", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelInfoCommercialSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelInfoCommercial = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelInfoCommercialSelectorCtrl'
				, original: 'RelServHotelInfoCommercial'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelInfoCommercialSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelInfoCommercial: new Object()
		  	})
		  	, $scope.dataRelServHotelInfoCommercial = $scope.$storage.dataRelServHotelInfoCommercial;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelInfoCommercial = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelInfoCommercialDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelInfoCommercial = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoCommercial = APP.uniqueArray($scope.dataRelServHotelInfoCommercial.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoCommercial = $scope.dataRelServHotelInfoCommercial;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelInfoCommercial(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelInfoCommercial", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelInfoCommercialEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelInfoCommercialEditCtrl'
			, original: 'RelServHotelInfoCommercial'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelInfoCommercialEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelInfoCommercial: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelInfoCommercial', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelInfoCommercialDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelinfocommercialList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelInfoCommercialDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelinfocommercialList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelInfoCommercialDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelInfoCommercial = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelInfoCommercial');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmCommercial = $scope.$storage.dataTmCommercial;
			}
			$servicesStorage.TmCommercialDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmCommercial = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmCommercial = $scope.dataTmCommercial;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelInfoCommercial", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelInfoCommercial');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelInfoHotelServicesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelInfoHotelServices = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelInfoHotelServicesListCtrl'
					, original: 'RelServHotelInfoHotelServices'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelinfohotelservices' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelInfoHotelServicesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelInfoHotelServices: new Array()
			  	})
			  	, $scope.dataRelServHotelInfoHotelServices = $scope.$storage.dataRelServHotelInfoHotelServices;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelinfohotelservicesEdit',
					controller: 'RelServHotelInfoHotelServicesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelinfohotelservices' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelInfoHotelServicesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelInfoHotelServices.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelinfohotelservicesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelinfohotelservicesEdit/' + itemId,
						controller: 'RelServHotelInfoHotelServicesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelinfohotelservices' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelInfoHotelServices)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelInfoHotelServicesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelInfoHotelServices[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelInfoHotelServices[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelinfohotelservicesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelInfoHotelServices); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelInfoHotelServicesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelInfoHotelServices.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelInfoHotelServices(true);
	    };
	    
	    $scope.loadAllDataRelServHotelInfoHotelServices = function() {
	    	$servicesStorage.RelServHotelInfoHotelServicesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoHotelServices = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoHotelServices = $scope.dataRelServHotelInfoHotelServices;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelInfoHotelServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelInfoHotelServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelInfoHotelServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoHotelServices = APP.uniqueArray($scope.dataRelServHotelInfoHotelServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoHotelServices = $scope.dataRelServHotelInfoHotelServices;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelInfoHotelServices = $scope.dataRelServHotelInfoHotelServices.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelInfoHotelServicesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelInfoHotelServices(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelInfoHotelServices", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelInfoHotelServicesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelInfoHotelServices = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelInfoHotelServicesSelectorCtrl'
				, original: 'RelServHotelInfoHotelServices'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelInfoHotelServicesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelInfoHotelServices: new Object()
		  	})
		  	, $scope.dataRelServHotelInfoHotelServices = $scope.$storage.dataRelServHotelInfoHotelServices;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelInfoHotelServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelInfoHotelServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelInfoHotelServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoHotelServices = APP.uniqueArray($scope.dataRelServHotelInfoHotelServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoHotelServices = $scope.dataRelServHotelInfoHotelServices;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelInfoHotelServices(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelInfoHotelServices", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelInfoHotelServicesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelInfoHotelServicesEditCtrl'
			, original: 'RelServHotelInfoHotelServices'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelInfoHotelServicesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelInfoHotelServices: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelInfoHotelServices', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelInfoHotelServicesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelinfohotelservicesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelInfoHotelServicesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelinfohotelservicesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelInfoHotelServicesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelInfoHotelServices = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelInfoHotelServices');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotelServices = $scope.$storage.dataServHotelServices;
			}
			$servicesStorage.ServHotelServicesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotelServices = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotelServices = $scope.dataServHotelServices;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelInfoHotelServices", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelInfoHotelServices');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelInfoPoliciesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelInfoPolicies = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelInfoPoliciesListCtrl'
					, original: 'RelServHotelInfoPolicies'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelinfopolicies' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelInfoPoliciesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelInfoPolicies: new Array()
			  	})
			  	, $scope.dataRelServHotelInfoPolicies = $scope.$storage.dataRelServHotelInfoPolicies;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelinfopoliciesEdit',
					controller: 'RelServHotelInfoPoliciesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelinfopolicies' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelInfoPoliciesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelInfoPolicies.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelinfopoliciesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelinfopoliciesEdit/' + itemId,
						controller: 'RelServHotelInfoPoliciesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelinfopolicies' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelInfoPolicies)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelInfoPoliciesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelInfoPolicies[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelInfoPolicies[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelinfopoliciesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelInfoPolicies); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelInfoPoliciesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelInfoPolicies.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelInfoPolicies(true);
	    };
	    
	    $scope.loadAllDataRelServHotelInfoPolicies = function() {
	    	$servicesStorage.RelServHotelInfoPoliciesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoPolicies = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoPolicies = $scope.dataRelServHotelInfoPolicies;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelInfoPolicies = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelInfoPoliciesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelInfoPolicies = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoPolicies = APP.uniqueArray($scope.dataRelServHotelInfoPolicies.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoPolicies = $scope.dataRelServHotelInfoPolicies;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelInfoPolicies = $scope.dataRelServHotelInfoPolicies.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelInfoPoliciesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelInfoPolicies(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelInfoPolicies", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelInfoPoliciesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelInfoPolicies = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelInfoPoliciesSelectorCtrl'
				, original: 'RelServHotelInfoPolicies'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelInfoPoliciesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelInfoPolicies: new Object()
		  	})
		  	, $scope.dataRelServHotelInfoPolicies = $scope.$storage.dataRelServHotelInfoPolicies;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelInfoPolicies = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelInfoPoliciesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelInfoPolicies = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelInfoPolicies = APP.uniqueArray($scope.dataRelServHotelInfoPolicies.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelInfoPolicies = $scope.dataRelServHotelInfoPolicies;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelInfoPolicies(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelInfoPolicies", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelInfoPoliciesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelInfoPoliciesEditCtrl'
			, original: 'RelServHotelInfoPolicies'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelInfoPoliciesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelInfoPolicies: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelInfoPolicies', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelInfoPoliciesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelinfopoliciesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelInfoPoliciesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelinfopoliciesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelInfoPoliciesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelInfoPolicies = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelInfoPolicies');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmPolicies = $scope.$storage.dataTmPolicies;
			}
			$servicesStorage.TmPoliciesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmPolicies = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmPolicies = $scope.dataTmPolicies;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelInfoPolicies", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelInfoPolicies');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelRoomFeaturesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelRoomFeatures = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelRoomFeaturesListCtrl'
					, original: 'RelServHotelRoomFeatures'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelroomfeatures' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelRoomFeaturesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelRoomFeatures: new Array()
			  	})
			  	, $scope.dataRelServHotelRoomFeatures = $scope.$storage.dataRelServHotelRoomFeatures;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelroomfeaturesEdit',
					controller: 'RelServHotelRoomFeaturesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelroomfeatures' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelRoomFeaturesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelRoomFeatures.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelroomfeaturesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelroomfeaturesEdit/' + itemId,
						controller: 'RelServHotelRoomFeaturesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelroomfeatures' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelRoomFeatures)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelRoomFeaturesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelRoomFeatures[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelRoomFeatures[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelroomfeaturesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelRoomFeatures); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelRoomFeaturesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelRoomFeatures.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelRoomFeatures(true);
	    };
	    
	    $scope.loadAllDataRelServHotelRoomFeatures = function() {
	    	$servicesStorage.RelServHotelRoomFeaturesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelRoomFeatures = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelRoomFeatures = $scope.dataRelServHotelRoomFeatures;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelRoomFeatures = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelRoomFeaturesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelRoomFeatures = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelRoomFeatures = APP.uniqueArray($scope.dataRelServHotelRoomFeatures.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelRoomFeatures = $scope.dataRelServHotelRoomFeatures;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelRoomFeatures = $scope.dataRelServHotelRoomFeatures.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelRoomFeaturesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelRoomFeatures(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelRoomFeatures", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelRoomFeaturesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelRoomFeatures = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelRoomFeaturesSelectorCtrl'
				, original: 'RelServHotelRoomFeatures'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelRoomFeaturesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelRoomFeatures: new Object()
		  	})
		  	, $scope.dataRelServHotelRoomFeatures = $scope.$storage.dataRelServHotelRoomFeatures;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelRoomFeatures = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelRoomFeaturesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelRoomFeatures = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelRoomFeatures = APP.uniqueArray($scope.dataRelServHotelRoomFeatures.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelRoomFeatures = $scope.dataRelServHotelRoomFeatures;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelRoomFeatures(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelRoomFeatures", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelRoomFeaturesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelRoomFeaturesEditCtrl'
			, original: 'RelServHotelRoomFeatures'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelRoomFeaturesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelRoomFeatures: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelRoomFeatures', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelRoomFeaturesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelroomfeaturesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelRoomFeaturesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelroomfeaturesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelRoomFeaturesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelRoomFeatures = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelRoomFeatures');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotelRoom = $scope.$storage.dataServHotelRoom;
			}
			$servicesStorage.ServHotelRoomDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotelRoom = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelRoomFeatures", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelRoomFeatures');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelRoomImageListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelRoomImage = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelRoomImageListCtrl'
					, original: 'RelServHotelRoomImage'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelroomimage' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelRoomImageListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelRoomImage: new Array()
			  	})
			  	, $scope.dataRelServHotelRoomImage = $scope.$storage.dataRelServHotelRoomImage;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelroomimageEdit',
					controller: 'RelServHotelRoomImageEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelroomimage' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelRoomImageDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelRoomImage.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelroomimageCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelroomimageEdit/' + itemId,
						controller: 'RelServHotelRoomImageEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelroomimage' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelRoomImage)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelRoomImageDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelRoomImage[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelRoomImage[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelroomimageEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelRoomImage); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelRoomImageDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelRoomImage.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelRoomImage(true);
	    };
	    
	    $scope.loadAllDataRelServHotelRoomImage = function() {
	    	$servicesStorage.RelServHotelRoomImageDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelRoomImage = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelRoomImage = $scope.dataRelServHotelRoomImage;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelRoomImage = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelRoomImageDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelRoomImage = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelRoomImage = APP.uniqueArray($scope.dataRelServHotelRoomImage.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelRoomImage = $scope.dataRelServHotelRoomImage;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelRoomImage = $scope.dataRelServHotelRoomImage.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelRoomImageDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelRoomImage(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelRoomImage", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelRoomImageSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelRoomImage = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelRoomImageSelectorCtrl'
				, original: 'RelServHotelRoomImage'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelRoomImageSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelRoomImage: new Object()
		  	})
		  	, $scope.dataRelServHotelRoomImage = $scope.$storage.dataRelServHotelRoomImage;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelRoomImage = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelRoomImageDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelRoomImage = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelRoomImage = APP.uniqueArray($scope.dataRelServHotelRoomImage.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelRoomImage = $scope.dataRelServHotelRoomImage;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelRoomImage(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelRoomImage", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelRoomImageEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelRoomImageEditCtrl'
			, original: 'RelServHotelRoomImage'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelRoomImageEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelRoomImage: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelRoomImage', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelRoomImageDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelroomimageList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelRoomImageDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelroomimageList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelRoomImageDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelRoomImage = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelRoomImage');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotelRoom = $scope.$storage.dataServHotelRoom;
			}
			$servicesStorage.ServHotelRoomDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotelRoom = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmImage = $scope.$storage.dataTmImage;
			}
			$servicesStorage.TmImageDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmImage = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmImage = $scope.dataTmImage;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelRoomImage", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelRoomImage');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServHotelServKidsRuleListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServHotelServKidsRule = new Array()
			, $scope.ctrl = {
					  name: 'RelServHotelServKidsRuleListCtrl'
					, original: 'RelServHotelServKidsRule'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservhotelservkidsrule' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServHotelServKidsRuleListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServHotelServKidsRule: new Array()
			  	})
			  	, $scope.dataRelServHotelServKidsRule = $scope.$storage.dataRelServHotelServKidsRule;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservhotelservkidsruleEdit',
					controller: 'RelServHotelServKidsRuleEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservhotelservkidsrule' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServHotelServKidsRuleDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServHotelServKidsRule.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservhotelservkidsruleCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservhotelservkidsruleEdit/' + itemId,
						controller: 'RelServHotelServKidsRuleEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservhotelservkidsrule' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServHotelServKidsRule)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServHotelServKidsRuleDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServHotelServKidsRule[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServHotelServKidsRule[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservhotelservkidsruleEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServHotelServKidsRule); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServHotelServKidsRuleDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServHotelServKidsRule.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServHotelServKidsRule(true);
	    };
	    
	    $scope.loadAllDataRelServHotelServKidsRule = function() {
	    	$servicesStorage.RelServHotelServKidsRuleDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelServKidsRule = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelServKidsRule = $scope.dataRelServHotelServKidsRule;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServHotelServKidsRule = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelServKidsRuleDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelServKidsRule = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelServKidsRule = APP.uniqueArray($scope.dataRelServHotelServKidsRule.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelServKidsRule = $scope.dataRelServHotelServKidsRule;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServHotelServKidsRule = $scope.dataRelServHotelServKidsRule.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServHotelServKidsRuleDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelServKidsRule(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelServKidsRule", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelServKidsRuleSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServHotelServKidsRule = new Array()
		, $scope.ctrl = {
				  name: 'RelServHotelServKidsRuleSelectorCtrl'
				, original: 'RelServHotelServKidsRule'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServHotelServKidsRuleSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServHotelServKidsRule: new Object()
		  	})
		  	, $scope.dataRelServHotelServKidsRule = $scope.$storage.dataRelServHotelServKidsRule;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServHotelServKidsRule = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServHotelServKidsRuleDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServHotelServKidsRule = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServHotelServKidsRule = APP.uniqueArray($scope.dataRelServHotelServKidsRule.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServHotelServKidsRule = $scope.dataRelServHotelServKidsRule;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServHotelServKidsRule(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServHotelServKidsRule", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServHotelServKidsRuleEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServHotelServKidsRuleEditCtrl'
			, original: 'RelServHotelServKidsRule'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServHotelServKidsRuleEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServHotelServKidsRule: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServHotelServKidsRule', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServHotelServKidsRuleDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelservkidsruleList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServHotelServKidsRuleDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservhotelservkidsruleList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServHotelServKidsRuleDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServHotelServKidsRule = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServHotelServKidsRule');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServKidsRule = $scope.$storage.dataServKidsRule;
			}
			$servicesStorage.ServKidsRuleDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServKidsRule = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServKidsRule = $scope.dataServKidsRule;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServHotelServKidsRule", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServHotelServKidsRule');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServKidsRuleFeaturesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServKidsRuleFeatures = new Array()
			, $scope.ctrl = {
					  name: 'RelServKidsRuleFeaturesListCtrl'
					, original: 'RelServKidsRuleFeatures'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservkidsrulefeatures' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServKidsRuleFeaturesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServKidsRuleFeatures: new Array()
			  	})
			  	, $scope.dataRelServKidsRuleFeatures = $scope.$storage.dataRelServKidsRuleFeatures;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservkidsrulefeaturesEdit',
					controller: 'RelServKidsRuleFeaturesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservkidsrulefeatures' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServKidsRuleFeaturesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServKidsRuleFeatures.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservkidsrulefeaturesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservkidsrulefeaturesEdit/' + itemId,
						controller: 'RelServKidsRuleFeaturesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservkidsrulefeatures' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServKidsRuleFeatures)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServKidsRuleFeaturesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServKidsRuleFeatures[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServKidsRuleFeatures[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservkidsrulefeaturesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServKidsRuleFeatures); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServKidsRuleFeaturesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServKidsRuleFeatures.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServKidsRuleFeatures(true);
	    };
	    
	    $scope.loadAllDataRelServKidsRuleFeatures = function() {
	    	$servicesStorage.RelServKidsRuleFeaturesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServKidsRuleFeatures = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServKidsRuleFeatures = $scope.dataRelServKidsRuleFeatures;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServKidsRuleFeatures = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServKidsRuleFeaturesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServKidsRuleFeatures = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServKidsRuleFeatures = APP.uniqueArray($scope.dataRelServKidsRuleFeatures.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServKidsRuleFeatures = $scope.dataRelServKidsRuleFeatures;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServKidsRuleFeatures = $scope.dataRelServKidsRuleFeatures.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServKidsRuleFeaturesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServKidsRuleFeatures(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServKidsRuleFeatures", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServKidsRuleFeaturesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServKidsRuleFeatures = new Array()
		, $scope.ctrl = {
				  name: 'RelServKidsRuleFeaturesSelectorCtrl'
				, original: 'RelServKidsRuleFeatures'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServKidsRuleFeaturesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServKidsRuleFeatures: new Object()
		  	})
		  	, $scope.dataRelServKidsRuleFeatures = $scope.$storage.dataRelServKidsRuleFeatures;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServKidsRuleFeatures = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServKidsRuleFeaturesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServKidsRuleFeatures = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServKidsRuleFeatures = APP.uniqueArray($scope.dataRelServKidsRuleFeatures.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServKidsRuleFeatures = $scope.dataRelServKidsRuleFeatures;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServKidsRuleFeatures(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServKidsRuleFeatures", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServKidsRuleFeaturesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServKidsRuleFeaturesEditCtrl'
			, original: 'RelServKidsRuleFeatures'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServKidsRuleFeaturesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServKidsRuleFeatures: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServKidsRuleFeatures', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServKidsRuleFeaturesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservkidsrulefeaturesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServKidsRuleFeaturesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservkidsrulefeaturesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServKidsRuleFeaturesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServKidsRuleFeatures = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServKidsRuleFeatures');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServKidsRule = $scope.$storage.dataServKidsRule;
			}
			$servicesStorage.ServKidsRuleDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServKidsRule = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServKidsRule = $scope.dataServKidsRule;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServKidsRuleFeatures", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServKidsRuleFeatures');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelServTransferTmContactListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelServTransferTmContact = new Array()
			, $scope.ctrl = {
					  name: 'RelServTransferTmContactListCtrl'
					, original: 'RelServTransferTmContact'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'relservtransfertmcontact' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelServTransferTmContactListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelServTransferTmContact: new Array()
			  	})
			  	, $scope.dataRelServTransferTmContact = $scope.$storage.dataRelServTransferTmContact;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'RelservtransfertmcontactEdit',
					controller: 'RelServTransferTmContactEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'relservtransfertmcontact' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelServTransferTmContactDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelServTransferTmContact.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/RelservtransfertmcontactCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'RelservtransfertmcontactEdit/' + itemId,
						controller: 'RelServTransferTmContactEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'relservtransfertmcontact' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelServTransferTmContact)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelServTransferTmContactDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelServTransferTmContact[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelServTransferTmContact[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/RelservtransfertmcontactEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelServTransferTmContact); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelServTransferTmContactDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelServTransferTmContact.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelServTransferTmContact(true);
	    };
	    
	    $scope.loadAllDataRelServTransferTmContact = function() {
	    	$servicesStorage.RelServTransferTmContactDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServTransferTmContact = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServTransferTmContact = $scope.dataRelServTransferTmContact;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelServTransferTmContact = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServTransferTmContactDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServTransferTmContact = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServTransferTmContact = APP.uniqueArray($scope.dataRelServTransferTmContact.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServTransferTmContact = $scope.dataRelServTransferTmContact;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelServTransferTmContact = $scope.dataRelServTransferTmContact.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelServTransferTmContactDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServTransferTmContact(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServTransferTmContact", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServTransferTmContactSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelServTransferTmContact = new Array()
		, $scope.ctrl = {
				  name: 'RelServTransferTmContactSelectorCtrl'
				, original: 'RelServTransferTmContact'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelServTransferTmContactSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelServTransferTmContact: new Object()
		  	})
		  	, $scope.dataRelServTransferTmContact = $scope.$storage.dataRelServTransferTmContact;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelServTransferTmContact = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelServTransferTmContactDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelServTransferTmContact = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelServTransferTmContact = APP.uniqueArray($scope.dataRelServTransferTmContact.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelServTransferTmContact = $scope.dataRelServTransferTmContact;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelServTransferTmContact(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelServTransferTmContact", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelServTransferTmContactEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelServTransferTmContactEditCtrl'
			, original: 'RelServTransferTmContact'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelServTransferTmContactEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelServTransferTmContact: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelServTransferTmContact', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelServTransferTmContactDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservtransfertmcontactList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelServTransferTmContactDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/RelservtransfertmcontactList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelServTransferTmContactDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelServTransferTmContact = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelServTransferTmContact');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTransfer = $scope.$storage.dataServTransfer;
			}
			$servicesStorage.ServTransferDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTransfer = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTransfer = $scope.dataServTransfer;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelServTransferTmContact", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelServTransferTmContact');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelTmOrderDocDocumentsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelTmOrderDocDocuments = new Array()
			, $scope.ctrl = {
					  name: 'RelTmOrderDocDocumentsListCtrl'
					, original: 'RelTmOrderDocDocuments'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reltmorderdocdocuments' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelTmOrderDocDocumentsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelTmOrderDocDocuments: new Array()
			  	})
			  	, $scope.dataRelTmOrderDocDocuments = $scope.$storage.dataRelTmOrderDocDocuments;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReltmorderdocdocumentsEdit',
					controller: 'RelTmOrderDocDocumentsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reltmorderdocdocuments' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelTmOrderDocDocumentsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelTmOrderDocDocuments.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReltmorderdocdocumentsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReltmorderdocdocumentsEdit/' + itemId,
						controller: 'RelTmOrderDocDocumentsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reltmorderdocdocuments' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelTmOrderDocDocuments)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelTmOrderDocDocumentsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelTmOrderDocDocuments[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelTmOrderDocDocuments[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReltmorderdocdocumentsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelTmOrderDocDocuments); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelTmOrderDocDocumentsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelTmOrderDocDocuments.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelTmOrderDocDocuments(true);
	    };
	    
	    $scope.loadAllDataRelTmOrderDocDocuments = function() {
	    	$servicesStorage.RelTmOrderDocDocumentsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderDocDocuments = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderDocDocuments = $scope.dataRelTmOrderDocDocuments;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelTmOrderDocDocuments = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTmOrderDocDocumentsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTmOrderDocDocuments = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderDocDocuments = APP.uniqueArray($scope.dataRelTmOrderDocDocuments.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderDocDocuments = $scope.dataRelTmOrderDocDocuments;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelTmOrderDocDocuments = $scope.dataRelTmOrderDocDocuments.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelTmOrderDocDocumentsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTmOrderDocDocuments(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTmOrderDocDocuments", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTmOrderDocDocumentsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelTmOrderDocDocuments = new Array()
		, $scope.ctrl = {
				  name: 'RelTmOrderDocDocumentsSelectorCtrl'
				, original: 'RelTmOrderDocDocuments'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelTmOrderDocDocumentsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelTmOrderDocDocuments: new Object()
		  	})
		  	, $scope.dataRelTmOrderDocDocuments = $scope.$storage.dataRelTmOrderDocDocuments;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelTmOrderDocDocuments = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTmOrderDocDocumentsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTmOrderDocDocuments = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderDocDocuments = APP.uniqueArray($scope.dataRelTmOrderDocDocuments.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderDocDocuments = $scope.dataRelTmOrderDocDocuments;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTmOrderDocDocuments(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTmOrderDocDocuments", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTmOrderDocDocumentsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelTmOrderDocDocumentsEditCtrl'
			, original: 'RelTmOrderDocDocuments'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelTmOrderDocDocumentsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelTmOrderDocDocuments: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelTmOrderDocDocuments', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelTmOrderDocDocumentsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltmorderdocdocumentsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelTmOrderDocDocumentsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltmorderdocdocumentsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelTmOrderDocDocumentsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelTmOrderDocDocuments = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelTmOrderDocDocuments');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDocDocuments = $scope.$storage.dataDocDocuments;
			}
			$servicesStorage.DocDocumentsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDocDocuments = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmOrder = $scope.$storage.dataTmOrder;
			}
			$servicesStorage.TmOrderDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmOrder = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmOrder = $scope.dataTmOrder;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelTmOrderDocDocuments", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelTmOrderDocDocuments');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelTmOrderInfoServicesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelTmOrderInfoServices = new Array()
			, $scope.ctrl = {
					  name: 'RelTmOrderInfoServicesListCtrl'
					, original: 'RelTmOrderInfoServices'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reltmorderinfoservices' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelTmOrderInfoServicesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelTmOrderInfoServices: new Array()
			  	})
			  	, $scope.dataRelTmOrderInfoServices = $scope.$storage.dataRelTmOrderInfoServices;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReltmorderinfoservicesEdit',
					controller: 'RelTmOrderInfoServicesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reltmorderinfoservices' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelTmOrderInfoServicesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelTmOrderInfoServices.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReltmorderinfoservicesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReltmorderinfoservicesEdit/' + itemId,
						controller: 'RelTmOrderInfoServicesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reltmorderinfoservices' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelTmOrderInfoServices)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelTmOrderInfoServicesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelTmOrderInfoServices[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelTmOrderInfoServices[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReltmorderinfoservicesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelTmOrderInfoServices); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelTmOrderInfoServicesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelTmOrderInfoServices.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelTmOrderInfoServices(true);
	    };
	    
	    $scope.loadAllDataRelTmOrderInfoServices = function() {
	    	$servicesStorage.RelTmOrderInfoServicesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderInfoServices = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderInfoServices = $scope.dataRelTmOrderInfoServices;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelTmOrderInfoServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTmOrderInfoServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTmOrderInfoServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderInfoServices = APP.uniqueArray($scope.dataRelTmOrderInfoServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderInfoServices = $scope.dataRelTmOrderInfoServices;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelTmOrderInfoServices = $scope.dataRelTmOrderInfoServices.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelTmOrderInfoServicesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTmOrderInfoServices(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTmOrderInfoServices", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTmOrderInfoServicesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelTmOrderInfoServices = new Array()
		, $scope.ctrl = {
				  name: 'RelTmOrderInfoServicesSelectorCtrl'
				, original: 'RelTmOrderInfoServices'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelTmOrderInfoServicesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelTmOrderInfoServices: new Object()
		  	})
		  	, $scope.dataRelTmOrderInfoServices = $scope.$storage.dataRelTmOrderInfoServices;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelTmOrderInfoServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTmOrderInfoServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTmOrderInfoServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderInfoServices = APP.uniqueArray($scope.dataRelTmOrderInfoServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderInfoServices = $scope.dataRelTmOrderInfoServices;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTmOrderInfoServices(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTmOrderInfoServices", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTmOrderInfoServicesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelTmOrderInfoServicesEditCtrl'
			, original: 'RelTmOrderInfoServices'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelTmOrderInfoServicesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelTmOrderInfoServices: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelTmOrderInfoServices', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelTmOrderInfoServicesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltmorderinfoservicesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelTmOrderInfoServicesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltmorderinfoservicesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelTmOrderInfoServicesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelTmOrderInfoServices = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelTmOrderInfoServices');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataInfoServices = $scope.$storage.dataInfoServices;
			}
			$servicesStorage.InfoServicesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataInfoServices = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataInfoServices = $scope.dataInfoServices;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmOrder = $scope.$storage.dataTmOrder;
			}
			$servicesStorage.TmOrderDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmOrder = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmOrder = $scope.dataTmOrder;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelTmOrderInfoServices", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelTmOrderInfoServices');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelTmOrderServGiftsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelTmOrderServGifts = new Array()
			, $scope.ctrl = {
					  name: 'RelTmOrderServGiftsListCtrl'
					, original: 'RelTmOrderServGifts'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reltmorderservgifts' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelTmOrderServGiftsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelTmOrderServGifts: new Array()
			  	})
			  	, $scope.dataRelTmOrderServGifts = $scope.$storage.dataRelTmOrderServGifts;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReltmorderservgiftsEdit',
					controller: 'RelTmOrderServGiftsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reltmorderservgifts' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelTmOrderServGiftsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelTmOrderServGifts.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReltmorderservgiftsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReltmorderservgiftsEdit/' + itemId,
						controller: 'RelTmOrderServGiftsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reltmorderservgifts' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelTmOrderServGifts)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelTmOrderServGiftsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelTmOrderServGifts[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelTmOrderServGifts[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReltmorderservgiftsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelTmOrderServGifts); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelTmOrderServGiftsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelTmOrderServGifts.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelTmOrderServGifts(true);
	    };
	    
	    $scope.loadAllDataRelTmOrderServGifts = function() {
	    	$servicesStorage.RelTmOrderServGiftsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderServGifts = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderServGifts = $scope.dataRelTmOrderServGifts;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelTmOrderServGifts = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTmOrderServGiftsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTmOrderServGifts = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderServGifts = APP.uniqueArray($scope.dataRelTmOrderServGifts.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderServGifts = $scope.dataRelTmOrderServGifts;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelTmOrderServGifts = $scope.dataRelTmOrderServGifts.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelTmOrderServGiftsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTmOrderServGifts(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTmOrderServGifts", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTmOrderServGiftsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelTmOrderServGifts = new Array()
		, $scope.ctrl = {
				  name: 'RelTmOrderServGiftsSelectorCtrl'
				, original: 'RelTmOrderServGifts'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelTmOrderServGiftsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelTmOrderServGifts: new Object()
		  	})
		  	, $scope.dataRelTmOrderServGifts = $scope.$storage.dataRelTmOrderServGifts;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelTmOrderServGifts = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTmOrderServGiftsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTmOrderServGifts = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderServGifts = APP.uniqueArray($scope.dataRelTmOrderServGifts.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderServGifts = $scope.dataRelTmOrderServGifts;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTmOrderServGifts(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTmOrderServGifts", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTmOrderServGiftsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelTmOrderServGiftsEditCtrl'
			, original: 'RelTmOrderServGifts'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelTmOrderServGiftsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelTmOrderServGifts: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelTmOrderServGifts', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelTmOrderServGiftsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltmorderservgiftsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelTmOrderServGiftsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltmorderservgiftsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelTmOrderServGiftsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelTmOrderServGifts = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelTmOrderServGifts');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServGifts = $scope.$storage.dataServGifts;
			}
			$servicesStorage.ServGiftsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServGifts = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServGifts = $scope.dataServGifts;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmOrder = $scope.$storage.dataTmOrder;
			}
			$servicesStorage.TmOrderDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmOrder = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmOrder = $scope.dataTmOrder;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelTmOrderServGifts", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelTmOrderServGifts');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelTmOrderTmContactListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelTmOrderTmContact = new Array()
			, $scope.ctrl = {
					  name: 'RelTmOrderTmContactListCtrl'
					, original: 'RelTmOrderTmContact'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reltmordertmcontact' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelTmOrderTmContactListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelTmOrderTmContact: new Array()
			  	})
			  	, $scope.dataRelTmOrderTmContact = $scope.$storage.dataRelTmOrderTmContact;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReltmordertmcontactEdit',
					controller: 'RelTmOrderTmContactEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reltmordertmcontact' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelTmOrderTmContactDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelTmOrderTmContact.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReltmordertmcontactCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReltmordertmcontactEdit/' + itemId,
						controller: 'RelTmOrderTmContactEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reltmordertmcontact' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelTmOrderTmContact)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelTmOrderTmContactDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelTmOrderTmContact[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelTmOrderTmContact[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReltmordertmcontactEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelTmOrderTmContact); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelTmOrderTmContactDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelTmOrderTmContact.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelTmOrderTmContact(true);
	    };
	    
	    $scope.loadAllDataRelTmOrderTmContact = function() {
	    	$servicesStorage.RelTmOrderTmContactDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderTmContact = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderTmContact = $scope.dataRelTmOrderTmContact;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelTmOrderTmContact = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTmOrderTmContactDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTmOrderTmContact = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderTmContact = APP.uniqueArray($scope.dataRelTmOrderTmContact.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderTmContact = $scope.dataRelTmOrderTmContact;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelTmOrderTmContact = $scope.dataRelTmOrderTmContact.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelTmOrderTmContactDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTmOrderTmContact(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTmOrderTmContact", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTmOrderTmContactSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelTmOrderTmContact = new Array()
		, $scope.ctrl = {
				  name: 'RelTmOrderTmContactSelectorCtrl'
				, original: 'RelTmOrderTmContact'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelTmOrderTmContactSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelTmOrderTmContact: new Object()
		  	})
		  	, $scope.dataRelTmOrderTmContact = $scope.$storage.dataRelTmOrderTmContact;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelTmOrderTmContact = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTmOrderTmContactDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTmOrderTmContact = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTmOrderTmContact = APP.uniqueArray($scope.dataRelTmOrderTmContact.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTmOrderTmContact = $scope.dataRelTmOrderTmContact;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTmOrderTmContact(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTmOrderTmContact", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTmOrderTmContactEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelTmOrderTmContactEditCtrl'
			, original: 'RelTmOrderTmContact'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelTmOrderTmContactEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelTmOrderTmContact: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelTmOrderTmContact', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelTmOrderTmContactDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltmordertmcontactList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelTmOrderTmContactDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltmordertmcontactList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelTmOrderTmContactDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelTmOrderTmContact = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelTmOrderTmContact');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmOrder = $scope.$storage.dataTmOrder;
			}
			$servicesStorage.TmOrderDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmOrder = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmOrder = $scope.dataTmOrder;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelTmOrderTmContact", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelTmOrderTmContact');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelTourDocsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelTourDocs = new Array()
			, $scope.ctrl = {
					  name: 'RelTourDocsListCtrl'
					, original: 'RelTourDocs'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reltourdocs' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelTourDocsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelTourDocs: new Array()
			  	})
			  	, $scope.dataRelTourDocs = $scope.$storage.dataRelTourDocs;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReltourdocsEdit',
					controller: 'RelTourDocsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reltourdocs' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelTourDocsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelTourDocs.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReltourdocsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReltourdocsEdit/' + itemId,
						controller: 'RelTourDocsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reltourdocs' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelTourDocs)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelTourDocsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelTourDocs[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelTourDocs[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReltourdocsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelTourDocs); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelTourDocsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelTourDocs.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelTourDocs(true);
	    };
	    
	    $scope.loadAllDataRelTourDocs = function() {
	    	$servicesStorage.RelTourDocsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourDocs = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourDocs = $scope.dataRelTourDocs;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelTourDocs = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTourDocsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTourDocs = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourDocs = APP.uniqueArray($scope.dataRelTourDocs.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourDocs = $scope.dataRelTourDocs;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelTourDocs = $scope.dataRelTourDocs.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelTourDocsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTourDocs(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTourDocs", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTourDocsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelTourDocs = new Array()
		, $scope.ctrl = {
				  name: 'RelTourDocsSelectorCtrl'
				, original: 'RelTourDocs'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelTourDocsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelTourDocs: new Object()
		  	})
		  	, $scope.dataRelTourDocs = $scope.$storage.dataRelTourDocs;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelTourDocs = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTourDocsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTourDocs = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourDocs = APP.uniqueArray($scope.dataRelTourDocs.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourDocs = $scope.dataRelTourDocs;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTourDocs(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTourDocs", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTourDocsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelTourDocsEditCtrl'
			, original: 'RelTourDocs'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelTourDocsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelTourDocs: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelTourDocs', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelTourDocsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltourdocsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelTourDocsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltourdocsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelTourDocsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelTourDocs = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelTourDocs');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDocDocuments = $scope.$storage.dataDocDocuments;
			}
			$servicesStorage.DocDocumentsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDocDocuments = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDocDocuments = $scope.dataDocDocuments;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTour = $scope.$storage.dataServTour;
			}
			$servicesStorage.ServTourDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTour = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTour = $scope.dataServTour;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelTourDocs", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelTourDocs');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelTourHotelsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelTourHotels = new Array()
			, $scope.ctrl = {
					  name: 'RelTourHotelsListCtrl'
					, original: 'RelTourHotels'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reltourhotels' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelTourHotelsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelTourHotels: new Array()
			  	})
			  	, $scope.dataRelTourHotels = $scope.$storage.dataRelTourHotels;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReltourhotelsEdit',
					controller: 'RelTourHotelsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reltourhotels' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelTourHotelsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelTourHotels.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReltourhotelsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReltourhotelsEdit/' + itemId,
						controller: 'RelTourHotelsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reltourhotels' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelTourHotels)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelTourHotelsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelTourHotels[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelTourHotels[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReltourhotelsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelTourHotels); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelTourHotelsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelTourHotels.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelTourHotels(true);
	    };
	    
	    $scope.loadAllDataRelTourHotels = function() {
	    	$servicesStorage.RelTourHotelsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourHotels = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourHotels = $scope.dataRelTourHotels;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelTourHotels = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTourHotelsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTourHotels = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourHotels = APP.uniqueArray($scope.dataRelTourHotels.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourHotels = $scope.dataRelTourHotels;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelTourHotels = $scope.dataRelTourHotels.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelTourHotelsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTourHotels(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTourHotels", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTourHotelsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelTourHotels = new Array()
		, $scope.ctrl = {
				  name: 'RelTourHotelsSelectorCtrl'
				, original: 'RelTourHotels'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelTourHotelsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelTourHotels: new Object()
		  	})
		  	, $scope.dataRelTourHotels = $scope.$storage.dataRelTourHotels;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelTourHotels = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTourHotelsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTourHotels = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourHotels = APP.uniqueArray($scope.dataRelTourHotels.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourHotels = $scope.dataRelTourHotels;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTourHotels(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTourHotels", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTourHotelsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelTourHotelsEditCtrl'
			, original: 'RelTourHotels'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelTourHotelsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelTourHotels: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelTourHotels', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelTourHotelsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltourhotelsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelTourHotelsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltourhotelsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelTourHotelsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelTourHotels = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelTourHotels');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTour = $scope.$storage.dataServTour;
			}
			$servicesStorage.ServTourDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTour = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTour = $scope.dataServTour;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelTourHotels", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelTourHotels');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('RelTourServicesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataRelTourServices = new Array()
			, $scope.ctrl = {
					  name: 'RelTourServicesListCtrl'
					, original: 'RelTourServices'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reltourservices' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('RelTourServicesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataRelTourServices: new Array()
			  	})
			  	, $scope.dataRelTourServices = $scope.$storage.dataRelTourServices;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReltourservicesEdit',
					controller: 'RelTourServicesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reltourservices' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.RelTourServicesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataRelTourServices.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReltourservicesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReltourservicesEdit/' + itemId,
						controller: 'RelTourServicesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reltourservices' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataRelTourServices)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.RelTourServicesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataRelTourServices[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataRelTourServices[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReltourservicesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataRelTourServices); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.RelTourServicesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataRelTourServices.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataRelTourServices(true);
	    };
	    
	    $scope.loadAllDataRelTourServices = function() {
	    	$servicesStorage.RelTourServicesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourServices = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourServices = $scope.dataRelTourServices;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataRelTourServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTourServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTourServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourServices = APP.uniqueArray($scope.dataRelTourServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourServices = $scope.dataRelTourServices;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredRelTourServices = $scope.dataRelTourServices.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.RelTourServicesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTourServices(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTourServices", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTourServicesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataRelTourServices = new Array()
		, $scope.ctrl = {
				  name: 'RelTourServicesSelectorCtrl'
				, original: 'RelTourServices'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('RelTourServicesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataRelTourServices: new Object()
		  	})
		  	, $scope.dataRelTourServices = $scope.$storage.dataRelTourServices;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataRelTourServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.RelTourServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataRelTourServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataRelTourServices = APP.uniqueArray($scope.dataRelTourServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataRelTourServices = $scope.dataRelTourServices;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataRelTourServices(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("RelTourServices", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('RelTourServicesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'RelTourServicesEditCtrl'
			, original: 'RelTourServices'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('RelTourServicesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemRelTourServices: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'RelTourServices', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.RelTourServicesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltourservicesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.RelTourServicesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReltourservicesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.RelTourServicesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemRelTourServices = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'RelTourServices');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataInfoServices = $scope.$storage.dataInfoServices;
			}
			$servicesStorage.InfoServicesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataInfoServices = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataInfoServices = $scope.dataInfoServices;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTour = $scope.$storage.dataServTour;
			}
			$servicesStorage.ServTourDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTour = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTour = $scope.dataServTour;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("RelTourServices", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'RelTourServices');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('ReqCruiseHotelsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataReqCruiseHotels = new Array()
			, $scope.ctrl = {
					  name: 'ReqCruiseHotelsListCtrl'
					, original: 'ReqCruiseHotels'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reqcruisehotels' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ReqCruiseHotelsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataReqCruiseHotels: new Array()
			  	})
			  	, $scope.dataReqCruiseHotels = $scope.$storage.dataReqCruiseHotels;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReqcruisehotelsEdit',
					controller: 'ReqCruiseHotelsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reqcruisehotels' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ReqCruiseHotelsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataReqCruiseHotels.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReqcruisehotelsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReqcruisehotelsEdit/' + itemId,
						controller: 'ReqCruiseHotelsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reqcruisehotels' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataReqCruiseHotels)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ReqCruiseHotelsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataReqCruiseHotels[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataReqCruiseHotels[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReqcruisehotelsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataReqCruiseHotels); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ReqCruiseHotelsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataReqCruiseHotels.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataReqCruiseHotels(true);
	    };
	    
	    $scope.loadAllDataReqCruiseHotels = function() {
	    	$servicesStorage.ReqCruiseHotelsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqCruiseHotels = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqCruiseHotels = $scope.dataReqCruiseHotels;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataReqCruiseHotels = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqCruiseHotelsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqCruiseHotels = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqCruiseHotels = APP.uniqueArray($scope.dataReqCruiseHotels.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqCruiseHotels = $scope.dataReqCruiseHotels;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredReqCruiseHotels = $scope.dataReqCruiseHotels.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ReqCruiseHotelsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqCruiseHotels(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqCruiseHotels", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqCruiseHotelsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataReqCruiseHotels = new Array()
		, $scope.ctrl = {
				  name: 'ReqCruiseHotelsSelectorCtrl'
				, original: 'ReqCruiseHotels'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ReqCruiseHotelsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataReqCruiseHotels: new Object()
		  	})
		  	, $scope.dataReqCruiseHotels = $scope.$storage.dataReqCruiseHotels;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataReqCruiseHotels = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqCruiseHotelsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqCruiseHotels = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqCruiseHotels = APP.uniqueArray($scope.dataReqCruiseHotels.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqCruiseHotels = $scope.dataReqCruiseHotels;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqCruiseHotels(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqCruiseHotels", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqCruiseHotelsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ReqCruiseHotelsEditCtrl'
			, original: 'ReqCruiseHotels'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ReqCruiseHotelsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemReqCruiseHotels: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ReqCruiseHotels', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ReqCruiseHotelsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqcruisehotelsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ReqCruiseHotelsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqcruisehotelsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ReqCruiseHotelsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemReqCruiseHotels = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ReqCruiseHotels');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServCruise = $scope.$storage.dataServCruise;
			}
			$servicesStorage.ServCruiseDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServCruise = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServCruise = $scope.dataServCruise;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ReqCruiseHotels", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ReqCruiseHotels');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('ReqCruiseServicesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataReqCruiseServices = new Array()
			, $scope.ctrl = {
					  name: 'ReqCruiseServicesListCtrl'
					, original: 'ReqCruiseServices'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reqcruiseservices' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ReqCruiseServicesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataReqCruiseServices: new Array()
			  	})
			  	, $scope.dataReqCruiseServices = $scope.$storage.dataReqCruiseServices;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReqcruiseservicesEdit',
					controller: 'ReqCruiseServicesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reqcruiseservices' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ReqCruiseServicesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataReqCruiseServices.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReqcruiseservicesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReqcruiseservicesEdit/' + itemId,
						controller: 'ReqCruiseServicesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reqcruiseservices' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataReqCruiseServices)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ReqCruiseServicesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataReqCruiseServices[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataReqCruiseServices[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReqcruiseservicesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataReqCruiseServices); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ReqCruiseServicesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataReqCruiseServices.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataReqCruiseServices(true);
	    };
	    
	    $scope.loadAllDataReqCruiseServices = function() {
	    	$servicesStorage.ReqCruiseServicesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqCruiseServices = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqCruiseServices = $scope.dataReqCruiseServices;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataReqCruiseServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqCruiseServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqCruiseServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqCruiseServices = APP.uniqueArray($scope.dataReqCruiseServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqCruiseServices = $scope.dataReqCruiseServices;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredReqCruiseServices = $scope.dataReqCruiseServices.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ReqCruiseServicesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqCruiseServices(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqCruiseServices", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqCruiseServicesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataReqCruiseServices = new Array()
		, $scope.ctrl = {
				  name: 'ReqCruiseServicesSelectorCtrl'
				, original: 'ReqCruiseServices'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ReqCruiseServicesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataReqCruiseServices: new Object()
		  	})
		  	, $scope.dataReqCruiseServices = $scope.$storage.dataReqCruiseServices;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataReqCruiseServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqCruiseServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqCruiseServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqCruiseServices = APP.uniqueArray($scope.dataReqCruiseServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqCruiseServices = $scope.dataReqCruiseServices;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqCruiseServices(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqCruiseServices", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqCruiseServicesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ReqCruiseServicesEditCtrl'
			, original: 'ReqCruiseServices'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ReqCruiseServicesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemReqCruiseServices: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ReqCruiseServices', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ReqCruiseServicesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqcruiseservicesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ReqCruiseServicesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqcruiseservicesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ReqCruiseServicesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemReqCruiseServices = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ReqCruiseServices');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataInfoServices = $scope.$storage.dataInfoServices;
			}
			$servicesStorage.InfoServicesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataInfoServices = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataInfoServices = $scope.dataInfoServices;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServCruise = $scope.$storage.dataServCruise;
			}
			$servicesStorage.ServCruiseDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServCruise = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServCruise = $scope.dataServCruise;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ReqCruiseServices", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ReqCruiseServices');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('ReqHotelRoomsBusyListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataReqHotelRoomsBusy = new Array()
			, $scope.ctrl = {
					  name: 'ReqHotelRoomsBusyListCtrl'
					, original: 'ReqHotelRoomsBusy'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reqhotelroomsbusy' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ReqHotelRoomsBusyListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataReqHotelRoomsBusy: new Array()
			  	})
			  	, $scope.dataReqHotelRoomsBusy = $scope.$storage.dataReqHotelRoomsBusy;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReqhotelroomsbusyEdit',
					controller: 'ReqHotelRoomsBusyEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reqhotelroomsbusy' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ReqHotelRoomsBusyDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataReqHotelRoomsBusy.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReqhotelroomsbusyCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReqhotelroomsbusyEdit/' + itemId,
						controller: 'ReqHotelRoomsBusyEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reqhotelroomsbusy' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataReqHotelRoomsBusy)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ReqHotelRoomsBusyDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataReqHotelRoomsBusy[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataReqHotelRoomsBusy[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReqhotelroomsbusyEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataReqHotelRoomsBusy); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ReqHotelRoomsBusyDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataReqHotelRoomsBusy.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataReqHotelRoomsBusy(true);
	    };
	    
	    $scope.loadAllDataReqHotelRoomsBusy = function() {
	    	$servicesStorage.ReqHotelRoomsBusyDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqHotelRoomsBusy = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqHotelRoomsBusy = $scope.dataReqHotelRoomsBusy;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataReqHotelRoomsBusy = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqHotelRoomsBusyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqHotelRoomsBusy = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqHotelRoomsBusy = APP.uniqueArray($scope.dataReqHotelRoomsBusy.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqHotelRoomsBusy = $scope.dataReqHotelRoomsBusy;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredReqHotelRoomsBusy = $scope.dataReqHotelRoomsBusy.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ReqHotelRoomsBusyDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqHotelRoomsBusy(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqHotelRoomsBusy", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqHotelRoomsBusySelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataReqHotelRoomsBusy = new Array()
		, $scope.ctrl = {
				  name: 'ReqHotelRoomsBusySelectorCtrl'
				, original: 'ReqHotelRoomsBusy'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ReqHotelRoomsBusySelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataReqHotelRoomsBusy: new Object()
		  	})
		  	, $scope.dataReqHotelRoomsBusy = $scope.$storage.dataReqHotelRoomsBusy;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataReqHotelRoomsBusy = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqHotelRoomsBusyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqHotelRoomsBusy = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqHotelRoomsBusy = APP.uniqueArray($scope.dataReqHotelRoomsBusy.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqHotelRoomsBusy = $scope.dataReqHotelRoomsBusy;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqHotelRoomsBusy(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqHotelRoomsBusy", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqHotelRoomsBusyEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ReqHotelRoomsBusyEditCtrl'
			, original: 'ReqHotelRoomsBusy'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ReqHotelRoomsBusyEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemReqHotelRoomsBusy: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ReqHotelRoomsBusy', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ReqHotelRoomsBusyDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqhotelroomsbusyList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ReqHotelRoomsBusyDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqhotelroomsbusyList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ReqHotelRoomsBusyDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemReqHotelRoomsBusy = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ReqHotelRoomsBusy');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotelRoom = $scope.$storage.dataServHotelRoom;
			}
			$servicesStorage.ServHotelRoomDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotelRoom = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ReqHotelRoomsBusy", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ReqHotelRoomsBusy');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('ReqServHotelListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataReqServHotel = new Array()
			, $scope.ctrl = {
					  name: 'ReqServHotelListCtrl'
					, original: 'ReqServHotel'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reqservhotel' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ReqServHotelListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataReqServHotel: new Array()
			  	})
			  	, $scope.dataReqServHotel = $scope.$storage.dataReqServHotel;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReqservhotelEdit',
					controller: 'ReqServHotelEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reqservhotel' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ReqServHotelDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataReqServHotel.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReqservhotelCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReqservhotelEdit/' + itemId,
						controller: 'ReqServHotelEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reqservhotel' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataReqServHotel)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ReqServHotelDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataReqServHotel[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataReqServHotel[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReqservhotelEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataReqServHotel); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ReqServHotelDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataReqServHotel.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataReqServHotel(true);
	    };
	    
	    $scope.loadAllDataReqServHotel = function() {
	    	$servicesStorage.ReqServHotelDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqServHotel = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqServHotel = $scope.dataReqServHotel;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataReqServHotel = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqServHotelDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqServHotel = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqServHotel = APP.uniqueArray($scope.dataReqServHotel.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqServHotel = $scope.dataReqServHotel;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredReqServHotel = $scope.dataReqServHotel.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ReqServHotelDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqServHotel(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqServHotel", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqServHotelSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataReqServHotel = new Array()
		, $scope.ctrl = {
				  name: 'ReqServHotelSelectorCtrl'
				, original: 'ReqServHotel'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ReqServHotelSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataReqServHotel: new Object()
		  	})
		  	, $scope.dataReqServHotel = $scope.$storage.dataReqServHotel;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataReqServHotel = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqServHotelDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqServHotel = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqServHotel = APP.uniqueArray($scope.dataReqServHotel.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqServHotel = $scope.dataReqServHotel;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqServHotel(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqServHotel", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqServHotelEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ReqServHotelEditCtrl'
			, original: 'ReqServHotel'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ReqServHotelEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemReqServHotel: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ReqServHotel', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ReqServHotelDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqservhotelList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ReqServHotelDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqservhotelList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ReqServHotelDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemReqServHotel = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ReqServHotel');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByPaymentTypeId = $scope.$storage.dataDictGlobalByPaymentTypeId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByPaymentTypeId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByPaymentTypeId = $scope.dataDictGlobalByPaymentTypeId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByPlacementId = $scope.$storage.dataDictGlobalByPlacementId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByPlacementId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByPlacementId = $scope.dataDictGlobalByPlacementId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotelRoom = $scope.$storage.dataServHotelRoom;
			}
			$servicesStorage.ServHotelRoomDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotelRoom = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataUsersByRequestUserId = $scope.$storage.dataUsersByRequestUserId;
			}
			$servicesStorage.UsersDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataUsersByRequestUserId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataUsersByRequestUserId = $scope.dataUsersByRequestUserId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataUsersByResponseUserId = $scope.$storage.dataUsersByResponseUserId;
			}
			$servicesStorage.UsersDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataUsersByResponseUserId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataUsersByResponseUserId = $scope.dataUsersByResponseUserId;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ReqServHotel", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ReqServHotel');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelReqServHotelDocDocumentsForUser = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteldocdocumentsforuserEdit',
				controller: 'RelReqServHotelDocDocumentsForUserEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelReqServHotelDocDocumentsForUsers
							, editItemId: itemId
							, excludeList: [ 'reqservhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelReqServHotelTmContactEasy = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteltmcontacteasyEdit',
				controller: 'RelReqServHotelTmContactEasyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelReqServHotelTmContactEasies
							, editItemId: itemId
							, excludeList: [ 'reqservhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelReqServHotelDocDocumentsForHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteldocdocumentsforhotelEdit',
				controller: 'RelReqServHotelDocDocumentsForHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelReqServHotelDocDocumentsForHotels
							, editItemId: itemId
							, excludeList: [ 'reqservhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelReqServHotelDocDocumentsForUser = function () {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteldocdocumentsforuserFragmentMedit',
				controller: 'RelReqServHotelDocDocumentsForUserEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relreqservhoteldocdocumentsforusers' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				$scope.item.relReqServHotelDocDocumentsForUsers.push(item);
			}, function(){});
		};
		
		$scope.uploadRelReqServHotelDocDocumentsForUser = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadDocument',
				controller: 'UploadDocumentCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relreqservhoteldocdocumentsforusers' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relReqServHotelDocDocumentsForUsers = APP.checkDublicate(
						$scope.item.relReqServHotelDocDocumentsForUsers
					  , data.data[0]
					  , 'docdocuments'
					  , 'reqservhotel'
					  , $scope.item
				);
				
			}, function(){});
		};
		
		$scope.createModalItemRelReqServHotelTmContactEasy = function () {
			if(typeof $scope.item.relReqServHotelTmContactEasies == "undefined"){
				$scope.item.relReqServHotelTmContactEasies = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteltmcontacteasyEdit',
				controller: 'RelReqServHotelTmContactEasyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'reqservhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelReqServHotelTmContactEasy#item: ', item);
				}
				$scope.item.relReqServHotelTmContactEasies.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelReqServHotelDocDocumentsForHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteldocdocumentsforhotelFragmentMedit',
				controller: 'RelReqServHotelDocDocumentsForHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relreqservhoteldocdocumentsforhotels' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				$scope.item.relReqServHotelDocDocumentsForHotels.push(item);
			}, function(){});
		};
		
		$scope.uploadRelReqServHotelDocDocumentsForHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadDocument',
				controller: 'UploadDocumentCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relreqservhoteldocdocumentsforhotels' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relReqServHotelDocDocumentsForHotels = APP.checkDublicate(
						$scope.item.relReqServHotelDocDocumentsForHotels
					  , data.data[0]
					  , 'docdocuments'
					  , 'reqservhotel'
					  , $scope.item
				);
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelReqServHotelDocDocumentsForUser = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DocdocumentsFragmentSelector',
				controller: 'DocDocumentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relReqServHotelDocDocumentsForUsers = APP.checkDublicate(
							$scope.item.relReqServHotelDocDocumentsForUsers
						  , data.data
						  , 'docdocuments'
						  , 'reqservhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelReqServHotelTmContactEasy = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontacteasyFragmentSelector',
				controller: 'TmContactEasySelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relReqServHotelTmContactEasies = APP.checkDublicate(
							$scope.item.relReqServHotelTmContactEasies
						  , data.data
						  , 'tmcontacteasy'
						  , 'reqservhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelReqServHotelDocDocumentsForHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DocdocumentsFragmentSelector',
				controller: 'DocDocumentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relReqServHotelDocDocumentsForHotels = APP.checkDublicate(
							$scope.item.relReqServHotelDocDocumentsForHotels
						  , data.data
						  , 'docdocuments'
						  , 'reqservhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ReqServHotelRoomBusyListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataReqServHotelRoomBusy = new Array()
			, $scope.ctrl = {
					  name: 'ReqServHotelRoomBusyListCtrl'
					, original: 'ReqServHotelRoomBusy'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'reqservhotelroombusy' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ReqServHotelRoomBusyListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataReqServHotelRoomBusy: new Array()
			  	})
			  	, $scope.dataReqServHotelRoomBusy = $scope.$storage.dataReqServHotelRoomBusy;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ReqservhotelroombusyEdit',
					controller: 'ReqServHotelRoomBusyEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'reqservhotelroombusy' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ReqServHotelRoomBusyDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataReqServHotelRoomBusy.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ReqservhotelroombusyCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ReqservhotelroombusyEdit/' + itemId,
						controller: 'ReqServHotelRoomBusyEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'reqservhotelroombusy' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataReqServHotelRoomBusy)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ReqServHotelRoomBusyDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataReqServHotelRoomBusy[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataReqServHotelRoomBusy[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ReqservhotelroombusyEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataReqServHotelRoomBusy); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ReqServHotelRoomBusyDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataReqServHotelRoomBusy.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataReqServHotelRoomBusy(true);
	    };
	    
	    $scope.loadAllDataReqServHotelRoomBusy = function() {
	    	$servicesStorage.ReqServHotelRoomBusyDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqServHotelRoomBusy = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqServHotelRoomBusy = $scope.dataReqServHotelRoomBusy;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataReqServHotelRoomBusy = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqServHotelRoomBusyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqServHotelRoomBusy = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqServHotelRoomBusy = APP.uniqueArray($scope.dataReqServHotelRoomBusy.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqServHotelRoomBusy = $scope.dataReqServHotelRoomBusy;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredReqServHotelRoomBusy = $scope.dataReqServHotelRoomBusy.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ReqServHotelRoomBusyDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqServHotelRoomBusy(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqServHotelRoomBusy", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqServHotelRoomBusySelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataReqServHotelRoomBusy = new Array()
		, $scope.ctrl = {
				  name: 'ReqServHotelRoomBusySelectorCtrl'
				, original: 'ReqServHotelRoomBusy'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ReqServHotelRoomBusySelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataReqServHotelRoomBusy: new Object()
		  	})
		  	, $scope.dataReqServHotelRoomBusy = $scope.$storage.dataReqServHotelRoomBusy;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataReqServHotelRoomBusy = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ReqServHotelRoomBusyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataReqServHotelRoomBusy = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataReqServHotelRoomBusy = APP.uniqueArray($scope.dataReqServHotelRoomBusy.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataReqServHotelRoomBusy = $scope.dataReqServHotelRoomBusy;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataReqServHotelRoomBusy(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ReqServHotelRoomBusy", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ReqServHotelRoomBusyEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ReqServHotelRoomBusyEditCtrl'
			, original: 'ReqServHotelRoomBusy'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ReqServHotelRoomBusyEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemReqServHotelRoomBusy: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ReqServHotelRoomBusy', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ReqServHotelRoomBusyDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqservhotelroombusyList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ReqServHotelRoomBusyDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ReqservhotelroombusyList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ReqServHotelRoomBusyDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemReqServHotelRoomBusy = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ReqServHotelRoomBusy');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotelRoom = $scope.$storage.dataServHotelRoom;
			}
			$servicesStorage.ServHotelRoomDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotelRoom = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ReqServHotelRoomBusy", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ReqServHotelRoomBusy');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('ServCruiseListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServCruise = new Array()
			, $scope.ctrl = {
					  name: 'ServCruiseListCtrl'
					, original: 'ServCruise'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servcruise' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServCruiseListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServCruise: new Array()
			  	})
			  	, $scope.dataServCruise = $scope.$storage.dataServCruise;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServcruiseEdit',
					controller: 'ServCruiseEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servcruise' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServCruiseDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServCruise.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServcruiseCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServcruiseEdit/' + itemId,
						controller: 'ServCruiseEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servcruise' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServCruise)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServCruiseDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServCruise[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServCruise[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServcruiseEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServCruise); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServCruiseDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServCruise.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServCruise(true);
	    };
	    
	    $scope.loadAllDataServCruise = function() {
	    	$servicesStorage.ServCruiseDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServCruise = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServCruise = $scope.dataServCruise;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServCruise = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServCruiseDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServCruise = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServCruise = APP.uniqueArray($scope.dataServCruise.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServCruise = $scope.dataServCruise;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServCruise = $scope.dataServCruise.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServCruiseDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServCruise(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServCruise", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServCruiseSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServCruise = new Array()
		, $scope.ctrl = {
				  name: 'ServCruiseSelectorCtrl'
				, original: 'ServCruise'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServCruiseSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServCruise: new Object()
		  	})
		  	, $scope.dataServCruise = $scope.$storage.dataServCruise;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServCruise = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServCruiseDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServCruise = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServCruise = APP.uniqueArray($scope.dataServCruise.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServCruise = $scope.dataServCruise;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServCruise(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServCruise", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServCruiseEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServCruiseEditCtrl'
			, original: 'ServCruise'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServCruiseEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServCruise: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServCruise', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServCruiseDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServcruiseList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServCruiseDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServcruiseList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServCruiseDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServCruise = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServCruise');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServCruise", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServCruise');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemReqCruiseHotels = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruisehotelsEdit',
				controller: 'ReqCruiseHotelsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqCruiseHotelses
							, editItemId: itemId
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelCruiseDocs = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelcruisedocsEdit',
				controller: 'RelCruiseDocsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelCruiseDocses
							, editItemId: itemId
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqCruiseServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesEdit',
				controller: 'ReqCruiseServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqCruiseServiceses
							, editItemId: itemId
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelCruiseContacts = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelcruisecontactsEdit',
				controller: 'RelCruiseContactsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelCruiseContactses
							, editItemId: itemId
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemReqCruiseHotels = function () {
			if(typeof $scope.item.reqCruiseHotelses == "undefined"){
				$scope.item.reqCruiseHotelses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruisehotelsEdit',
				controller: 'ReqCruiseHotelsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqCruiseHotels#item: ', item);
				}
				$scope.item.reqCruiseHotelses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelCruiseDocs = function () {
			if(typeof $scope.item.relCruiseDocses == "undefined"){
				$scope.item.relCruiseDocses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelcruisedocsEdit',
				controller: 'RelCruiseDocsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelCruiseDocs#item: ', item);
				}
				$scope.item.relCruiseDocses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqCruiseServices = function () {
			if(typeof $scope.item.reqCruiseServiceses == "undefined"){
				$scope.item.reqCruiseServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesEdit',
				controller: 'ReqCruiseServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqCruiseServices#item: ', item);
				}
				$scope.item.reqCruiseServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelCruiseContacts = function () {
			if(typeof $scope.item.relCruiseContactses == "undefined"){
				$scope.item.relCruiseContactses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelcruisecontactsEdit',
				controller: 'RelCruiseContactsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servcruise' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelCruiseContacts#item: ', item);
				}
				$scope.item.relCruiseContactses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemReqCruiseHotels = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruisehotelsFragmentSelector',
				controller: 'ReqCruiseHotelsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqCruiseHotelses = APP.checkDublicate2(
							$scope.item.reqCruiseHotelses
						  , data.data
						  , 'ReqCruiseHotelsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelCruiseDocs = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DocdocumentsFragmentSelector',
				controller: 'DocDocumentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relCruiseDocses = APP.checkDublicate(
							$scope.item.relCruiseDocses
						  , data.data
						  , 'docdocuments'
						  , 'servcruise'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqCruiseServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruiseservicesFragmentSelector',
				controller: 'ReqCruiseServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqCruiseServiceses = APP.checkDublicate2(
							$scope.item.reqCruiseServiceses
						  , data.data
						  , 'ReqCruiseServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelCruiseContacts = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactFragmentSelector',
				controller: 'TmContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relCruiseContactses = APP.checkDublicate(
							$scope.item.relCruiseContactses
						  , data.data
						  , 'tmcontact'
						  , 'servcruise'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServExcursionsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServExcursions = new Array()
			, $scope.ctrl = {
					  name: 'ServExcursionsListCtrl'
					, original: 'ServExcursions'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servexcursions' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServExcursionsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServExcursions: new Array()
			  	})
			  	, $scope.dataServExcursions = $scope.$storage.dataServExcursions;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServexcursionsEdit',
					controller: 'ServExcursionsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servexcursions' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServExcursionsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServExcursions.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServexcursionsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServexcursionsEdit/' + itemId,
						controller: 'ServExcursionsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servexcursions' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServExcursions)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServExcursionsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServExcursions[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServExcursions[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServexcursionsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServExcursions); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServExcursionsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServExcursions.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServExcursions(true);
	    };
	    
	    $scope.loadAllDataServExcursions = function() {
	    	$servicesStorage.ServExcursionsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServExcursions = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServExcursions = $scope.dataServExcursions;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServExcursions = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServExcursionsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServExcursions = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServExcursions = APP.uniqueArray($scope.dataServExcursions.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServExcursions = $scope.dataServExcursions;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServExcursions = $scope.dataServExcursions.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServExcursionsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServExcursions(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServExcursions", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServExcursionsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServExcursions = new Array()
		, $scope.ctrl = {
				  name: 'ServExcursionsSelectorCtrl'
				, original: 'ServExcursions'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServExcursionsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServExcursions: new Object()
		  	})
		  	, $scope.dataServExcursions = $scope.$storage.dataServExcursions;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServExcursions = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServExcursionsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServExcursions = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServExcursions = APP.uniqueArray($scope.dataServExcursions.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServExcursions = $scope.dataServExcursions;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServExcursions(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServExcursions", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServExcursionsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServExcursionsEditCtrl'
			, original: 'ServExcursions'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServExcursionsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServExcursions: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServExcursions', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServExcursionsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServexcursionsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServExcursionsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServexcursionsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServExcursionsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServExcursions = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServExcursions');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			$servicesStorage.LocationCitiesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCities = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCities = $scope.dataLocationCities;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServExcursions", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServExcursions');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servexcursions' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servexcursions' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServGiftsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServGifts = new Array()
			, $scope.ctrl = {
					  name: 'ServGiftsListCtrl'
					, original: 'ServGifts'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servgifts' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServGiftsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServGifts: new Array()
			  	})
			  	, $scope.dataServGifts = $scope.$storage.dataServGifts;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServgiftsEdit',
					controller: 'ServGiftsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servgifts' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServGiftsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServGifts.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServgiftsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServgiftsEdit/' + itemId,
						controller: 'ServGiftsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servgifts' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServGifts)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServGiftsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServGifts[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServGifts[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServgiftsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServGifts); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServGiftsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServGifts.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServGifts(true);
	    };
	    
	    $scope.loadAllDataServGifts = function() {
	    	$servicesStorage.ServGiftsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServGifts = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServGifts = $scope.dataServGifts;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServGifts = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServGiftsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServGifts = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServGifts = APP.uniqueArray($scope.dataServGifts.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServGifts = $scope.dataServGifts;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServGifts = $scope.dataServGifts.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServGiftsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServGifts(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServGifts", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServGiftsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServGifts = new Array()
		, $scope.ctrl = {
				  name: 'ServGiftsSelectorCtrl'
				, original: 'ServGifts'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServGiftsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServGifts: new Object()
		  	})
		  	, $scope.dataServGifts = $scope.$storage.dataServGifts;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServGifts = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServGiftsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServGifts = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServGifts = APP.uniqueArray($scope.dataServGifts.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServGifts = $scope.dataServGifts;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServGifts(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServGifts", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServGiftsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServGiftsEditCtrl'
			, original: 'ServGifts'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServGiftsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServGifts: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServGifts', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServGiftsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServgiftsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServGiftsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServgiftsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServGiftsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServGifts = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServGifts');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServGifts", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServGifts');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelTmOrderServGifts = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderservgiftsEdit',
				controller: 'RelTmOrderServGiftsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTmOrderServGiftses
							, editItemId: itemId
							, excludeList: [ 'servgifts' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servgifts' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelTmOrderServGifts = function () {
			if(typeof $scope.item.relTmOrderServGiftses == "undefined"){
				$scope.item.relTmOrderServGiftses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderservgiftsEdit',
				controller: 'RelTmOrderServGiftsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servgifts' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTmOrderServGifts#item: ', item);
				}
				$scope.item.relTmOrderServGiftses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servgifts' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelTmOrderServGifts = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderFragmentSelector',
				controller: 'TmOrderSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTmOrderServGiftses = APP.checkDublicate(
							$scope.item.relTmOrderServGiftses
						  , data.data
						  , 'tmorder'
						  , 'servgifts'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServHotelListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServHotel = new Array()
			, $scope.ctrl = {
					  name: 'ServHotelListCtrl'
					, original: 'ServHotel'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servhotel' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServHotelListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServHotel: new Array()
			  	})
			  	, $scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServhotelEdit',
					controller: 'ServHotelEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servhotel' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServHotelDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServHotel.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServhotelCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServhotelEdit/' + itemId,
						controller: 'ServHotelEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servhotel' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServHotel)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServHotelDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServHotel[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServHotel[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServhotelEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServHotel); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServHotelDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServHotel.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServHotel(true);
	    };
	    
	    $scope.loadAllDataServHotel = function() {
	    	$servicesStorage.ServHotelDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotel = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotel = $scope.dataServHotel;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServHotel = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServHotelDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServHotel = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotel = APP.uniqueArray($scope.dataServHotel.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotel = $scope.dataServHotel;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServHotel = $scope.dataServHotel.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServHotelDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServHotel(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServHotel", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServHotelSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServHotel = new Array()
		, $scope.ctrl = {
				  name: 'ServHotelSelectorCtrl'
				, original: 'ServHotel'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServHotelSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServHotel: new Object()
		  	})
		  	, $scope.dataServHotel = $scope.$storage.dataServHotel;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServHotel = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServHotelDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServHotel = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotel = APP.uniqueArray($scope.dataServHotel.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotel = $scope.dataServHotel;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServHotel(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServHotel", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServHotelEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServHotelEditCtrl'
			, original: 'ServHotel'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServHotelEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServHotel: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServHotel', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServHotelDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServhotelList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServHotelDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServhotelList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServHotelDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServHotel = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServHotel');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByServiceidId = $scope.$storage.dataDictGlobalByServiceidId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByServiceidId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByServiceidId = $scope.dataDictGlobalByServiceidId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByReserveticketstypeId = $scope.$storage.dataDictGlobalByReserveticketstypeId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByReserveticketstypeId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByReserveticketstypeId = $scope.dataDictGlobalByReserveticketstypeId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByPlacementId = $scope.$storage.dataDictGlobalByPlacementId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByPlacementId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByPlacementId = $scope.dataDictGlobalByPlacementId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByTypeId = $scope.$storage.dataDictGlobalByTypeId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByTypeId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByTypeId = $scope.dataDictGlobalByTypeId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByCategoryId = $scope.$storage.dataDictGlobalByCategoryId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByCategoryId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByCategoryId = $scope.dataDictGlobalByCategoryId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByQualityId = $scope.$storage.dataDictGlobalByQualityId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByQualityId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByQualityId = $scope.dataDictGlobalByQualityId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataInfoContactInformation = $scope.$storage.dataInfoContactInformation;
			}
			$servicesStorage.InfoContactInformationDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataInfoContactInformation = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataInfoContactInformation = $scope.dataInfoContactInformation;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationAddress = $scope.$storage.dataLocationAddress;
			}
			$servicesStorage.LocationAddressDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationAddress = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationAddress = $scope.dataLocationAddress;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			$servicesStorage.LocationCitiesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCities = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCities = $scope.dataLocationCities;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationTypePlacement = $scope.$storage.dataLocationTypePlacement;
			}
			$servicesStorage.LocationTypePlacementDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationTypePlacement = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationTypePlacement = $scope.dataLocationTypePlacement;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataPaymentDetails = $scope.$storage.dataPaymentDetails;
			}
			$servicesStorage.PaymentDetailsDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataPaymentDetails = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataPaymentDetails = $scope.dataPaymentDetails;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServHotel", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServHotel');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelTourHotels = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltourhotelsEdit',
				controller: 'RelTourHotelsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTourHotelses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelDocDocuments = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhoteldocdocumentsEdit',
				controller: 'RelServHotelDocDocumentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelDocDocumentses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotelRoom = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomEdit',
				controller: 'ServHotelRoomEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotelRooms
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqCruiseHotels = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruisehotelsEdit',
				controller: 'ReqCruiseHotelsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqCruiseHotelses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmIncidents = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmIncidentses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelServKidsRule = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelservkidsruleEdit',
				controller: 'RelServHotelServKidsRuleEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelServKidsRules
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelCreditCards = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelcreditcardsEdit',
				controller: 'RelServHotelCreditCardsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelCreditCardses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelInfoHotelServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfohotelservicesEdit',
				controller: 'RelServHotelInfoHotelServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelInfoHotelServiceses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelInfoPolicies = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfopoliciesEdit',
				controller: 'RelServHotelInfoPoliciesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelInfoPolicieses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelImage = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelimageEdit',
				controller: 'RelServHotelImageEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelImages
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqServHotels
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelInfoCommercial = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfocommercialEdit',
				controller: 'RelServHotelInfoCommercialEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelInfoCommercials
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelEntertainmentAndSport = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelentertainmentandsportEdit',
				controller: 'RelServHotelEntertainmentAndSportEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelEntertainmentAndSports
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelFeatures = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelfeaturesEdit',
				controller: 'RelServHotelFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelFeatureses
							, editItemId: itemId
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelTourHotels = function () {
			if(typeof $scope.item.relTourHotelses == "undefined"){
				$scope.item.relTourHotelses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltourhotelsEdit',
				controller: 'RelTourHotelsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTourHotels#item: ', item);
				}
				$scope.item.relTourHotelses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhoteldocdocumentsFragmentMedit',
				controller: 'RelServHotelDocDocumentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relservhoteldocdocumentses' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				$scope.item.relServHotelDocDocumentses.push(item);
			}, function(){});
		};
		
		$scope.uploadRelServHotelDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadDocument',
				controller: 'UploadDocumentCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relservhoteldocdocumentses' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relServHotelDocDocumentses = APP.checkDublicate(
						$scope.item.relServHotelDocDocumentses
					  , data.data[0]
					  , 'docdocuments'
					  , 'servhotel'
					  , $scope.item
				);
				
			}, function(){});
		};
		
		$scope.createModalItemServHotelRoom = function () {
			if(typeof $scope.item.servHotelRooms == "undefined"){
				$scope.item.servHotelRooms = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomEdit',
				controller: 'ServHotelRoomEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotelRoom#item: ', item);
				}
				$scope.item.servHotelRooms.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqCruiseHotels = function () {
			if(typeof $scope.item.reqCruiseHotelses == "undefined"){
				$scope.item.reqCruiseHotelses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruisehotelsEdit',
				controller: 'ReqCruiseHotelsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqCruiseHotels#item: ', item);
				}
				$scope.item.reqCruiseHotelses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmIncidents = function () {
			if(typeof $scope.item.tmIncidentses == "undefined"){
				$scope.item.tmIncidentses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmIncidents#item: ', item);
				}
				$scope.item.tmIncidentses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelServKidsRule = function () {
			if(typeof $scope.item.relServHotelServKidsRules == "undefined"){
				$scope.item.relServHotelServKidsRules = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelservkidsruleEdit',
				controller: 'RelServHotelServKidsRuleEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelServKidsRule#item: ', item);
				}
				$scope.item.relServHotelServKidsRules.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelCreditCards = function () {
			if(typeof $scope.item.relServHotelCreditCardses == "undefined"){
				$scope.item.relServHotelCreditCardses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelcreditcardsEdit',
				controller: 'RelServHotelCreditCardsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelCreditCards#item: ', item);
				}
				$scope.item.relServHotelCreditCardses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelInfoHotelServices = function () {
			if(typeof $scope.item.relServHotelInfoHotelServiceses == "undefined"){
				$scope.item.relServHotelInfoHotelServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfohotelservicesEdit',
				controller: 'RelServHotelInfoHotelServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelInfoHotelServices#item: ', item);
				}
				$scope.item.relServHotelInfoHotelServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelInfoPolicies = function () {
			if(typeof $scope.item.relServHotelInfoPolicieses == "undefined"){
				$scope.item.relServHotelInfoPolicieses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfopoliciesEdit',
				controller: 'RelServHotelInfoPoliciesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelInfoPolicies#item: ', item);
				}
				$scope.item.relServHotelInfoPolicieses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelImage = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadImage',
				controller: 'UploadImageCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relservhotelimages' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relServHotelImages = APP.checkDublicate(
						$scope.item.relServHotelImages
					  , data.data
					  , 'image'
					  , 'servhotel'
					  , $scope.item
				);
				
			}, function(){});
		};
		
				$scope.createModalItemReqServHotel = function () {
			if(typeof $scope.item.reqServHotels == "undefined"){
				$scope.item.reqServHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqServHotel#item: ', item);
				}
				$scope.item.reqServHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelInfoCommercial = function () {
			if(typeof $scope.item.relServHotelInfoCommercials == "undefined"){
				$scope.item.relServHotelInfoCommercials = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfocommercialEdit',
				controller: 'RelServHotelInfoCommercialEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelInfoCommercial#item: ', item);
				}
				$scope.item.relServHotelInfoCommercials.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelEntertainmentAndSport = function () {
			if(typeof $scope.item.relServHotelEntertainmentAndSports == "undefined"){
				$scope.item.relServHotelEntertainmentAndSports = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelentertainmentandsportEdit',
				controller: 'RelServHotelEntertainmentAndSportEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelEntertainmentAndSport#item: ', item);
				}
				$scope.item.relServHotelEntertainmentAndSports.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelFeatures = function () {
			if(typeof $scope.item.relServHotelFeatureses == "undefined"){
				$scope.item.relServHotelFeatureses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelfeaturesEdit',
				controller: 'RelServHotelFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotel' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelFeatures#item: ', item);
				}
				$scope.item.relServHotelFeatureses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelTourHotels = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourFragmentSelector',
				controller: 'ServTourSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTourHotelses = APP.checkDublicate(
							$scope.item.relTourHotelses
						  , data.data
						  , 'servtour'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DocdocumentsFragmentSelector',
				controller: 'DocDocumentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelDocDocumentses = APP.checkDublicate(
							$scope.item.relServHotelDocDocumentses
						  , data.data
						  , 'docdocuments'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotelRoom = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomFragmentSelector',
				controller: 'ServHotelRoomSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotelRooms = APP.checkDublicate2(
							$scope.item.servHotelRooms
						  , data.data
						  , 'ServHotelRoomView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqCruiseHotels = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqcruisehotelsFragmentSelector',
				controller: 'ReqCruiseHotelsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqCruiseHotelses = APP.checkDublicate2(
							$scope.item.reqCruiseHotelses
						  , data.data
						  , 'ReqCruiseHotelsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmIncidents = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsFragmentSelector',
				controller: 'TmIncidentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmIncidentses = APP.checkDublicate2(
							$scope.item.tmIncidentses
						  , data.data
						  , 'TmIncidentsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelServKidsRule = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServkidsruleFragmentSelector',
				controller: 'ServKidsRuleSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelServKidsRules = APP.checkDublicate(
							$scope.item.relServHotelServKidsRules
						  , data.data
						  , 'servkidsrule'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelCreditCards = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DictglobalFragmentSelector',
				controller: 'DictGlobalSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelCreditCardses = APP.checkDublicate(
							$scope.item.relServHotelCreditCardses
						  , data.data
						  , 'dictglobal'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelInfoHotelServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'FragmentSelector',
				controller: 'SelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelInfoHotelServiceses = APP.checkDublicate(
							$scope.item.relServHotelInfoHotelServiceses
						  , data.data
						  , ''
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelInfoPolicies = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmpoliciesFragmentSelector',
				controller: 'TmPoliciesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelInfoPolicieses = APP.checkDublicate(
							$scope.item.relServHotelInfoPolicieses
						  , data.data
						  , 'tmpolicies'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelImage = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmimageFragmentSelector',
				controller: 'TmImageSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelImages = APP.checkDublicate(
							$scope.item.relServHotelImages
						  , data.data
						  , 'tmimage'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqServHotels = APP.checkDublicate2(
							$scope.item.reqServHotels
						  , data.data
						  , 'ReqServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelInfoCommercial = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcommercialFragmentSelector',
				controller: 'TmCommercialSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelInfoCommercials = APP.checkDublicate(
							$scope.item.relServHotelInfoCommercials
						  , data.data
						  , 'tmcommercial'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelEntertainmentAndSport = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DictglobalFragmentSelector',
				controller: 'DictGlobalSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelEntertainmentAndSports = APP.checkDublicate(
							$scope.item.relServHotelEntertainmentAndSports
						  , data.data
						  , 'dictglobal'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelFeatures = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DictglobalFragmentSelector',
				controller: 'DictGlobalSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelFeatureses = APP.checkDublicate(
							$scope.item.relServHotelFeatureses
						  , data.data
						  , 'dictglobal'
						  , 'servhotel'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServHotelRoomListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServHotelRoom = new Array()
			, $scope.ctrl = {
					  name: 'ServHotelRoomListCtrl'
					, original: 'ServHotelRoom'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servhotelroom' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServHotelRoomListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServHotelRoom: new Array()
			  	})
			  	, $scope.dataServHotelRoom = $scope.$storage.dataServHotelRoom;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServhotelroomEdit',
					controller: 'ServHotelRoomEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servhotelroom' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServHotelRoomDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServHotelRoom.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServhotelroomCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServhotelroomEdit/' + itemId,
						controller: 'ServHotelRoomEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servhotelroom' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServHotelRoom)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServHotelRoomDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServHotelRoom[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServHotelRoom[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServhotelroomEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServHotelRoom); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServHotelRoomDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServHotelRoom.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServHotelRoom(true);
	    };
	    
	    $scope.loadAllDataServHotelRoom = function() {
	    	$servicesStorage.ServHotelRoomDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotelRoom = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServHotelRoom = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServHotelRoomDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServHotelRoom = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotelRoom = APP.uniqueArray($scope.dataServHotelRoom.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServHotelRoom = $scope.dataServHotelRoom.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServHotelRoomDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServHotelRoom(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServHotelRoom", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServHotelRoomSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServHotelRoom = new Array()
		, $scope.ctrl = {
				  name: 'ServHotelRoomSelectorCtrl'
				, original: 'ServHotelRoom'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServHotelRoomSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServHotelRoom: new Object()
		  	})
		  	, $scope.dataServHotelRoom = $scope.$storage.dataServHotelRoom;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServHotelRoom = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServHotelRoomDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServHotelRoom = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotelRoom = APP.uniqueArray($scope.dataServHotelRoom.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotelRoom = $scope.dataServHotelRoom;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServHotelRoom(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServHotelRoom", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServHotelRoomEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServHotelRoomEditCtrl'
			, original: 'ServHotelRoom'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServHotelRoomEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServHotelRoom: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServHotelRoom', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServHotelRoomDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServhotelroomList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServHotelRoomDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServhotelroomList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServHotelRoomDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServHotelRoom = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServHotelRoom');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByFoodId = $scope.$storage.dataDictGlobalByFoodId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByFoodId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByFoodId = $scope.dataDictGlobalByFoodId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByRoomTypeId = $scope.$storage.dataDictGlobalByRoomTypeId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByRoomTypeId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByRoomTypeId = $scope.dataDictGlobalByRoomTypeId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataGroupGlobal = $scope.$storage.dataGroupGlobal;
			}
			$servicesStorage.GroupGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataGroupGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataGroupGlobal = $scope.dataGroupGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServHotelRoom", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServHotelRoom');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelServHotelRoomFeatures = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelroomfeaturesEdit',
				controller: 'RelServHotelRoomFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelRoomFeatureses
							, editItemId: itemId
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqServHotelRoomBusy = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelroombusyEdit',
				controller: 'ReqServHotelRoomBusyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqServHotelRoomBusies
							, editItemId: itemId
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqServHotels
							, editItemId: itemId
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelRoomImage = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelroomimageEdit',
				controller: 'RelServHotelRoomImageEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelRoomImages
							, editItemId: itemId
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqHotelRoomsBusy = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqhotelroomsbusyEdit',
				controller: 'ReqHotelRoomsBusyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqHotelRoomsBusies
							, editItemId: itemId
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentTariff = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymenttariffEdit',
				controller: 'PaymentTariffEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentTariffs
							, editItemId: itemId
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelServHotelRoomFeatures = function () {
			if(typeof $scope.item.relServHotelRoomFeatureses == "undefined"){
				$scope.item.relServHotelRoomFeatureses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelroomfeaturesEdit',
				controller: 'RelServHotelRoomFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelRoomFeatures#item: ', item);
				}
				$scope.item.relServHotelRoomFeatureses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqServHotelRoomBusy = function () {
			if(typeof $scope.item.reqServHotelRoomBusies == "undefined"){
				$scope.item.reqServHotelRoomBusies = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelroombusyEdit',
				controller: 'ReqServHotelRoomBusyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqServHotelRoomBusy#item: ', item);
				}
				$scope.item.reqServHotelRoomBusies.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqServHotel = function () {
			if(typeof $scope.item.reqServHotels == "undefined"){
				$scope.item.reqServHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqServHotel#item: ', item);
				}
				$scope.item.reqServHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelRoomImage = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadImage',
				controller: 'UploadImageCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relservhotelroomimages' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relServHotelRoomImages = APP.checkDublicate(
						$scope.item.relServHotelRoomImages
					  , data.data
					  , 'image'
					  , 'servhotelroom'
					  , $scope.item
				);
				
			}, function(){});
		};
		
				$scope.createModalItemReqHotelRoomsBusy = function () {
			if(typeof $scope.item.reqHotelRoomsBusies == "undefined"){
				$scope.item.reqHotelRoomsBusies = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqhotelroomsbusyEdit',
				controller: 'ReqHotelRoomsBusyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqHotelRoomsBusy#item: ', item);
				}
				$scope.item.reqHotelRoomsBusies.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentTariff = function () {
			if(typeof $scope.item.paymentTariffs == "undefined"){
				$scope.item.paymentTariffs = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymenttariffEdit',
				controller: 'PaymentTariffEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotelroom' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentTariff#item: ', item);
				}
				$scope.item.paymentTariffs.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelServHotelRoomFeatures = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DictglobalFragmentSelector',
				controller: 'DictGlobalSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelRoomFeatureses = APP.checkDublicate(
							$scope.item.relServHotelRoomFeatureses
						  , data.data
						  , 'dictglobal'
						  , 'servhotelroom'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqServHotelRoomBusy = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelroombusyFragmentSelector',
				controller: 'ReqServHotelRoomBusySelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqServHotelRoomBusies = APP.checkDublicate2(
							$scope.item.reqServHotelRoomBusies
						  , data.data
						  , 'ReqServHotelRoomBusyView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqServHotels = APP.checkDublicate2(
							$scope.item.reqServHotels
						  , data.data
						  , 'ReqServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelRoomImage = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmimageFragmentSelector',
				controller: 'TmImageSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelRoomImages = APP.checkDublicate(
							$scope.item.relServHotelRoomImages
						  , data.data
						  , 'tmimage'
						  , 'servhotelroom'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqHotelRoomsBusy = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqhotelroomsbusyFragmentSelector',
				controller: 'ReqHotelRoomsBusySelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqHotelRoomsBusies = APP.checkDublicate2(
							$scope.item.reqHotelRoomsBusies
						  , data.data
						  , 'ReqHotelRoomsBusyView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentTariff = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymenttariffFragmentSelector',
				controller: 'PaymentTariffSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentTariffs = APP.checkDublicate2(
							$scope.item.paymentTariffs
						  , data.data
						  , 'PaymentTariffView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServHotelServicesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServHotelServices = new Array()
			, $scope.ctrl = {
					  name: 'ServHotelServicesListCtrl'
					, original: 'ServHotelServices'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servhotelservices' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServHotelServicesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServHotelServices: new Array()
			  	})
			  	, $scope.dataServHotelServices = $scope.$storage.dataServHotelServices;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServhotelservicesEdit',
					controller: 'ServHotelServicesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servhotelservices' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServHotelServicesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServHotelServices.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServhotelservicesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServhotelservicesEdit/' + itemId,
						controller: 'ServHotelServicesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servhotelservices' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServHotelServices)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServHotelServicesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServHotelServices[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServHotelServices[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServhotelservicesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServHotelServices); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServHotelServicesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServHotelServices.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServHotelServices(true);
	    };
	    
	    $scope.loadAllDataServHotelServices = function() {
	    	$servicesStorage.ServHotelServicesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotelServices = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotelServices = $scope.dataServHotelServices;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServHotelServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServHotelServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServHotelServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotelServices = APP.uniqueArray($scope.dataServHotelServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotelServices = $scope.dataServHotelServices;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServHotelServices = $scope.dataServHotelServices.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServHotelServicesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServHotelServices(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServHotelServices", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServHotelServicesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServHotelServices = new Array()
		, $scope.ctrl = {
				  name: 'ServHotelServicesSelectorCtrl'
				, original: 'ServHotelServices'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServHotelServicesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServHotelServices: new Object()
		  	})
		  	, $scope.dataServHotelServices = $scope.$storage.dataServHotelServices;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServHotelServices = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServHotelServicesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServHotelServices = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServHotelServices = APP.uniqueArray($scope.dataServHotelServices.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServHotelServices = $scope.dataServHotelServices;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServHotelServices(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServHotelServices", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServHotelServicesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServHotelServicesEditCtrl'
			, original: 'ServHotelServices'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServHotelServicesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServHotelServices: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServHotelServices', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServHotelServicesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServhotelservicesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServHotelServicesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServhotelservicesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServHotelServicesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServHotelServices = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServHotelServices');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByFeatureId = $scope.$storage.dataDictGlobalByFeatureId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByFeatureId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByFeatureId = $scope.dataDictGlobalByFeatureId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByServiceId = $scope.$storage.dataDictGlobalByServiceId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByServiceId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByServiceId = $scope.dataDictGlobalByServiceId;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServHotelServices", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServHotelServices');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelServHotelInfoHotelServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfohotelservicesEdit',
				controller: 'RelServHotelInfoHotelServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelInfoHotelServiceses
							, editItemId: itemId
							, excludeList: [ 'servhotelservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelServHotelInfoHotelServices = function () {
			if(typeof $scope.item.relServHotelInfoHotelServiceses == "undefined"){
				$scope.item.relServHotelInfoHotelServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfohotelservicesEdit',
				controller: 'RelServHotelInfoHotelServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servhotelservices' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelInfoHotelServices#item: ', item);
				}
				$scope.item.relServHotelInfoHotelServiceses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelServHotelInfoHotelServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelInfoHotelServiceses = APP.checkDublicate(
							$scope.item.relServHotelInfoHotelServiceses
						  , data.data
						  , 'servhotel'
						  , 'servhotelservices'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServInsurancesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServInsurances = new Array()
			, $scope.ctrl = {
					  name: 'ServInsurancesListCtrl'
					, original: 'ServInsurances'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servinsurances' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServInsurancesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServInsurances: new Array()
			  	})
			  	, $scope.dataServInsurances = $scope.$storage.dataServInsurances;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServinsurancesEdit',
					controller: 'ServInsurancesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servinsurances' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServInsurancesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServInsurances.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServinsurancesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServinsurancesEdit/' + itemId,
						controller: 'ServInsurancesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servinsurances' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServInsurances)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServInsurancesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServInsurances[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServInsurances[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServinsurancesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServInsurances); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServInsurancesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServInsurances.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServInsurances(true);
	    };
	    
	    $scope.loadAllDataServInsurances = function() {
	    	$servicesStorage.ServInsurancesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServInsurances = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServInsurances = $scope.dataServInsurances;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServInsurances = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServInsurancesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServInsurances = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServInsurances = APP.uniqueArray($scope.dataServInsurances.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServInsurances = $scope.dataServInsurances;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServInsurances = $scope.dataServInsurances.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServInsurancesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServInsurances(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServInsurances", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServInsurancesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServInsurances = new Array()
		, $scope.ctrl = {
				  name: 'ServInsurancesSelectorCtrl'
				, original: 'ServInsurances'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServInsurancesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServInsurances: new Object()
		  	})
		  	, $scope.dataServInsurances = $scope.$storage.dataServInsurances;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServInsurances = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServInsurancesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServInsurances = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServInsurances = APP.uniqueArray($scope.dataServInsurances.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServInsurances = $scope.dataServInsurances;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServInsurances(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServInsurances", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServInsurancesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServInsurancesEditCtrl'
			, original: 'ServInsurances'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServInsurancesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServInsurances: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServInsurances', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServInsurancesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServinsurancesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServInsurancesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServinsurancesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServInsurancesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServInsurances = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServInsurances');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccountByAccountId = $scope.$storage.dataTmAccountByAccountId;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccountByAccountId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccountByAccountId = $scope.dataTmAccountByAccountId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccountByInsAccountId = $scope.$storage.dataTmAccountByInsAccountId;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccountByInsAccountId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccountByInsAccountId = $scope.dataTmAccountByInsAccountId;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServInsurances", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServInsurances');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servinsurances' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servinsurances' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServKidsRuleListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServKidsRule = new Array()
			, $scope.ctrl = {
					  name: 'ServKidsRuleListCtrl'
					, original: 'ServKidsRule'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servkidsrule' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServKidsRuleListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServKidsRule: new Array()
			  	})
			  	, $scope.dataServKidsRule = $scope.$storage.dataServKidsRule;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServkidsruleEdit',
					controller: 'ServKidsRuleEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servkidsrule' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServKidsRuleDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServKidsRule.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServkidsruleCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServkidsruleEdit/' + itemId,
						controller: 'ServKidsRuleEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servkidsrule' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServKidsRule)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServKidsRuleDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServKidsRule[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServKidsRule[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServkidsruleEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServKidsRule); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServKidsRuleDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServKidsRule.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServKidsRule(true);
	    };
	    
	    $scope.loadAllDataServKidsRule = function() {
	    	$servicesStorage.ServKidsRuleDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServKidsRule = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServKidsRule = $scope.dataServKidsRule;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServKidsRule = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServKidsRuleDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServKidsRule = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServKidsRule = APP.uniqueArray($scope.dataServKidsRule.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServKidsRule = $scope.dataServKidsRule;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServKidsRule = $scope.dataServKidsRule.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServKidsRuleDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServKidsRule(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServKidsRule", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServKidsRuleSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServKidsRule = new Array()
		, $scope.ctrl = {
				  name: 'ServKidsRuleSelectorCtrl'
				, original: 'ServKidsRule'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServKidsRuleSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServKidsRule: new Object()
		  	})
		  	, $scope.dataServKidsRule = $scope.$storage.dataServKidsRule;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServKidsRule = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServKidsRuleDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServKidsRule = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServKidsRule = APP.uniqueArray($scope.dataServKidsRule.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServKidsRule = $scope.dataServKidsRule;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServKidsRule(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServKidsRule", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServKidsRuleEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServKidsRuleEditCtrl'
			, original: 'ServKidsRule'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServKidsRuleEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServKidsRule: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServKidsRule', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServKidsRuleDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServkidsruleList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServKidsRuleDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServkidsruleList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServKidsRuleDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServKidsRule = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServKidsRule');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServKidsRule", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServKidsRule');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelServKidsRuleFeatures = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservkidsrulefeaturesEdit',
				controller: 'RelServKidsRuleFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServKidsRuleFeatureses
							, editItemId: itemId
							, excludeList: [ 'servkidsrule' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelServKidsRule = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelservkidsruleEdit',
				controller: 'RelServHotelServKidsRuleEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelServKidsRules
							, editItemId: itemId
							, excludeList: [ 'servkidsrule' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelServKidsRuleFeatures = function () {
			if(typeof $scope.item.relServKidsRuleFeatureses == "undefined"){
				$scope.item.relServKidsRuleFeatureses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservkidsrulefeaturesEdit',
				controller: 'RelServKidsRuleFeaturesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servkidsrule' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServKidsRuleFeatures#item: ', item);
				}
				$scope.item.relServKidsRuleFeatureses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServHotelServKidsRule = function () {
			if(typeof $scope.item.relServHotelServKidsRules == "undefined"){
				$scope.item.relServHotelServKidsRules = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelservkidsruleEdit',
				controller: 'RelServHotelServKidsRuleEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servkidsrule' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelServKidsRule#item: ', item);
				}
				$scope.item.relServHotelServKidsRules.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelServKidsRuleFeatures = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DictglobalFragmentSelector',
				controller: 'DictGlobalSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServKidsRuleFeatureses = APP.checkDublicate(
							$scope.item.relServKidsRuleFeatureses
						  , data.data
						  , 'dictglobal'
						  , 'servkidsrule'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelServKidsRule = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelServKidsRules = APP.checkDublicate(
							$scope.item.relServHotelServKidsRules
						  , data.data
						  , 'servhotel'
						  , 'servkidsrule'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServTicketsAirListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServTicketsAir = new Array()
			, $scope.ctrl = {
					  name: 'ServTicketsAirListCtrl'
					, original: 'ServTicketsAir'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servticketsair' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServTicketsAirListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServTicketsAir: new Array()
			  	})
			  	, $scope.dataServTicketsAir = $scope.$storage.dataServTicketsAir;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServticketsairEdit',
					controller: 'ServTicketsAirEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servticketsair' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServTicketsAirDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServTicketsAir.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServticketsairCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServticketsairEdit/' + itemId,
						controller: 'ServTicketsAirEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servticketsair' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServTicketsAir)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServTicketsAirDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServTicketsAir[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServTicketsAir[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServticketsairEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServTicketsAir); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServTicketsAirDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServTicketsAir.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServTicketsAir(true);
	    };
	    
	    $scope.loadAllDataServTicketsAir = function() {
	    	$servicesStorage.ServTicketsAirDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTicketsAir = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTicketsAir = $scope.dataServTicketsAir;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServTicketsAir = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTicketsAirDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTicketsAir = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTicketsAir = APP.uniqueArray($scope.dataServTicketsAir.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTicketsAir = $scope.dataServTicketsAir;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServTicketsAir = $scope.dataServTicketsAir.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServTicketsAirDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTicketsAir(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTicketsAir", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTicketsAirSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServTicketsAir = new Array()
		, $scope.ctrl = {
				  name: 'ServTicketsAirSelectorCtrl'
				, original: 'ServTicketsAir'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServTicketsAirSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServTicketsAir: new Object()
		  	})
		  	, $scope.dataServTicketsAir = $scope.$storage.dataServTicketsAir;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServTicketsAir = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTicketsAirDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTicketsAir = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTicketsAir = APP.uniqueArray($scope.dataServTicketsAir.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTicketsAir = $scope.dataServTicketsAir;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTicketsAir(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTicketsAir", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTicketsAirEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServTicketsAirEditCtrl'
			, original: 'ServTicketsAir'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServTicketsAirEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServTicketsAir: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServTicketsAir', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServTicketsAirDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServticketsairList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServTicketsAirDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServticketsairList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServTicketsAirDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServTicketsAir = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServTicketsAir');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByTypePlaneDepId = $scope.$storage.dataDictGlobalByTypePlaneDepId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByTypePlaneDepId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByTypePlaneDepId = $scope.dataDictGlobalByTypePlaneDepId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByTypePlaneArrivalId = $scope.$storage.dataDictGlobalByTypePlaneArrivalId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByTypePlaneArrivalId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByTypePlaneArrivalId = $scope.dataDictGlobalByTypePlaneArrivalId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByAirclassId = $scope.$storage.dataDictGlobalByAirclassId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByAirclassId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByAirclassId = $scope.dataDictGlobalByAirclassId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccountByAccountId = $scope.$storage.dataTmAccountByAccountId;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccountByAccountId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccountByAccountId = $scope.dataTmAccountByAccountId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccountByAirCompanyArrivalId = $scope.$storage.dataTmAccountByAirCompanyArrivalId;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccountByAirCompanyArrivalId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccountByAirCompanyArrivalId = $scope.dataTmAccountByAirCompanyArrivalId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccountByAirCompanyDepId = $scope.$storage.dataTmAccountByAirCompanyDepId;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccountByAirCompanyDepId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccountByAirCompanyDepId = $scope.dataTmAccountByAirCompanyDepId;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServTicketsAir", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServTicketsAir');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servticketsair' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servticketsair' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServTicketsRailListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServTicketsRail = new Array()
			, $scope.ctrl = {
					  name: 'ServTicketsRailListCtrl'
					, original: 'ServTicketsRail'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servticketsrail' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServTicketsRailListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServTicketsRail: new Array()
			  	})
			  	, $scope.dataServTicketsRail = $scope.$storage.dataServTicketsRail;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServticketsrailEdit',
					controller: 'ServTicketsRailEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servticketsrail' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServTicketsRailDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServTicketsRail.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServticketsrailCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServticketsrailEdit/' + itemId,
						controller: 'ServTicketsRailEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servticketsrail' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServTicketsRail)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServTicketsRailDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServTicketsRail[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServTicketsRail[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServticketsrailEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServTicketsRail); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServTicketsRailDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServTicketsRail.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServTicketsRail(true);
	    };
	    
	    $scope.loadAllDataServTicketsRail = function() {
	    	$servicesStorage.ServTicketsRailDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTicketsRail = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTicketsRail = $scope.dataServTicketsRail;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServTicketsRail = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTicketsRailDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTicketsRail = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTicketsRail = APP.uniqueArray($scope.dataServTicketsRail.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTicketsRail = $scope.dataServTicketsRail;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServTicketsRail = $scope.dataServTicketsRail.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServTicketsRailDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTicketsRail(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTicketsRail", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTicketsRailSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServTicketsRail = new Array()
		, $scope.ctrl = {
				  name: 'ServTicketsRailSelectorCtrl'
				, original: 'ServTicketsRail'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServTicketsRailSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServTicketsRail: new Object()
		  	})
		  	, $scope.dataServTicketsRail = $scope.$storage.dataServTicketsRail;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServTicketsRail = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTicketsRailDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTicketsRail = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTicketsRail = APP.uniqueArray($scope.dataServTicketsRail.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTicketsRail = $scope.dataServTicketsRail;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTicketsRail(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTicketsRail", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTicketsRailEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServTicketsRailEditCtrl'
			, original: 'ServTicketsRail'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServTicketsRailEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServTicketsRail: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServTicketsRail', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServTicketsRailDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServticketsrailList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServTicketsRailDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServticketsrailList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServTicketsRailDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServTicketsRail = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServTicketsRail');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServTicketsRail", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServTicketsRail');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servticketsrail' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servticketsrail' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServTourListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServTour = new Array()
			, $scope.ctrl = {
					  name: 'ServTourListCtrl'
					, original: 'ServTour'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servtour' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServTourListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServTour: new Array()
			  	})
			  	, $scope.dataServTour = $scope.$storage.dataServTour;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServtourEdit',
					controller: 'ServTourEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servtour' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServTourDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServTour.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServtourCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServtourEdit/' + itemId,
						controller: 'ServTourEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servtour' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServTour)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServTourDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServTour[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServTour[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServtourEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServTour); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServTourDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServTour.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServTour(true);
	    };
	    
	    $scope.loadAllDataServTour = function() {
	    	$servicesStorage.ServTourDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTour = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTour = $scope.dataServTour;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServTour = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTourDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTour = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTour = APP.uniqueArray($scope.dataServTour.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTour = $scope.dataServTour;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServTour = $scope.dataServTour.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServTourDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTour(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTour", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTourSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServTour = new Array()
		, $scope.ctrl = {
				  name: 'ServTourSelectorCtrl'
				, original: 'ServTour'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServTourSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServTour: new Object()
		  	})
		  	, $scope.dataServTour = $scope.$storage.dataServTour;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServTour = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTourDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTour = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTour = APP.uniqueArray($scope.dataServTour.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTour = $scope.dataServTour;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTour(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTour", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTourEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServTourEditCtrl'
			, original: 'ServTour'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServTourEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServTour: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServTour', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServTourDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServtourList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServTourDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServtourList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServTourDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServTour = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServTour');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataGroupGlobal = $scope.$storage.dataGroupGlobal;
			}
			$servicesStorage.GroupGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataGroupGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataGroupGlobal = $scope.dataGroupGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			$servicesStorage.LocationCitiesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCities = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCities = $scope.dataLocationCities;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServTour", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServTour');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemTmIncidents = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmIncidentses
							, editItemId: itemId
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTourServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltourservicesEdit',
				controller: 'RelTourServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTourServiceses
							, editItemId: itemId
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTourDocs = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltourdocsEdit',
				controller: 'RelTourDocsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTourDocses
							, editItemId: itemId
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTourHotels = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltourhotelsEdit',
				controller: 'RelTourHotelsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTourHotelses
							, editItemId: itemId
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemTmIncidents = function () {
			if(typeof $scope.item.tmIncidentses == "undefined"){
				$scope.item.tmIncidentses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmIncidents#item: ', item);
				}
				$scope.item.tmIncidentses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTourServices = function () {
			if(typeof $scope.item.relTourServiceses == "undefined"){
				$scope.item.relTourServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltourservicesEdit',
				controller: 'RelTourServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTourServices#item: ', item);
				}
				$scope.item.relTourServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTourDocs = function () {
			if(typeof $scope.item.relTourDocses == "undefined"){
				$scope.item.relTourDocses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltourdocsEdit',
				controller: 'RelTourDocsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTourDocs#item: ', item);
				}
				$scope.item.relTourDocses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTourHotels = function () {
			if(typeof $scope.item.relTourHotelses == "undefined"){
				$scope.item.relTourHotelses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltourhotelsEdit',
				controller: 'RelTourHotelsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtour' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTourHotels#item: ', item);
				}
				$scope.item.relTourHotelses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemTmIncidents = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsFragmentSelector',
				controller: 'TmIncidentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmIncidentses = APP.checkDublicate2(
							$scope.item.tmIncidentses
						  , data.data
						  , 'TmIncidentsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTourServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTourServiceses = APP.checkDublicate(
							$scope.item.relTourServiceses
						  , data.data
						  , 'infoservices'
						  , 'servtour'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTourDocs = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DocdocumentsFragmentSelector',
				controller: 'DocDocumentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTourDocses = APP.checkDublicate(
							$scope.item.relTourDocses
						  , data.data
						  , 'docdocuments'
						  , 'servtour'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTourHotels = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTourHotelses = APP.checkDublicate(
							$scope.item.relTourHotelses
						  , data.data
						  , 'servhotel'
						  , 'servtour'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServTransferListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServTransfer = new Array()
			, $scope.ctrl = {
					  name: 'ServTransferListCtrl'
					, original: 'ServTransfer'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servtransfer' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServTransferListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServTransfer: new Array()
			  	})
			  	, $scope.dataServTransfer = $scope.$storage.dataServTransfer;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServtransferEdit',
					controller: 'ServTransferEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servtransfer' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServTransferDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServTransfer.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServtransferCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServtransferEdit/' + itemId,
						controller: 'ServTransferEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servtransfer' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServTransfer)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServTransferDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServTransfer[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServTransfer[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServtransferEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServTransfer); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServTransferDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServTransfer.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServTransfer(true);
	    };
	    
	    $scope.loadAllDataServTransfer = function() {
	    	$servicesStorage.ServTransferDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransfer = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransfer = $scope.dataServTransfer;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServTransfer = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTransferDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTransfer = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransfer = APP.uniqueArray($scope.dataServTransfer.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransfer = $scope.dataServTransfer;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServTransfer = $scope.dataServTransfer.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServTransferDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTransfer(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTransfer", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTransferSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServTransfer = new Array()
		, $scope.ctrl = {
				  name: 'ServTransferSelectorCtrl'
				, original: 'ServTransfer'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServTransferSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServTransfer: new Object()
		  	})
		  	, $scope.dataServTransfer = $scope.$storage.dataServTransfer;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServTransfer = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTransferDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTransfer = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransfer = APP.uniqueArray($scope.dataServTransfer.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransfer = $scope.dataServTransfer;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTransfer(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTransfer", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTransferEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServTransferEditCtrl'
			, original: 'ServTransfer'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServTransferEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServTransfer: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServTransfer', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServTransferDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServtransferList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServTransferDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServtransferList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServTransferDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServTransfer = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServTransfer');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByTransportId = $scope.$storage.dataDictGlobalByTransportId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByTransportId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByTransportId = $scope.dataDictGlobalByTransportId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByPaymentTypeId = $scope.$storage.dataDictGlobalByPaymentTypeId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByPaymentTypeId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByPaymentTypeId = $scope.dataDictGlobalByPaymentTypeId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByTypeTransferId = $scope.$storage.dataDictGlobalByTypeTransferId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByTypeTransferId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByTypeTransferId = $scope.dataDictGlobalByTypeTransferId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			$servicesStorage.LocationCitiesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCities = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCities = $scope.dataLocationCities;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServTransfer", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServTransfer');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelServTransferTmContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservtransfertmcontactEdit',
				controller: 'RelServTransferTmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServTransferTmContacts
							, editItemId: itemId
							, excludeList: [ 'servtransfer' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servtransfer' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmIncidents = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmIncidentses
							, editItemId: itemId
							, excludeList: [ 'servtransfer' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransferRoute = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferrouteEdit',
				controller: 'ServTransferRouteEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransferRoutes
							, editItemId: itemId
							, excludeList: [ 'servtransfer' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelServTransferTmContact = function () {
			if(typeof $scope.item.relServTransferTmContacts == "undefined"){
				$scope.item.relServTransferTmContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservtransfertmcontactEdit',
				controller: 'RelServTransferTmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtransfer' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServTransferTmContact#item: ', item);
				}
				$scope.item.relServTransferTmContacts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtransfer' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmIncidents = function () {
			if(typeof $scope.item.tmIncidentses == "undefined"){
				$scope.item.tmIncidentses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtransfer' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmIncidents#item: ', item);
				}
				$scope.item.tmIncidentses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransferRoute = function () {
			if(typeof $scope.item.servTransferRoutes == "undefined"){
				$scope.item.servTransferRoutes = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferrouteEdit',
				controller: 'ServTransferRouteEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtransfer' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransferRoute#item: ', item);
				}
				$scope.item.servTransferRoutes.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelServTransferTmContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactFragmentSelector',
				controller: 'TmContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServTransferTmContacts = APP.checkDublicate(
							$scope.item.relServTransferTmContacts
						  , data.data
						  , 'tmcontact'
						  , 'servtransfer'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmIncidents = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsFragmentSelector',
				controller: 'TmIncidentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmIncidentses = APP.checkDublicate2(
							$scope.item.tmIncidentses
						  , data.data
						  , 'TmIncidentsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransferRoute = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferrouteFragmentSelector',
				controller: 'ServTransferRouteSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransferRoutes = APP.checkDublicate2(
							$scope.item.servTransferRoutes
						  , data.data
						  , 'ServTransferRouteView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServTransferRouteListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServTransferRoute = new Array()
			, $scope.ctrl = {
					  name: 'ServTransferRouteListCtrl'
					, original: 'ServTransferRoute'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servtransferroute' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServTransferRouteListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServTransferRoute: new Array()
			  	})
			  	, $scope.dataServTransferRoute = $scope.$storage.dataServTransferRoute;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServtransferrouteEdit',
					controller: 'ServTransferRouteEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servtransferroute' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServTransferRouteDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServTransferRoute.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServtransferrouteCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServtransferrouteEdit/' + itemId,
						controller: 'ServTransferRouteEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servtransferroute' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServTransferRoute)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServTransferRouteDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServTransferRoute[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServTransferRoute[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServtransferrouteEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServTransferRoute); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServTransferRouteDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServTransferRoute.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServTransferRoute(true);
	    };
	    
	    $scope.loadAllDataServTransferRoute = function() {
	    	$servicesStorage.ServTransferRouteDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransferRoute = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransferRoute = $scope.dataServTransferRoute;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServTransferRoute = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTransferRouteDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTransferRoute = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransferRoute = APP.uniqueArray($scope.dataServTransferRoute.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransferRoute = $scope.dataServTransferRoute;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServTransferRoute = $scope.dataServTransferRoute.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServTransferRouteDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTransferRoute(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTransferRoute", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTransferRouteSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServTransferRoute = new Array()
		, $scope.ctrl = {
				  name: 'ServTransferRouteSelectorCtrl'
				, original: 'ServTransferRoute'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServTransferRouteSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServTransferRoute: new Object()
		  	})
		  	, $scope.dataServTransferRoute = $scope.$storage.dataServTransferRoute;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServTransferRoute = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTransferRouteDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTransferRoute = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransferRoute = APP.uniqueArray($scope.dataServTransferRoute.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransferRoute = $scope.dataServTransferRoute;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTransferRoute(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTransferRoute", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTransferRouteEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServTransferRouteEditCtrl'
			, original: 'ServTransferRoute'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServTransferRouteEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServTransferRoute: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServTransferRoute', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServTransferRouteDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServtransferrouteList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServTransferRouteDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServtransferrouteList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServTransferRouteDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServTransferRoute = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServTransferRoute');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTransfer = $scope.$storage.dataServTransfer;
			}
			$servicesStorage.ServTransferDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTransfer = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTransfer = $scope.dataServTransfer;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServTransferRoute", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServTransferRoute');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemServTransferRoutePoint = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferroutepointEdit',
				controller: 'ServTransferRoutePointEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransferRoutePoints
							, editItemId: itemId
							, excludeList: [ 'servtransferroute' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemServTransferRoutePoint = function () {
			if(typeof $scope.item.servTransferRoutePoints == "undefined"){
				$scope.item.servTransferRoutePoints = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferroutepointEdit',
				controller: 'ServTransferRoutePointEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servtransferroute' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransferRoutePoint#item: ', item);
				}
				$scope.item.servTransferRoutePoints.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemServTransferRoutePoint = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferroutepointFragmentSelector',
				controller: 'ServTransferRoutePointSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransferRoutePoints = APP.checkDublicate2(
							$scope.item.servTransferRoutePoints
						  , data.data
						  , 'ServTransferRoutePointView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('ServTransferRoutePointListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServTransferRoutePoint = new Array()
			, $scope.ctrl = {
					  name: 'ServTransferRoutePointListCtrl'
					, original: 'ServTransferRoutePoint'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servtransferroutepoint' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServTransferRoutePointListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServTransferRoutePoint: new Array()
			  	})
			  	, $scope.dataServTransferRoutePoint = $scope.$storage.dataServTransferRoutePoint;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServtransferroutepointEdit',
					controller: 'ServTransferRoutePointEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servtransferroutepoint' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServTransferRoutePointDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServTransferRoutePoint.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServtransferroutepointCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServtransferroutepointEdit/' + itemId,
						controller: 'ServTransferRoutePointEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servtransferroutepoint' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServTransferRoutePoint)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServTransferRoutePointDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServTransferRoutePoint[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServTransferRoutePoint[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServtransferroutepointEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServTransferRoutePoint); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServTransferRoutePointDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServTransferRoutePoint.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServTransferRoutePoint(true);
	    };
	    
	    $scope.loadAllDataServTransferRoutePoint = function() {
	    	$servicesStorage.ServTransferRoutePointDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransferRoutePoint = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransferRoutePoint = $scope.dataServTransferRoutePoint;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServTransferRoutePoint = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTransferRoutePointDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTransferRoutePoint = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransferRoutePoint = APP.uniqueArray($scope.dataServTransferRoutePoint.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransferRoutePoint = $scope.dataServTransferRoutePoint;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServTransferRoutePoint = $scope.dataServTransferRoutePoint.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServTransferRoutePointDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTransferRoutePoint(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTransferRoutePoint", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTransferRoutePointSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServTransferRoutePoint = new Array()
		, $scope.ctrl = {
				  name: 'ServTransferRoutePointSelectorCtrl'
				, original: 'ServTransferRoutePoint'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServTransferRoutePointSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServTransferRoutePoint: new Object()
		  	})
		  	, $scope.dataServTransferRoutePoint = $scope.$storage.dataServTransferRoutePoint;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServTransferRoutePoint = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServTransferRoutePointDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServTransferRoutePoint = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServTransferRoutePoint = APP.uniqueArray($scope.dataServTransferRoutePoint.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServTransferRoutePoint = $scope.dataServTransferRoutePoint;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServTransferRoutePoint(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServTransferRoutePoint", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServTransferRoutePointEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServTransferRoutePointEditCtrl'
			, original: 'ServTransferRoutePoint'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServTransferRoutePointEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServTransferRoutePoint: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServTransferRoutePoint', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServTransferRoutePointDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServtransferroutepointList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServTransferRoutePointDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServtransferroutepointList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServTransferRoutePointDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServTransferRoutePoint = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServTransferRoutePoint');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTransferRoute = $scope.$storage.dataServTransferRoute;
			}
			$servicesStorage.ServTransferRouteDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTransferRoute = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTransferRoute = $scope.dataServTransferRoute;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServTransferRoutePoint", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServTransferRoutePoint');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('ServVisasListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataServVisas = new Array()
			, $scope.ctrl = {
					  name: 'ServVisasListCtrl'
					, original: 'ServVisas'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'servvisas' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('ServVisasListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataServVisas: new Array()
			  	})
			  	, $scope.dataServVisas = $scope.$storage.dataServVisas;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'ServvisasEdit',
					controller: 'ServVisasEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'servvisas' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.ServVisasDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataServVisas.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/ServvisasCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'ServvisasEdit/' + itemId,
						controller: 'ServVisasEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'servvisas' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataServVisas)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.ServVisasDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataServVisas[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataServVisas[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/ServvisasEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataServVisas); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.ServVisasDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataServVisas.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataServVisas(true);
	    };
	    
	    $scope.loadAllDataServVisas = function() {
	    	$servicesStorage.ServVisasDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServVisas = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServVisas = $scope.dataServVisas;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataServVisas = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServVisasDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServVisas = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataServVisas = APP.uniqueArray($scope.dataServVisas.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServVisas = $scope.dataServVisas;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredServVisas = $scope.dataServVisas.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.ServVisasDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServVisas(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServVisas", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServVisasSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataServVisas = new Array()
		, $scope.ctrl = {
				  name: 'ServVisasSelectorCtrl'
				, original: 'ServVisas'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('ServVisasSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataServVisas: new Object()
		  	})
		  	, $scope.dataServVisas = $scope.$storage.dataServVisas;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataServVisas = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.ServVisasDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataServVisas = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataServVisas = APP.uniqueArray($scope.dataServVisas.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataServVisas = $scope.dataServVisas;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataServVisas(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("ServVisas", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('ServVisasEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'ServVisasEditCtrl'
			, original: 'ServVisas'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('ServVisasEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemServVisas: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'ServVisas', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.ServVisasDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServvisasList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.ServVisasDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/ServvisasList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.ServVisasDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemServVisas = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'ServVisas');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataCurrCurrency = $scope.$storage.dataCurrCurrency;
			}
			$servicesStorage.CurrCurrencyDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataCurrCurrency = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataCurrCurrency = $scope.dataCurrCurrency;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("ServVisas", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'ServVisas');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedIteminfoServiceses
							, editItemId: itemId
							, excludeList: [ 'servvisas' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmIncidents = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmIncidentses
							, editItemId: itemId
							, excludeList: [ 'servvisas' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemInfoServices = function () {
			if(typeof $scope.item.infoServiceses == "undefined"){
				$scope.item.infoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesEdit',
				controller: 'InfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servvisas' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemInfoServices#item: ', item);
				}
				$scope.item.infoServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmIncidents = function () {
			if(typeof $scope.item.tmIncidentses == "undefined"){
				$scope.item.tmIncidentses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'servvisas' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmIncidents#item: ', item);
				}
				$scope.item.tmIncidentses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.infoServiceses = APP.checkDublicate2(
							$scope.item.infoServiceses
						  , data.data
						  , 'InfoServicesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmIncidents = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsFragmentSelector',
				controller: 'TmIncidentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmIncidentses = APP.checkDublicate2(
							$scope.item.tmIncidentses
						  , data.data
						  , 'TmIncidentsView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('TmAccountListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmAccount = new Array()
			, $scope.ctrl = {
					  name: 'TmAccountListCtrl'
					, original: 'TmAccount'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmaccount' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmAccountListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmAccount: new Array()
			  	})
			  	, $scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmaccountEdit',
					controller: 'TmAccountEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmaccount' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmAccountDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmAccount.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmaccountCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmaccountEdit/' + itemId,
						controller: 'TmAccountEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmaccount' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmAccount)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmAccountDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmAccount[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmAccount[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmaccountEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmAccount); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmAccountDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmAccount.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmAccount(true);
	    };
	    
	    $scope.loadAllDataTmAccount = function() {
	    	$servicesStorage.TmAccountDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccount = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccount = $scope.dataTmAccount;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmAccount = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmAccountDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmAccount = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccount = APP.uniqueArray($scope.dataTmAccount.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccount = $scope.dataTmAccount;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmAccount = $scope.dataTmAccount.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmAccountDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmAccount(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmAccount", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmAccountSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmAccount = new Array()
		, $scope.ctrl = {
				  name: 'TmAccountSelectorCtrl'
				, original: 'TmAccount'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmAccountSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmAccount: new Object()
		  	})
		  	, $scope.dataTmAccount = $scope.$storage.dataTmAccount;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmAccount = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmAccountDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmAccount = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccount = APP.uniqueArray($scope.dataTmAccount.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccount = $scope.dataTmAccount;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmAccount(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmAccount", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmAccountEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmAccountEditCtrl'
			, original: 'TmAccount'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmAccountEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmAccount: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmAccount', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmAccountDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmaccountList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmAccountDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmaccountList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmAccountDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmAccount = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmAccount');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmAccount", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmAccount');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelAccountContacts = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelaccountcontactsEdit',
				controller: 'RelAccountContactsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelAccountContactses
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccount = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccounts
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServInsurances = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservInsuranceses
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmIncidents = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmIncidentses
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTour = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourEdit',
				controller: 'ServTourEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTours
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServVisas = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasEdit',
				controller: 'ServVisasEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservVisases
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmOrder = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderEdit',
				controller: 'TmOrderEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmOrders
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmAccountDetails = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountdetailsEdit',
				controller: 'TmAccountDetailsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmAccountDetailses
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServExcursions = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsEdit',
				controller: 'ServExcursionsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservExcursionses
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmAccountCommunications = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsEdit',
				controller: 'TmAccountCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmAccountCommunicationses
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsAir = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsAirs
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsAir = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsAirs
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTransfer = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTransfers
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmAccountAddresses = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountaddressesEdit',
				controller: 'TmAccountAddressesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmAccountAddresseses
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsAir = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsAirs
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServInsurances = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservInsuranceses
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServTicketsRail = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsrailEdit',
				controller: 'ServTicketsRailEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservTicketsRails
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServCruise = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServcruiseEdit',
				controller: 'ServCruiseEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservCruises
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemservHotels
							, editItemId: itemId
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelAccountContacts = function () {
			if(typeof $scope.item.relAccountContactses == "undefined"){
				$scope.item.relAccountContactses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelaccountcontactsEdit',
				controller: 'RelAccountContactsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelAccountContacts#item: ', item);
				}
				$scope.item.relAccountContactses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccount = function () {
			if(typeof $scope.item.paymentAccounts == "undefined"){
				$scope.item.paymentAccounts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccount#item: ', item);
				}
				$scope.item.paymentAccounts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServInsurances = function () {
			if(typeof $scope.item.servInsuranceses == "undefined"){
				$scope.item.servInsuranceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServInsurances#item: ', item);
				}
				$scope.item.servInsuranceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmIncidents = function () {
			if(typeof $scope.item.tmIncidentses == "undefined"){
				$scope.item.tmIncidentses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmIncidents#item: ', item);
				}
				$scope.item.tmIncidentses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTour = function () {
			if(typeof $scope.item.servTours == "undefined"){
				$scope.item.servTours = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtourEdit',
				controller: 'ServTourEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTour#item: ', item);
				}
				$scope.item.servTours.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServVisas = function () {
			if(typeof $scope.item.servVisases == "undefined"){
				$scope.item.servVisases = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasEdit',
				controller: 'ServVisasEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServVisas#item: ', item);
				}
				$scope.item.servVisases.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmOrder = function () {
			if(typeof $scope.item.tmOrders == "undefined"){
				$scope.item.tmOrders = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmorderEdit',
				controller: 'TmOrderEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmOrder#item: ', item);
				}
				$scope.item.tmOrders.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmAccountDetails = function () {
			if(typeof $scope.item.tmAccountDetailses == "undefined"){
				$scope.item.tmAccountDetailses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountdetailsEdit',
				controller: 'TmAccountDetailsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmAccountDetails#item: ', item);
				}
				$scope.item.tmAccountDetailses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServExcursions = function () {
			if(typeof $scope.item.servExcursionses == "undefined"){
				$scope.item.servExcursionses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsEdit',
				controller: 'ServExcursionsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServExcursions#item: ', item);
				}
				$scope.item.servExcursionses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmAccountCommunications = function () {
			if(typeof $scope.item.tmAccountCommunicationses == "undefined"){
				$scope.item.tmAccountCommunicationses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsEdit',
				controller: 'TmAccountCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmAccountCommunications#item: ', item);
				}
				$scope.item.tmAccountCommunicationses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsAir = function () {
			if(typeof $scope.item.servTicketsAirs == "undefined"){
				$scope.item.servTicketsAirs = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsAir#item: ', item);
				}
				$scope.item.servTicketsAirs.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsAir = function () {
			if(typeof $scope.item.servTicketsAirs == "undefined"){
				$scope.item.servTicketsAirs = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsAir#item: ', item);
				}
				$scope.item.servTicketsAirs.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTransfer = function () {
			if(typeof $scope.item.servTransfers == "undefined"){
				$scope.item.servTransfers = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferEdit',
				controller: 'ServTransferEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTransfer#item: ', item);
				}
				$scope.item.servTransfers.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmAccountAddresses = function () {
			if(typeof $scope.item.tmAccountAddresseses == "undefined"){
				$scope.item.tmAccountAddresseses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountaddressesEdit',
				controller: 'TmAccountAddressesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmAccountAddresses#item: ', item);
				}
				$scope.item.tmAccountAddresseses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsAir = function () {
			if(typeof $scope.item.servTicketsAirs == "undefined"){
				$scope.item.servTicketsAirs = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairEdit',
				controller: 'ServTicketsAirEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsAir#item: ', item);
				}
				$scope.item.servTicketsAirs.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServInsurances = function () {
			if(typeof $scope.item.servInsuranceses == "undefined"){
				$scope.item.servInsuranceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesEdit',
				controller: 'ServInsurancesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServInsurances#item: ', item);
				}
				$scope.item.servInsuranceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServTicketsRail = function () {
			if(typeof $scope.item.servTicketsRails == "undefined"){
				$scope.item.servTicketsRails = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsrailEdit',
				controller: 'ServTicketsRailEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServTicketsRail#item: ', item);
				}
				$scope.item.servTicketsRails.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServCruise = function () {
			if(typeof $scope.item.servCruises == "undefined"){
				$scope.item.servCruises = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServcruiseEdit',
				controller: 'ServCruiseEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServCruise#item: ', item);
				}
				$scope.item.servCruises.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemServHotel = function () {
			if(typeof $scope.item.servHotels == "undefined"){
				$scope.item.servHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelEdit',
				controller: 'ServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmaccount' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemServHotel#item: ', item);
				}
				$scope.item.servHotels.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelAccountContacts = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactFragmentSelector',
				controller: 'TmContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relAccountContactses = APP.checkDublicate(
							$scope.item.relAccountContactses
						  , data.data
						  , 'tmcontact'
						  , 'tmaccount'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccount = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountFragmentSelector',
				controller: 'PaymentAccountSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccounts = APP.checkDublicate2(
							$scope.item.paymentAccounts
						  , data.data
						  , 'PaymentAccountView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServInsurances = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesFragmentSelector',
				controller: 'ServInsurancesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servInsuranceses = APP.checkDublicate2(
							$scope.item.servInsuranceses
						  , data.data
						  , 'ServInsurancesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmIncidents = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsFragmentSelector',
				controller: 'TmIncidentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmIncidentses = APP.checkDublicate2(
							$scope.item.tmIncidentses
						  , data.data
						  , 'TmIncidentsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTour = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtourFragmentSelector',
				controller: 'ServTourSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTours = APP.checkDublicate2(
							$scope.item.servTours
						  , data.data
						  , 'ServTourView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServVisas = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServvisasFragmentSelector',
				controller: 'ServVisasSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servVisases = APP.checkDublicate2(
							$scope.item.servVisases
						  , data.data
						  , 'ServVisasView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmOrder = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderFragmentSelector',
				controller: 'TmOrderSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmOrders = APP.checkDublicate2(
							$scope.item.tmOrders
						  , data.data
						  , 'TmOrderView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmAccountDetails = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountdetailsFragmentSelector',
				controller: 'TmAccountDetailsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmAccountDetailses = APP.checkDublicate2(
							$scope.item.tmAccountDetailses
						  , data.data
						  , 'TmAccountDetailsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServExcursions = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServexcursionsFragmentSelector',
				controller: 'ServExcursionsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servExcursionses = APP.checkDublicate2(
							$scope.item.servExcursionses
						  , data.data
						  , 'ServExcursionsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmAccountCommunications = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountcommunicationsFragmentSelector',
				controller: 'TmAccountCommunicationsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmAccountCommunicationses = APP.checkDublicate2(
							$scope.item.tmAccountCommunicationses
						  , data.data
						  , 'TmAccountCommunicationsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsAir = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairFragmentSelector',
				controller: 'ServTicketsAirSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsAirs = APP.checkDublicate2(
							$scope.item.servTicketsAirs
						  , data.data
						  , 'ServTicketsAirView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsAir = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairFragmentSelector',
				controller: 'ServTicketsAirSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsAirs = APP.checkDublicate2(
							$scope.item.servTicketsAirs
						  , data.data
						  , 'ServTicketsAirView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTransfer = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferFragmentSelector',
				controller: 'ServTransferSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTransfers = APP.checkDublicate2(
							$scope.item.servTransfers
						  , data.data
						  , 'ServTransferView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmAccountAddresses = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountaddressesFragmentSelector',
				controller: 'TmAccountAddressesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmAccountAddresseses = APP.checkDublicate2(
							$scope.item.tmAccountAddresseses
						  , data.data
						  , 'TmAccountAddressesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsAir = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsairFragmentSelector',
				controller: 'ServTicketsAirSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsAirs = APP.checkDublicate2(
							$scope.item.servTicketsAirs
						  , data.data
						  , 'ServTicketsAirView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServInsurances = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServinsurancesFragmentSelector',
				controller: 'ServInsurancesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servInsuranceses = APP.checkDublicate2(
							$scope.item.servInsuranceses
						  , data.data
						  , 'ServInsurancesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServTicketsRail = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServticketsrailFragmentSelector',
				controller: 'ServTicketsRailSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servTicketsRails = APP.checkDublicate2(
							$scope.item.servTicketsRails
						  , data.data
						  , 'ServTicketsRailView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServCruise = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServcruiseFragmentSelector',
				controller: 'ServCruiseSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servCruises = APP.checkDublicate2(
							$scope.item.servCruises
						  , data.data
						  , 'ServCruiseView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.servHotels = APP.checkDublicate2(
							$scope.item.servHotels
						  , data.data
						  , 'ServHotelView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('TmAccountAddressesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmAccountAddresses = new Array()
			, $scope.ctrl = {
					  name: 'TmAccountAddressesListCtrl'
					, original: 'TmAccountAddresses'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmaccountaddresses' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmAccountAddressesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmAccountAddresses: new Array()
			  	})
			  	, $scope.dataTmAccountAddresses = $scope.$storage.dataTmAccountAddresses;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmaccountaddressesEdit',
					controller: 'TmAccountAddressesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmaccountaddresses' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmAccountAddressesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmAccountAddresses.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmaccountaddressesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmaccountaddressesEdit/' + itemId,
						controller: 'TmAccountAddressesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmaccountaddresses' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmAccountAddresses)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmAccountAddressesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmAccountAddresses[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmAccountAddresses[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmaccountaddressesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmAccountAddresses); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmAccountAddressesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmAccountAddresses.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmAccountAddresses(true);
	    };
	    
	    $scope.loadAllDataTmAccountAddresses = function() {
	    	$servicesStorage.TmAccountAddressesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountAddresses = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountAddresses = $scope.dataTmAccountAddresses;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmAccountAddresses = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmAccountAddressesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmAccountAddresses = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountAddresses = APP.uniqueArray($scope.dataTmAccountAddresses.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountAddresses = $scope.dataTmAccountAddresses;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmAccountAddresses = $scope.dataTmAccountAddresses.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmAccountAddressesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmAccountAddresses(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmAccountAddresses", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmAccountAddressesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmAccountAddresses = new Array()
		, $scope.ctrl = {
				  name: 'TmAccountAddressesSelectorCtrl'
				, original: 'TmAccountAddresses'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmAccountAddressesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmAccountAddresses: new Object()
		  	})
		  	, $scope.dataTmAccountAddresses = $scope.$storage.dataTmAccountAddresses;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmAccountAddresses = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmAccountAddressesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmAccountAddresses = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountAddresses = APP.uniqueArray($scope.dataTmAccountAddresses.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountAddresses = $scope.dataTmAccountAddresses;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmAccountAddresses(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmAccountAddresses", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmAccountAddressesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmAccountAddressesEditCtrl'
			, original: 'TmAccountAddresses'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmAccountAddressesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmAccountAddresses: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmAccountAddresses', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmAccountAddressesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmaccountaddressesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmAccountAddressesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmaccountaddressesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmAccountAddressesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmAccountAddresses = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmAccountAddresses');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			$servicesStorage.LocationCitiesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCities = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCities = $scope.dataLocationCities;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmAccountAddresses", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmAccountAddresses');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('TmAccountCommunicationsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmAccountCommunications = new Array()
			, $scope.ctrl = {
					  name: 'TmAccountCommunicationsListCtrl'
					, original: 'TmAccountCommunications'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmaccountcommunications' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmAccountCommunicationsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmAccountCommunications: new Array()
			  	})
			  	, $scope.dataTmAccountCommunications = $scope.$storage.dataTmAccountCommunications;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmaccountcommunicationsEdit',
					controller: 'TmAccountCommunicationsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmaccountcommunications' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmAccountCommunicationsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmAccountCommunications.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmaccountcommunicationsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmaccountcommunicationsEdit/' + itemId,
						controller: 'TmAccountCommunicationsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmaccountcommunications' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmAccountCommunications)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmAccountCommunicationsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmAccountCommunications[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmAccountCommunications[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmaccountcommunicationsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmAccountCommunications); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmAccountCommunicationsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmAccountCommunications.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmAccountCommunications(true);
	    };
	    
	    $scope.loadAllDataTmAccountCommunications = function() {
	    	$servicesStorage.TmAccountCommunicationsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountCommunications = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountCommunications = $scope.dataTmAccountCommunications;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmAccountCommunications = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmAccountCommunicationsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmAccountCommunications = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountCommunications = APP.uniqueArray($scope.dataTmAccountCommunications.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountCommunications = $scope.dataTmAccountCommunications;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmAccountCommunications = $scope.dataTmAccountCommunications.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmAccountCommunicationsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmAccountCommunications(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmAccountCommunications", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmAccountCommunicationsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmAccountCommunications = new Array()
		, $scope.ctrl = {
				  name: 'TmAccountCommunicationsSelectorCtrl'
				, original: 'TmAccountCommunications'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmAccountCommunicationsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmAccountCommunications: new Object()
		  	})
		  	, $scope.dataTmAccountCommunications = $scope.$storage.dataTmAccountCommunications;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmAccountCommunications = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmAccountCommunicationsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmAccountCommunications = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountCommunications = APP.uniqueArray($scope.dataTmAccountCommunications.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountCommunications = $scope.dataTmAccountCommunications;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmAccountCommunications(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmAccountCommunications", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmAccountCommunicationsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmAccountCommunicationsEditCtrl'
			, original: 'TmAccountCommunications'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmAccountCommunicationsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmAccountCommunications: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmAccountCommunications', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmAccountCommunicationsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmaccountcommunicationsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmAccountCommunicationsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmaccountcommunicationsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmAccountCommunicationsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmAccountCommunications = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmAccountCommunications');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			$servicesStorage.LocationCitiesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCities = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCities = $scope.dataLocationCities;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmAccountCommunications", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmAccountCommunications');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('TmAccountDetailsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmAccountDetails = new Array()
			, $scope.ctrl = {
					  name: 'TmAccountDetailsListCtrl'
					, original: 'TmAccountDetails'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmaccountdetails' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmAccountDetailsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmAccountDetails: new Array()
			  	})
			  	, $scope.dataTmAccountDetails = $scope.$storage.dataTmAccountDetails;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmaccountdetailsEdit',
					controller: 'TmAccountDetailsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmaccountdetails' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmAccountDetailsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmAccountDetails.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmaccountdetailsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmaccountdetailsEdit/' + itemId,
						controller: 'TmAccountDetailsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmaccountdetails' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmAccountDetails)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmAccountDetailsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmAccountDetails[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmAccountDetails[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmaccountdetailsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmAccountDetails); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmAccountDetailsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmAccountDetails.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmAccountDetails(true);
	    };
	    
	    $scope.loadAllDataTmAccountDetails = function() {
	    	$servicesStorage.TmAccountDetailsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountDetails = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountDetails = $scope.dataTmAccountDetails;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmAccountDetails = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmAccountDetailsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmAccountDetails = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountDetails = APP.uniqueArray($scope.dataTmAccountDetails.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountDetails = $scope.dataTmAccountDetails;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmAccountDetails = $scope.dataTmAccountDetails.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmAccountDetailsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmAccountDetails(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmAccountDetails", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmAccountDetailsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmAccountDetails = new Array()
		, $scope.ctrl = {
				  name: 'TmAccountDetailsSelectorCtrl'
				, original: 'TmAccountDetails'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmAccountDetailsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmAccountDetails: new Object()
		  	})
		  	, $scope.dataTmAccountDetails = $scope.$storage.dataTmAccountDetails;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmAccountDetails = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmAccountDetailsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmAccountDetails = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmAccountDetails = APP.uniqueArray($scope.dataTmAccountDetails.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmAccountDetails = $scope.dataTmAccountDetails;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmAccountDetails(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmAccountDetails", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmAccountDetailsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmAccountDetailsEditCtrl'
			, original: 'TmAccountDetails'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmAccountDetailsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmAccountDetails: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmAccountDetails', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmAccountDetailsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmaccountdetailsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmAccountDetailsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmaccountdetailsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmAccountDetailsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmAccountDetails = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmAccountDetails');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmAccountDetails", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmAccountDetails');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('TmCommercialListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmCommercial = new Array()
			, $scope.ctrl = {
					  name: 'TmCommercialListCtrl'
					, original: 'TmCommercial'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmcommercial' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmCommercialListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmCommercial: new Array()
			  	})
			  	, $scope.dataTmCommercial = $scope.$storage.dataTmCommercial;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmcommercialEdit',
					controller: 'TmCommercialEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmcommercial' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmCommercialDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmCommercial.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmcommercialCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmcommercialEdit/' + itemId,
						controller: 'TmCommercialEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmcommercial' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmCommercial)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmCommercialDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmCommercial[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmCommercial[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmcommercialEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmCommercial); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmCommercialDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmCommercial.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmCommercial(true);
	    };
	    
	    $scope.loadAllDataTmCommercial = function() {
	    	$servicesStorage.TmCommercialDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmCommercial = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmCommercial = $scope.dataTmCommercial;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmCommercial = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmCommercialDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmCommercial = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmCommercial = APP.uniqueArray($scope.dataTmCommercial.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmCommercial = $scope.dataTmCommercial;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmCommercial = $scope.dataTmCommercial.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmCommercialDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmCommercial(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmCommercial", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmCommercialSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmCommercial = new Array()
		, $scope.ctrl = {
				  name: 'TmCommercialSelectorCtrl'
				, original: 'TmCommercial'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmCommercialSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmCommercial: new Object()
		  	})
		  	, $scope.dataTmCommercial = $scope.$storage.dataTmCommercial;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmCommercial = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmCommercialDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmCommercial = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmCommercial = APP.uniqueArray($scope.dataTmCommercial.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmCommercial = $scope.dataTmCommercial;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmCommercial(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmCommercial", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmCommercialEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmCommercialEditCtrl'
			, original: 'TmCommercial'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmCommercialEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmCommercial: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmCommercial', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmCommercialDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcommercialList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmCommercialDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcommercialList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmCommercialDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmCommercial = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmCommercial');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmCommercial", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmCommercial');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelServHotelInfoCommercial = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfocommercialEdit',
				controller: 'RelServHotelInfoCommercialEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelInfoCommercials
							, editItemId: itemId
							, excludeList: [ 'tmcommercial' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelServHotelInfoCommercial = function () {
			if(typeof $scope.item.relServHotelInfoCommercials == "undefined"){
				$scope.item.relServHotelInfoCommercials = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfocommercialEdit',
				controller: 'RelServHotelInfoCommercialEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcommercial' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelInfoCommercial#item: ', item);
				}
				$scope.item.relServHotelInfoCommercials.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelServHotelInfoCommercial = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelInfoCommercials = APP.checkDublicate(
							$scope.item.relServHotelInfoCommercials
						  , data.data
						  , 'servhotel'
						  , 'tmcommercial'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('TmContactListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmContact = new Array()
			, $scope.ctrl = {
					  name: 'TmContactListCtrl'
					, original: 'TmContact'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmcontact' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmContactListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmContact: new Array()
			  	})
			  	, $scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmcontactEdit',
					controller: 'TmContactEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmcontact' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmContactDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmContact.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmcontactCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmcontactEdit/' + itemId,
						controller: 'TmContactEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmcontact' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmContact)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmContactDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmContact[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmContact[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmcontactEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmContact); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmContactDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmContact.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmContact(true);
	    };
	    
	    $scope.loadAllDataTmContact = function() {
	    	$servicesStorage.TmContactDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContact = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContact = $scope.dataTmContact;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmContact = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmContactDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmContact = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContact = APP.uniqueArray($scope.dataTmContact.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContact = $scope.dataTmContact;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmContact = $scope.dataTmContact.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmContactDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmContact(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmContact", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmContactSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmContact = new Array()
		, $scope.ctrl = {
				  name: 'TmContactSelectorCtrl'
				, original: 'TmContact'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmContactSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmContact: new Object()
		  	})
		  	, $scope.dataTmContact = $scope.$storage.dataTmContact;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmContact = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmContactDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmContact = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContact = APP.uniqueArray($scope.dataTmContact.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContact = $scope.dataTmContact;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmContact(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmContact", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmContactEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmContactEditCtrl'
			, original: 'TmContact'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmContactEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmContact: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmContact', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmContactDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcontactList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmContactDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcontactList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmContactDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmContact = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmContact');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmContact", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmContact');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemTmIncidents = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmIncidentses
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactEdit',
				controller: 'PaymentContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContacts
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmContactCommunications = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsEdit',
				controller: 'TmContactCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmContactCommunicationses
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmContactAddresses = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactaddressesEdit',
				controller: 'TmContactAddressesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmContactAddresseses
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTmOrderTmContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmordertmcontactEdit',
				controller: 'RelTmOrderTmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTmOrderTmContacts
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemTmOrder = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderEdit',
				controller: 'TmOrderEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemtmOrders
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelAccountContacts = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelaccountcontactsEdit',
				controller: 'RelAccountContactsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelAccountContactses
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelCruiseContacts = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelcruisecontactsEdit',
				controller: 'RelCruiseContactsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelCruiseContactses
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServTransferTmContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservtransfertmcontactEdit',
				controller: 'RelServTransferTmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServTransferTmContacts
							, editItemId: itemId
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemTmIncidents = function () {
			if(typeof $scope.item.tmIncidentses == "undefined"){
				$scope.item.tmIncidentses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsEdit',
				controller: 'TmIncidentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmIncidents#item: ', item);
				}
				$scope.item.tmIncidentses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemPaymentContact = function () {
			if(typeof $scope.item.paymentContacts == "undefined"){
				$scope.item.paymentContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactEdit',
				controller: 'PaymentContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContact#item: ', item);
				}
				$scope.item.paymentContacts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmContactCommunications = function () {
			if(typeof $scope.item.tmContactCommunicationses == "undefined"){
				$scope.item.tmContactCommunicationses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsEdit',
				controller: 'TmContactCommunicationsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmContactCommunications#item: ', item);
				}
				$scope.item.tmContactCommunicationses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmContactAddresses = function () {
			if(typeof $scope.item.tmContactAddresseses == "undefined"){
				$scope.item.tmContactAddresseses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactaddressesEdit',
				controller: 'TmContactAddressesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmContactAddresses#item: ', item);
				}
				$scope.item.tmContactAddresseses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTmOrderTmContact = function () {
			if(typeof $scope.item.relTmOrderTmContacts == "undefined"){
				$scope.item.relTmOrderTmContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltmordertmcontactEdit',
				controller: 'RelTmOrderTmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTmOrderTmContact#item: ', item);
				}
				$scope.item.relTmOrderTmContacts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemTmOrder = function () {
			if(typeof $scope.item.tmOrders == "undefined"){
				$scope.item.tmOrders = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'TmorderEdit',
				controller: 'TmOrderEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemTmOrder#item: ', item);
				}
				$scope.item.tmOrders.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelAccountContacts = function () {
			if(typeof $scope.item.relAccountContactses == "undefined"){
				$scope.item.relAccountContactses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelaccountcontactsEdit',
				controller: 'RelAccountContactsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelAccountContacts#item: ', item);
				}
				$scope.item.relAccountContactses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelCruiseContacts = function () {
			if(typeof $scope.item.relCruiseContactses == "undefined"){
				$scope.item.relCruiseContactses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelcruisecontactsEdit',
				controller: 'RelCruiseContactsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelCruiseContacts#item: ', item);
				}
				$scope.item.relCruiseContactses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelServTransferTmContact = function () {
			if(typeof $scope.item.relServTransferTmContacts == "undefined"){
				$scope.item.relServTransferTmContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservtransfertmcontactEdit',
				controller: 'RelServTransferTmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontact' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServTransferTmContact#item: ', item);
				}
				$scope.item.relServTransferTmContacts.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemTmIncidents = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmincidentsFragmentSelector',
				controller: 'TmIncidentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmIncidentses = APP.checkDublicate2(
							$scope.item.tmIncidentses
						  , data.data
						  , 'TmIncidentsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactFragmentSelector',
				controller: 'PaymentContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContacts = APP.checkDublicate2(
							$scope.item.paymentContacts
						  , data.data
						  , 'PaymentContactView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmContactCommunications = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactcommunicationsFragmentSelector',
				controller: 'TmContactCommunicationsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmContactCommunicationses = APP.checkDublicate2(
							$scope.item.tmContactCommunicationses
						  , data.data
						  , 'TmContactCommunicationsView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmContactAddresses = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactaddressesFragmentSelector',
				controller: 'TmContactAddressesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmContactAddresseses = APP.checkDublicate2(
							$scope.item.tmContactAddresseses
						  , data.data
						  , 'TmContactAddressesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTmOrderTmContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderFragmentSelector',
				controller: 'TmOrderSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTmOrderTmContacts = APP.checkDublicate(
							$scope.item.relTmOrderTmContacts
						  , data.data
						  , 'tmorder'
						  , 'tmcontact'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemTmOrder = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmorderFragmentSelector',
				controller: 'TmOrderSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.tmOrders = APP.checkDublicate2(
							$scope.item.tmOrders
						  , data.data
						  , 'TmOrderView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelAccountContacts = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmaccountFragmentSelector',
				controller: 'TmAccountSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relAccountContactses = APP.checkDublicate(
							$scope.item.relAccountContactses
						  , data.data
						  , 'tmaccount'
						  , 'tmcontact'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelCruiseContacts = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServcruiseFragmentSelector',
				controller: 'ServCruiseSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relCruiseContactses = APP.checkDublicate(
							$scope.item.relCruiseContactses
						  , data.data
						  , 'servcruise'
						  , 'tmcontact'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServTransferTmContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServtransferFragmentSelector',
				controller: 'ServTransferSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServTransferTmContacts = APP.checkDublicate(
							$scope.item.relServTransferTmContacts
						  , data.data
						  , 'servtransfer'
						  , 'tmcontact'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('TmContactAddressesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmContactAddresses = new Array()
			, $scope.ctrl = {
					  name: 'TmContactAddressesListCtrl'
					, original: 'TmContactAddresses'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmcontactaddresses' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmContactAddressesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmContactAddresses: new Array()
			  	})
			  	, $scope.dataTmContactAddresses = $scope.$storage.dataTmContactAddresses;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmcontactaddressesEdit',
					controller: 'TmContactAddressesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmcontactaddresses' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmContactAddressesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmContactAddresses.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmcontactaddressesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmcontactaddressesEdit/' + itemId,
						controller: 'TmContactAddressesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmcontactaddresses' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmContactAddresses)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmContactAddressesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmContactAddresses[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmContactAddresses[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmcontactaddressesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmContactAddresses); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmContactAddressesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmContactAddresses.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmContactAddresses(true);
	    };
	    
	    $scope.loadAllDataTmContactAddresses = function() {
	    	$servicesStorage.TmContactAddressesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactAddresses = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactAddresses = $scope.dataTmContactAddresses;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmContactAddresses = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmContactAddressesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmContactAddresses = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactAddresses = APP.uniqueArray($scope.dataTmContactAddresses.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactAddresses = $scope.dataTmContactAddresses;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmContactAddresses = $scope.dataTmContactAddresses.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmContactAddressesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmContactAddresses(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmContactAddresses", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmContactAddressesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmContactAddresses = new Array()
		, $scope.ctrl = {
				  name: 'TmContactAddressesSelectorCtrl'
				, original: 'TmContactAddresses'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmContactAddressesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmContactAddresses: new Object()
		  	})
		  	, $scope.dataTmContactAddresses = $scope.$storage.dataTmContactAddresses;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmContactAddresses = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmContactAddressesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmContactAddresses = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactAddresses = APP.uniqueArray($scope.dataTmContactAddresses.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactAddresses = $scope.dataTmContactAddresses;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmContactAddresses(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmContactAddresses", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmContactAddressesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmContactAddressesEditCtrl'
			, original: 'TmContactAddresses'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmContactAddressesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmContactAddresses: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmContactAddresses', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmContactAddressesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcontactaddressesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmContactAddressesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcontactaddressesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmContactAddressesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmContactAddresses = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmContactAddresses');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			$servicesStorage.LocationCitiesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCities = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCities = $scope.dataLocationCities;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmContactAddresses", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmContactAddresses');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('TmContactCommunicationsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmContactCommunications = new Array()
			, $scope.ctrl = {
					  name: 'TmContactCommunicationsListCtrl'
					, original: 'TmContactCommunications'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmcontactcommunications' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmContactCommunicationsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmContactCommunications: new Array()
			  	})
			  	, $scope.dataTmContactCommunications = $scope.$storage.dataTmContactCommunications;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmcontactcommunicationsEdit',
					controller: 'TmContactCommunicationsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmcontactcommunications' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmContactCommunicationsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmContactCommunications.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmcontactcommunicationsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmcontactcommunicationsEdit/' + itemId,
						controller: 'TmContactCommunicationsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmcontactcommunications' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmContactCommunications)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmContactCommunicationsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmContactCommunications[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmContactCommunications[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmcontactcommunicationsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmContactCommunications); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmContactCommunicationsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmContactCommunications.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmContactCommunications(true);
	    };
	    
	    $scope.loadAllDataTmContactCommunications = function() {
	    	$servicesStorage.TmContactCommunicationsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactCommunications = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactCommunications = $scope.dataTmContactCommunications;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmContactCommunications = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmContactCommunicationsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmContactCommunications = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactCommunications = APP.uniqueArray($scope.dataTmContactCommunications.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactCommunications = $scope.dataTmContactCommunications;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmContactCommunications = $scope.dataTmContactCommunications.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmContactCommunicationsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmContactCommunications(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmContactCommunications", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmContactCommunicationsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmContactCommunications = new Array()
		, $scope.ctrl = {
				  name: 'TmContactCommunicationsSelectorCtrl'
				, original: 'TmContactCommunications'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmContactCommunicationsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmContactCommunications: new Object()
		  	})
		  	, $scope.dataTmContactCommunications = $scope.$storage.dataTmContactCommunications;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmContactCommunications = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmContactCommunicationsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmContactCommunications = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactCommunications = APP.uniqueArray($scope.dataTmContactCommunications.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactCommunications = $scope.dataTmContactCommunications;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmContactCommunications(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmContactCommunications", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmContactCommunicationsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmContactCommunicationsEditCtrl'
			, original: 'TmContactCommunications'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmContactCommunicationsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmContactCommunications: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmContactCommunications', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmContactCommunicationsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcontactcommunicationsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmContactCommunicationsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcontactcommunicationsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmContactCommunicationsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmContactCommunications = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmContactCommunications');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCities = $scope.$storage.dataLocationCities;
			}
			$servicesStorage.LocationCitiesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCities = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCities = $scope.dataLocationCities;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmContactCommunications", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmContactCommunications');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('TmContactEasyListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmContactEasy = new Array()
			, $scope.ctrl = {
					  name: 'TmContactEasyListCtrl'
					, original: 'TmContactEasy'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmcontacteasy' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmContactEasyListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmContactEasy: new Array()
			  	})
			  	, $scope.dataTmContactEasy = $scope.$storage.dataTmContactEasy;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmcontacteasyEdit',
					controller: 'TmContactEasyEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmcontacteasy' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmContactEasyDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmContactEasy.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmcontacteasyCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmcontacteasyEdit/' + itemId,
						controller: 'TmContactEasyEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmcontacteasy' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmContactEasy)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmContactEasyDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmContactEasy[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmContactEasy[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmcontacteasyEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmContactEasy); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmContactEasyDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmContactEasy.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmContactEasy(true);
	    };
	    
	    $scope.loadAllDataTmContactEasy = function() {
	    	$servicesStorage.TmContactEasyDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactEasy = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactEasy = $scope.dataTmContactEasy;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmContactEasy = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmContactEasyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmContactEasy = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactEasy = APP.uniqueArray($scope.dataTmContactEasy.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactEasy = $scope.dataTmContactEasy;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmContactEasy = $scope.dataTmContactEasy.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmContactEasyDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmContactEasy(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmContactEasy", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmContactEasySelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmContactEasy = new Array()
		, $scope.ctrl = {
				  name: 'TmContactEasySelectorCtrl'
				, original: 'TmContactEasy'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmContactEasySelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmContactEasy: new Object()
		  	})
		  	, $scope.dataTmContactEasy = $scope.$storage.dataTmContactEasy;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmContactEasy = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmContactEasyDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmContactEasy = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmContactEasy = APP.uniqueArray($scope.dataTmContactEasy.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmContactEasy = $scope.dataTmContactEasy;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmContactEasy(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmContactEasy", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmContactEasyEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmContactEasyEditCtrl'
			, original: 'TmContactEasy'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmContactEasyEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmContactEasy: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmContactEasy', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmContactEasyDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcontacteasyList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmContactEasyDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmcontacteasyList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmContactEasyDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmContactEasy = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmContactEasy');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataLocationCountries = $scope.$storage.dataLocationCountries;
			}
			$servicesStorage.LocationCountriesDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataLocationCountries = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataLocationCountries = $scope.dataLocationCountries;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmContactEasy", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmContactEasy');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelReqServHotelTmContactEasy = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteltmcontacteasyEdit',
				controller: 'RelReqServHotelTmContactEasyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelReqServHotelTmContactEasies
							, editItemId: itemId
							, excludeList: [ 'tmcontacteasy' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelReqServHotelTmContactEasy = function () {
			if(typeof $scope.item.relReqServHotelTmContactEasies == "undefined"){
				$scope.item.relReqServHotelTmContactEasies = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelreqservhoteltmcontacteasyEdit',
				controller: 'RelReqServHotelTmContactEasyEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmcontacteasy' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelReqServHotelTmContactEasy#item: ', item);
				}
				$scope.item.relReqServHotelTmContactEasies.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelReqServHotelTmContactEasy = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relReqServHotelTmContactEasies = APP.checkDublicate(
							$scope.item.relReqServHotelTmContactEasies
						  , data.data
						  , 'reqservhotel'
						  , 'tmcontacteasy'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('TmFirmsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmFirms = new Array()
			, $scope.ctrl = {
					  name: 'TmFirmsListCtrl'
					, original: 'TmFirms'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmfirms' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmFirmsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmFirms: new Array()
			  	})
			  	, $scope.dataTmFirms = $scope.$storage.dataTmFirms;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmfirmsEdit',
					controller: 'TmFirmsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmfirms' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmFirmsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmFirms.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmfirmsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmfirmsEdit/' + itemId,
						controller: 'TmFirmsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmfirms' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmFirms)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmFirmsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmFirms[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmFirms[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmfirmsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmFirms); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmFirmsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmFirms.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmFirms(true);
	    };
	    
	    $scope.loadAllDataTmFirms = function() {
	    	$servicesStorage.TmFirmsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmFirms = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmFirms = $scope.dataTmFirms;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmFirms = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmFirmsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmFirms = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmFirms = APP.uniqueArray($scope.dataTmFirms.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmFirms = $scope.dataTmFirms;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmFirms = $scope.dataTmFirms.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmFirmsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmFirms(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmFirms", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmFirmsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmFirms = new Array()
		, $scope.ctrl = {
				  name: 'TmFirmsSelectorCtrl'
				, original: 'TmFirms'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmFirmsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmFirms: new Object()
		  	})
		  	, $scope.dataTmFirms = $scope.$storage.dataTmFirms;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmFirms = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmFirmsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmFirms = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmFirms = APP.uniqueArray($scope.dataTmFirms.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmFirms = $scope.dataTmFirms;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmFirms(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmFirms", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmFirmsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmFirmsEditCtrl'
			, original: 'TmFirms'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmFirmsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmFirms: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmFirms', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmFirmsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmfirmsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmFirmsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmfirmsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmFirmsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmFirms = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmFirms');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmFirms", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmFirms');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('TmImageListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmImage = new Array()
			, $scope.ctrl = {
					  name: 'TmImageListCtrl'
					, original: 'TmImage'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmimage' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmImageListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmImage: new Array()
			  	})
			  	, $scope.dataTmImage = $scope.$storage.dataTmImage;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmimageEdit',
					controller: 'TmImageEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmimage' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmImageDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmImage.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmimageCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmimageEdit/' + itemId,
						controller: 'TmImageEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmimage' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmImage)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmImageDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmImage[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmImage[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmimageEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmImage); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmImageDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmImage.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmImage(true);
	    };
	    
	    $scope.loadAllDataTmImage = function() {
	    	$servicesStorage.TmImageDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmImage = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmImage = $scope.dataTmImage;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmImage = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmImageDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmImage = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmImage = APP.uniqueArray($scope.dataTmImage.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmImage = $scope.dataTmImage;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmImage = $scope.dataTmImage.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmImageDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmImage(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmImage", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmImageSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmImage = new Array()
		, $scope.ctrl = {
				  name: 'TmImageSelectorCtrl'
				, original: 'TmImage'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmImageSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmImage: new Object()
		  	})
		  	, $scope.dataTmImage = $scope.$storage.dataTmImage;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmImage = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmImageDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmImage = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmImage = APP.uniqueArray($scope.dataTmImage.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmImage = $scope.dataTmImage;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmImage(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmImage", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmImageEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmImageEditCtrl'
			, original: 'TmImage'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmImageEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmImage: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmImage', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmImageDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmimageList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmImageDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmimageList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmImageDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmImage = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmImage');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmImage", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmImage');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelServHotelImage = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelimageEdit',
				controller: 'RelServHotelImageEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelImages
							, editItemId: itemId
							, excludeList: [ 'tmimage' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelServHotelRoomImage = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelroomimageEdit',
				controller: 'RelServHotelRoomImageEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelRoomImages
							, editItemId: itemId
							, excludeList: [ 'tmimage' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemUsers = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'UsersEdit',
				controller: 'UsersEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemuserses
							, editItemId: itemId
							, excludeList: [ 'tmimage' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelServHotelImage = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadImage',
				controller: 'UploadImageCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relservhotelimages' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relServHotelImages = APP.checkDublicate(
						$scope.item.relServHotelImages
					  , data.data
					  , 'image'
					  , 'image'
					  , $scope.item
				);
				
			}, function(){});
		};
		
				$scope.createModalItemRelServHotelRoomImage = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadImage',
				controller: 'UploadImageCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'relservhotelroomimages' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relServHotelRoomImages = APP.checkDublicate(
						$scope.item.relServHotelRoomImages
					  , data.data
					  , 'image'
					  , 'image'
					  , $scope.item
				);
				
			}, function(){});
		};
		
				$scope.createModalItemUsers = function () {
			if(typeof $scope.item.userses == "undefined"){
				$scope.item.userses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'UsersEdit',
				controller: 'UsersEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmimage' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemUsers#item: ', item);
				}
				$scope.item.userses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelServHotelImage = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelImages = APP.checkDublicate(
							$scope.item.relServHotelImages
						  , data.data
						  , 'servhotel'
						  , 'tmimage'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelServHotelRoomImage = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelroomFragmentSelector',
				controller: 'ServHotelRoomSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelRoomImages = APP.checkDublicate(
							$scope.item.relServHotelRoomImages
						  , data.data
						  , 'servhotelroom'
						  , 'tmimage'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemUsers = function () {
			var modalInstance = $modal.open({
				templateUrl: 'UsersFragmentSelector',
				controller: 'UsersSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.userses = APP.checkDublicate2(
							$scope.item.userses
						  , data.data
						  , 'UsersView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('TmIncidentsListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmIncidents = new Array()
			, $scope.ctrl = {
					  name: 'TmIncidentsListCtrl'
					, original: 'TmIncidents'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmincidents' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmIncidentsListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmIncidents: new Array()
			  	})
			  	, $scope.dataTmIncidents = $scope.$storage.dataTmIncidents;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmincidentsEdit',
					controller: 'TmIncidentsEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmincidents' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmIncidentsDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmIncidents.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmincidentsCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmincidentsEdit/' + itemId,
						controller: 'TmIncidentsEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmincidents' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmIncidents)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmIncidentsDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmIncidents[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmIncidents[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmincidentsEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmIncidents); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmIncidentsDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmIncidents.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmIncidents(true);
	    };
	    
	    $scope.loadAllDataTmIncidents = function() {
	    	$servicesStorage.TmIncidentsDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmIncidents = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmIncidents = $scope.dataTmIncidents;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmIncidents = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmIncidentsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmIncidents = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmIncidents = APP.uniqueArray($scope.dataTmIncidents.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmIncidents = $scope.dataTmIncidents;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmIncidents = $scope.dataTmIncidents.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmIncidentsDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmIncidents(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmIncidents", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmIncidentsSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmIncidents = new Array()
		, $scope.ctrl = {
				  name: 'TmIncidentsSelectorCtrl'
				, original: 'TmIncidents'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmIncidentsSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmIncidents: new Object()
		  	})
		  	, $scope.dataTmIncidents = $scope.$storage.dataTmIncidents;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmIncidents = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmIncidentsDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmIncidents = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmIncidents = APP.uniqueArray($scope.dataTmIncidents.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmIncidents = $scope.dataTmIncidents;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmIncidents(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmIncidents", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmIncidentsEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmIncidentsEditCtrl'
			, original: 'TmIncidents'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmIncidentsEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmIncidents: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmIncidents', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmIncidentsDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmincidentsList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmIncidentsDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmincidentsList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmIncidentsDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmIncidents = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmIncidents');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServHotel = $scope.$storage.dataServHotel;
			}
			$servicesStorage.ServHotelDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServHotel = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServHotel = $scope.dataServHotel;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTour = $scope.$storage.dataServTour;
			}
			$servicesStorage.ServTourDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTour = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTour = $scope.dataServTour;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServTransfer = $scope.$storage.dataServTransfer;
			}
			$servicesStorage.ServTransferDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServTransfer = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServTransfer = $scope.dataServTransfer;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataServVisas = $scope.$storage.dataServVisas;
			}
			$servicesStorage.ServVisasDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataServVisas = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataServVisas = $scope.dataServVisas;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmIncidents", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmIncidents');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('TmOrderListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmOrder = new Array()
			, $scope.ctrl = {
					  name: 'TmOrderListCtrl'
					, original: 'TmOrder'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmorder' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmOrderListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmOrder: new Array()
			  	})
			  	, $scope.dataTmOrder = $scope.$storage.dataTmOrder;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmorderEdit',
					controller: 'TmOrderEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmorder' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmOrderDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmOrder.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmorderCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmorderEdit/' + itemId,
						controller: 'TmOrderEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmorder' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmOrder)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmOrderDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmOrder[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmOrder[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmorderEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmOrder); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmOrderDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmOrder.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmOrder(true);
	    };
	    
	    $scope.loadAllDataTmOrder = function() {
	    	$servicesStorage.TmOrderDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmOrder = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmOrder = $scope.dataTmOrder;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmOrder = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmOrderDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmOrder = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmOrder = APP.uniqueArray($scope.dataTmOrder.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmOrder = $scope.dataTmOrder;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmOrder = $scope.dataTmOrder.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmOrderDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmOrder(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmOrder", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmOrderSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmOrder = new Array()
		, $scope.ctrl = {
				  name: 'TmOrderSelectorCtrl'
				, original: 'TmOrder'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmOrderSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmOrder: new Object()
		  	})
		  	, $scope.dataTmOrder = $scope.$storage.dataTmOrder;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmOrder = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmOrderDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmOrder = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmOrder = APP.uniqueArray($scope.dataTmOrder.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmOrder = $scope.dataTmOrder;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmOrder(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmOrder", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmOrderEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmOrderEditCtrl'
			, original: 'TmOrder'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmOrderEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmOrder: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmOrder', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmOrderDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmorderList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmOrderDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmorderList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmOrderDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmOrder = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmOrder');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobal = $scope.$storage.dataDictGlobal;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobal = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobal = $scope.dataDictGlobal;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmAccount = $scope.$storage.dataTmAccount;
			}
			$servicesStorage.TmAccountDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmAccount = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmAccount = $scope.dataTmAccount;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmContact = $scope.$storage.dataTmContact;
			}
			$servicesStorage.TmContactDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmContact = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmContact = $scope.dataTmContact;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmOrder", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmOrder');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemPaymentContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactEdit',
				controller: 'PaymentContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentContacts
							, editItemId: itemId
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTmOrderDocDocuments = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderdocdocumentsEdit',
				controller: 'RelTmOrderDocDocumentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTmOrderDocDocumentses
							, editItemId: itemId
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemPaymentAccount = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItempaymentAccounts
							, editItemId: itemId
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTmOrderInfoServices = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderinfoservicesEdit',
				controller: 'RelTmOrderInfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTmOrderInfoServiceses
							, editItemId: itemId
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTmOrderServGifts = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderservgiftsEdit',
				controller: 'RelTmOrderServGiftsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTmOrderServGiftses
							, editItemId: itemId
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemRelTmOrderTmContact = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmordertmcontactEdit',
				controller: 'RelTmOrderTmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelTmOrderTmContacts
							, editItemId: itemId
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemPaymentContact = function () {
			if(typeof $scope.item.paymentContacts == "undefined"){
				$scope.item.paymentContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactEdit',
				controller: 'PaymentContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentContact#item: ', item);
				}
				$scope.item.paymentContacts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTmOrderDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderdocdocumentsFragmentMedit',
				controller: 'RelTmOrderDocDocumentsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'reltmorderdocdocumentses' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				$scope.item.relTmOrderDocDocumentses.push(item);
			}, function(){});
		};
		
		$scope.uploadRelTmOrderDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'uploadDocument',
				controller: 'UploadDocumentCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "createsimple"
							, isModal: true
							, isSimple: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'reltmorderdocdocumentses' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(data){
				$scope.item.relTmOrderDocDocumentses = APP.checkDublicate(
						$scope.item.relTmOrderDocDocumentses
					  , data.data[0]
					  , 'docdocuments'
					  , 'tmorder'
					  , $scope.item
				);
				
			}, function(){});
		};
		
		$scope.createModalItemPaymentAccount = function () {
			if(typeof $scope.item.paymentAccounts == "undefined"){
				$scope.item.paymentAccounts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountEdit',
				controller: 'PaymentAccountEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemPaymentAccount#item: ', item);
				}
				$scope.item.paymentAccounts.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTmOrderInfoServices = function () {
			if(typeof $scope.item.relTmOrderInfoServiceses == "undefined"){
				$scope.item.relTmOrderInfoServiceses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderinfoservicesEdit',
				controller: 'RelTmOrderInfoServicesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTmOrderInfoServices#item: ', item);
				}
				$scope.item.relTmOrderInfoServiceses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTmOrderServGifts = function () {
			if(typeof $scope.item.relTmOrderServGiftses == "undefined"){
				$scope.item.relTmOrderServGiftses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltmorderservgiftsEdit',
				controller: 'RelTmOrderServGiftsEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTmOrderServGifts#item: ', item);
				}
				$scope.item.relTmOrderServGiftses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemRelTmOrderTmContact = function () {
			if(typeof $scope.item.relTmOrderTmContacts == "undefined"){
				$scope.item.relTmOrderTmContacts = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReltmordertmcontactEdit',
				controller: 'RelTmOrderTmContactEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmorder' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelTmOrderTmContact#item: ', item);
				}
				$scope.item.relTmOrderTmContacts.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemPaymentContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentcontactFragmentSelector',
				controller: 'PaymentContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentContacts = APP.checkDublicate2(
							$scope.item.paymentContacts
						  , data.data
						  , 'PaymentContactView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTmOrderDocDocuments = function () {
			var modalInstance = $modal.open({
				templateUrl: 'DocdocumentsFragmentSelector',
				controller: 'DocDocumentsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTmOrderDocDocumentses = APP.checkDublicate(
							$scope.item.relTmOrderDocDocumentses
						  , data.data
						  , 'docdocuments'
						  , 'tmorder'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemPaymentAccount = function () {
			var modalInstance = $modal.open({
				templateUrl: 'PaymentaccountFragmentSelector',
				controller: 'PaymentAccountSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.paymentAccounts = APP.checkDublicate2(
							$scope.item.paymentAccounts
						  , data.data
						  , 'PaymentAccountView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTmOrderInfoServices = function () {
			var modalInstance = $modal.open({
				templateUrl: 'InfoservicesFragmentSelector',
				controller: 'InfoServicesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTmOrderInfoServiceses = APP.checkDublicate(
							$scope.item.relTmOrderInfoServiceses
						  , data.data
						  , 'infoservices'
						  , 'tmorder'
						  , $scope.item
						  , true
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTmOrderServGifts = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServgiftsFragmentSelector',
				controller: 'ServGiftsSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTmOrderServGiftses = APP.checkDublicate(
							$scope.item.relTmOrderServGiftses
						  , data.data
						  , 'servgifts'
						  , 'tmorder'
						  , $scope.item
				);
				
			}, function(){});
		};
	
		$scope.pickItemRelTmOrderTmContact = function () {
			var modalInstance = $modal.open({
				templateUrl: 'TmcontactFragmentSelector',
				controller: 'TmContactSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relTmOrderTmContacts = APP.checkDublicate(
							$scope.item.relTmOrderTmContacts
						  , data.data
						  , 'tmcontact'
						  , 'tmorder'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('TmPoliciesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmPolicies = new Array()
			, $scope.ctrl = {
					  name: 'TmPoliciesListCtrl'
					, original: 'TmPolicies'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmpolicies' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmPoliciesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmPolicies: new Array()
			  	})
			  	, $scope.dataTmPolicies = $scope.$storage.dataTmPolicies;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmpoliciesEdit',
					controller: 'TmPoliciesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmpolicies' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmPoliciesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmPolicies.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmpoliciesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmpoliciesEdit/' + itemId,
						controller: 'TmPoliciesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmpolicies' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmPolicies)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmPoliciesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmPolicies[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmPolicies[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmpoliciesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmPolicies); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmPoliciesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmPolicies.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmPolicies(true);
	    };
	    
	    $scope.loadAllDataTmPolicies = function() {
	    	$servicesStorage.TmPoliciesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmPolicies = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmPolicies = $scope.dataTmPolicies;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmPolicies = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmPoliciesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmPolicies = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmPolicies = APP.uniqueArray($scope.dataTmPolicies.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmPolicies = $scope.dataTmPolicies;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmPolicies = $scope.dataTmPolicies.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmPoliciesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmPolicies(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmPolicies", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmPoliciesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmPolicies = new Array()
		, $scope.ctrl = {
				  name: 'TmPoliciesSelectorCtrl'
				, original: 'TmPolicies'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmPoliciesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmPolicies: new Object()
		  	})
		  	, $scope.dataTmPolicies = $scope.$storage.dataTmPolicies;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmPolicies = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmPoliciesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmPolicies = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmPolicies = APP.uniqueArray($scope.dataTmPolicies.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmPolicies = $scope.dataTmPolicies;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmPolicies(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmPolicies", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmPoliciesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmPoliciesEditCtrl'
			, original: 'TmPolicies'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmPoliciesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmPolicies: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmPolicies', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmPoliciesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmpoliciesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmPoliciesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmpoliciesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmPoliciesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmPolicies = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmPolicies');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByFeatureId = $scope.$storage.dataDictGlobalByFeatureId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByFeatureId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByFeatureId = $scope.dataDictGlobalByFeatureId;
				}
			});

			if($staticStorage.benchmark().isCacheble()){
				$scope.dataDictGlobalByServiceId = $scope.$storage.dataDictGlobalByServiceId;
			}
			$servicesStorage.DictGlobalDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataDictGlobalByServiceId = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataDictGlobalByServiceId = $scope.dataDictGlobalByServiceId;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmPolicies", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmPolicies');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemRelServHotelInfoPolicies = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfopoliciesEdit',
				controller: 'RelServHotelInfoPoliciesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemrelServHotelInfoPolicieses
							, editItemId: itemId
							, excludeList: [ 'tmpolicies' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemRelServHotelInfoPolicies = function () {
			if(typeof $scope.item.relServHotelInfoPolicieses == "undefined"){
				$scope.item.relServHotelInfoPolicieses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'RelservhotelinfopoliciesEdit',
				controller: 'RelServHotelInfoPoliciesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'tmpolicies' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemRelServHotelInfoPolicies#item: ', item);
				}
				$scope.item.relServHotelInfoPolicieses.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemRelServHotelInfoPolicies = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ServhotelFragmentSelector',
				controller: 'ServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.relServHotelInfoPolicieses = APP.checkDublicate(
							$scope.item.relServHotelInfoPolicieses
						  , data.data
						  , 'servhotel'
						  , 'tmpolicies'
						  , $scope.item
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/

.controller('TmUserInfoListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataTmUserInfo = new Array()
			, $scope.ctrl = {
					  name: 'TmUserInfoListCtrl'
					, original: 'TmUserInfo'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'tmuserinfo' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('TmUserInfoListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataTmUserInfo: new Array()
			  	})
			  	, $scope.dataTmUserInfo = $scope.$storage.dataTmUserInfo;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'TmuserinfoEdit',
					controller: 'TmUserInfoEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'tmuserinfo' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.TmUserInfoDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataTmUserInfo.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/TmuserinfoCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'TmuserinfoEdit/' + itemId,
						controller: 'TmUserInfoEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'tmuserinfo' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataTmUserInfo)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.TmUserInfoDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataTmUserInfo[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataTmUserInfo[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/TmuserinfoEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataTmUserInfo); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.TmUserInfoDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataTmUserInfo.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataTmUserInfo(true);
	    };
	    
	    $scope.loadAllDataTmUserInfo = function() {
	    	$servicesStorage.TmUserInfoDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmUserInfo = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmUserInfo = $scope.dataTmUserInfo;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataTmUserInfo = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmUserInfoDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmUserInfo = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmUserInfo = APP.uniqueArray($scope.dataTmUserInfo.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmUserInfo = $scope.dataTmUserInfo;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredTmUserInfo = $scope.dataTmUserInfo.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.TmUserInfoDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmUserInfo(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmUserInfo", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmUserInfoSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataTmUserInfo = new Array()
		, $scope.ctrl = {
				  name: 'TmUserInfoSelectorCtrl'
				, original: 'TmUserInfo'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('TmUserInfoSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataTmUserInfo: new Object()
		  	})
		  	, $scope.dataTmUserInfo = $scope.$storage.dataTmUserInfo;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataTmUserInfo = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.TmUserInfoDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataTmUserInfo = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataTmUserInfo = APP.uniqueArray($scope.dataTmUserInfo.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataTmUserInfo = $scope.dataTmUserInfo;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataTmUserInfo(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("TmUserInfo", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('TmUserInfoEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'TmUserInfoEditCtrl'
			, original: 'TmUserInfo'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('TmUserInfoEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemTmUserInfo: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'TmUserInfo', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.TmUserInfoDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmuserinfoList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.TmUserInfoDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/TmuserinfoList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.TmUserInfoDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemTmUserInfo = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'TmUserInfo');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("TmUserInfo", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'TmUserInfo');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('UserRolesListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataUserRoles = new Array()
			, $scope.ctrl = {
					  name: 'UserRolesListCtrl'
					, original: 'UserRoles'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'userroles' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('UserRolesListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataUserRoles: new Array()
			  	})
			  	, $scope.dataUserRoles = $scope.$storage.dataUserRoles;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'UserrolesEdit',
					controller: 'UserRolesEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'userroles' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.UserRolesDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataUserRoles.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/UserrolesCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'UserrolesEdit/' + itemId,
						controller: 'UserRolesEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'userroles' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataUserRoles)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.UserRolesDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataUserRoles[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataUserRoles[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/UserrolesEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataUserRoles); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.UserRolesDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataUserRoles.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataUserRoles(true);
	    };
	    
	    $scope.loadAllDataUserRoles = function() {
	    	$servicesStorage.UserRolesDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataUserRoles = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataUserRoles = $scope.dataUserRoles;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataUserRoles = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.UserRolesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataUserRoles = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataUserRoles = APP.uniqueArray($scope.dataUserRoles.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataUserRoles = $scope.dataUserRoles;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredUserRoles = $scope.dataUserRoles.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.UserRolesDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataUserRoles(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("UserRoles", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('UserRolesSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataUserRoles = new Array()
		, $scope.ctrl = {
				  name: 'UserRolesSelectorCtrl'
				, original: 'UserRoles'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('UserRolesSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataUserRoles: new Object()
		  	})
		  	, $scope.dataUserRoles = $scope.$storage.dataUserRoles;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataUserRoles = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.UserRolesDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataUserRoles = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataUserRoles = APP.uniqueArray($scope.dataUserRoles.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataUserRoles = $scope.dataUserRoles;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataUserRoles(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("UserRoles", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('UserRolesEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'UserRolesEditCtrl'
			, original: 'UserRoles'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('UserRolesEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemUserRoles: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'UserRoles', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.UserRolesDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/UserrolesList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.UserRolesDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/UserrolesList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.UserRolesDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemUserRoles = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'UserRoles');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataUsers = $scope.$storage.dataUsers;
			}
			$servicesStorage.UsersDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataUsers = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataUsers = $scope.dataUsers;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("UserRoles", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'UserRoles');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/


		/*---------------------------*/
		

		/*---------------------------*/
		

		
}])

/*===========================*/

.controller('UsersListCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$location', '$route', '$filter', '$modal', '$localStorage', 'toaster',  
function ($scope, $servicesStorage, $staticStorage, $location, $route, $filter, $modal, $localStorage, toaster) {

		function variables() {
			  $scope.dataUsers = new Array()
			, $scope.ctrl = {
					  name: 'UsersListCtrl'
					, original: 'Users'  
			}  
			, $scope.scrollable = {
					  attemptsNumber: 0
			  		, dataLoading: true
			  		, pageNumber: 1
			  		, pageSize: $staticStorage.benchmark().batchSize()
			}
			, $scope.selectedItem = new Object()
			, $scope.selectedItems = new Array()
			, $scope.excludes = [ 'users' ]
			, $scope.details = new Object() 
			, $scope.debug = APP.debugInfo('UsersListCtrl');
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.$storage = $localStorage.$default({
						dataUsers: new Array()
			  	})
			  	, $scope.dataUsers = $scope.$storage.dataUsers;
			}
			
			APP.defaultListCtrl($scope, $filter);
		};
		
		$scope.createModalNewItem = function () {
			if($staticStorage.benchmark().isModal()){
				var modalInstance = $modal.open({
					templateUrl: 'UsersEdit',
					controller: 'UsersEditCtrl',
					backdrop: 'static', 
					resolve: {
						modalSettings: function () { 
							return { 
								  item: $scope.selectedItem
								, mode: "create"
								, isModal: true
								, isSimple: false
								, editItem: new Object()
								, editItemId: -1
								, excludeList: [ 'users' ]
							}; 
						}
					}
				});
				
				modalInstance.result.then(function (data) {
					$servicesStorage.UsersDao().showView({ id: data.item.id, initDicts: true, initLists: false }, function (response) {
						if(response.success){
							$scope.dataUsers.unshift(JSOG.decode(response.data));
						}
						else {
							toaster.pop('error', response.message);
						}
					});
				
				}, function(){});
			}
			else {
				$location.path('/UsersCreate');
			}
		};

		$scope.editModalItem = function (itemId) {
			if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
		
			if(!$scope.isDisabledEdit()){
				if($staticStorage.benchmark().isModal()){
					var modalInstance = $modal.open({
						templateUrl: 'UsersEdit/' + itemId,
						controller: 'UsersEditCtrl',
						backdrop: 'static', 
						resolve: {
							modalSettings: function () { 
								return { 
									  item: $scope.selectedItem
									, mode: "edit"
									, isModal: true
									, isSimple: false
									, editItem: $scope.selectedItem
									, editItemId: itemId
									, excludeList: [ 'users' ]
									, index: APP.loadIndex($scope.selectedItem.id, $scope.dataUsers)
								}; 
							}
						}
					});
		
				    modalInstance.result.then(function(data){
				    	$servicesStorage.UsersDao().showView({ id: data.item.id, initDicts: true, initLists: true }, function (response) {
				    		$scope.dataUsers[data.index] = JSOG.decode(response.data);
							$scope.selectedItem = $scope.dataUsers[data.index];
						});
				    }, function(){
				    	
				    });
			    }
			    else {
			    	$location.path('/UsersEdit/' + itemId);
			    }
		    }
		};
	
	    $scope.deleteItem = function (itemId, index) {
	    	if(typeof itemId == 'undefined'){
				itemId = $scope.selectedItem.id;
			}
			
	    	if(typeof index == 'undefined'){
	    		index = APP.loadIndex(itemId, $scope.dataUsers); 
			}
			
	    	if(!$scope.isDisabledEdit()){
			    $servicesStorage.UsersDao().remove({ id: itemId }, new Object(), function(response){
			    	if(response.success){
			    		$scope.dataUsers.splice(index, 1);
			    	}
			    });
		    }
	    };
	    
	    $scope.reloadData = function () {
	    	$scope.scrollable.pageNumber = 1;
	    	$scope.loadDataUsers(true);
	    };
	    
	    $scope.loadAllDataUsers = function() {
	    	$servicesStorage.UsersDao().listView({ initDicts: true, initLists: false }, function (data) {
	    		$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataUsers = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataUsers = $scope.dataUsers;
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	    	});
	    };
	    
	    $scope.loadDataUsers = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.UsersDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataUsers = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				if(data.success){
					if (data.total > 0) {
						$scope.dataUsers = APP.uniqueArray($scope.dataUsers.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataUsers = $scope.dataUsers;
						}
						if(typeof drop !== 'undefined' && drop){
			    			$scope.filteredUsers = $scope.dataUsers.slice(0);
						}
					}
					else {
						$scope.scrollable.pageNumber--;
					}
				}
				else {
					toaster.pop('error', data.message);
				}
	 		});
		};
	    
		$scope.setSelectedItem = function (item) {
			$scope.selectedItem = APP.loadItem(item.id, $scope.selectedItems);
			
			if(JSON.stringify($scope.selectedItem) === '{}') { 
				$servicesStorage.UsersDao().showView({ id: item.id, initDicts: true , initLists: true }, function (data) {
					$scope.selectedItem = JSOG.decode(data.data);
					$scope.selectedItems.push($scope.selectedItem);
				});
			}
			
			return $scope.selectedItem;
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataUsers(true);
		    	clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("Users", $staticStorage));
		};
		
		variables();
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('UsersSelectorCtrl', ['$scope', '$servicesStorage', '$staticStorage', '$modalInstance', '$localStorage', '$q', 'toaster',
function ($scope, $servicesStorage, $staticStorage, $modalInstance, $localStorage, $q, toaster) {

		  $scope.dataUsers = new Array()
		, $scope.ctrl = {
				  name: 'UsersSelectorCtrl'
				, original: 'Users'  
		}
		, $scope.scrollable = {
				  attemptsNumber: 0
		  		, dataLoading: true
		  		, pageNumber: 1
		  		, pageSize: $staticStorage.benchmark().batchSize()
		}
		, $scope.selectedItems = new Array()
		, $scope.loading = true
		, $scope.debug = APP.debugInfo('UsersSelectorCtrl');
		
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					dataUsers: new Object()
		  	})
		  	, $scope.dataUsers = $scope.$storage.dataUsers;
	  	}

		APP.defaultSelectorCtrl($scope, $modalInstance, $servicesStorage, $staticStorage, $q, toaster);
		
		$scope.loadDataUsers = function(drop) {
			$scope.scrollable.attemptsNumber++;
			$scope.scrollable.dataLoading = true;
		  	
			$servicesStorage.UsersDao().listViewScrollable({ initDicts: true , initLists: false , pageNumber: $scope.scrollable.pageNumber++ , pageSize: $scope.scrollable.pageSize}, function (data) {
				if(typeof drop !== 'undefined' && drop){
	    			$scope.dataUsers = new Array();
	    		}
			
				$scope.scrollable.dataLoading = false;
				$scope.loading = false;
				
				if(data.success){
					if (data.total > 0) {
						$scope.dataUsers = APP.uniqueArray($scope.dataUsers.concat(JSOG.decode(data.data)));
						if($staticStorage.benchmark().isCacheble()){
							$scope.$storage.dataUsers = $scope.dataUsers;
						}
					}
				}
				else {
					$scope.scrollable.pageNumber--;
					toaster.pop('error', data.message);
				}
	 		});
		};
		
		function init() {
		    var timer = setTimeout(function() {
	    		$scope.loadDataUsers(true);
				clearTimeout(timer);
		    	timer = null;
			}, APP.timeOutCount("Users", $staticStorage));
		};
		
		init();
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
}])
.controller('UsersEditCtrl', ['$scope', '$rootScope', '$routeParams', '$location', '$modal', '$modalInstance', 'modalSettings', '$servicesStorage', '$filter', '$localStorage', '$staticStorage', 'toaster', '$q', 'APP_INFO', 
function ($scope, $rootScope, $routeParams, $location, $modal, $modalInstance, modalSettings, $servicesStorage, $filter, $localStorage, $staticStorage, toaster, $q, APP_INFO) {
	
		  $scope.item = new Object()
		, $scope.ctrl = {
			  name: 'UsersEditCtrl'
			, original: 'Users'  
		}
		, $scope.itemId = -1
		, $scope.itemIndex = -1
		, $scope.loading = true
		, $scope.access = {
			    edit: false
			  , editsimple: false
			  , create: false
			  , createsimple: false
		}
		, $scope.scrollable = {
				  id: modalSettings.editItemId == -1 ? $routeParams.id : modalSettings.editItemId
				, initDicts: true 
				, initLists: true
		}
		, $scope.selectedItem = new Object()
		, $scope.details = new Object()
		, $scope.debug = APP.debugInfo('UsersEditCtrl');
		//, $scope.tinymceOptions = APP.loadtinymceOption();
		
		if($staticStorage.benchmark().isCacheble()){
			$scope.$storage = $localStorage.$default({
					itemUsers: new Object()
		  	});
		}
		
		APP.defaultEditCtrl($scope, $modal, $modalInstance, modalSettings, $servicesStorage, $staticStorage, 'Users', $filter, $location, $rootScope, toaster, APP_INFO);
		
		$scope.updateItem = function () {
			$scope.loading = true;
			var identity = $scope.item.id
			,	item = JSOG.stringify($scope.item);
			
			if(APP_INFO.debug){
				console.info('$scope.updateItem#item: ', $scope.item);
			}
			
			if($scope.access.edit || $scope.access.editsimple){
				$servicesStorage.UsersDao().update({id: identity}, item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/UsersList');
					}
				});
			}
			else if($scope.access.create || $scope.access.createsimple){
				$servicesStorage.UsersDao().create(item, function (data) {
					var result = {
						  index: modalSettings.index
						, item: new Object()
					};
					if(data.success && data.data.length > 0){
						result.item = JSOG.decode(data.data[0]);
					}
					else{
						result.item = JSOG.parse(item);
					}
					
					if(modalSettings.isModal){
						$modalInstance.close(result);
					}
					else {
						$location.path($rootScope.previousPage2);
						//$location.path('/UsersList');
					}
				});
			}
			
		};
	
		/*---------------------------*/
		
		function init(callback) {
		
			if(callback){
				callback();
			}
		
			var timer = setTimeout(function() {
				$scope.loading = APP.checkItem($scope.item, modalSettings);
			
				if($scope.access.edit || $scope.access.editsimple){
					$servicesStorage.UsersDao().showObj($scope.scrollable, function (data) {
						$scope.item = JSOG.decode(data.data);
						if($staticStorage.benchmark().isCacheble()){ 
							$scope.$storage.itemUsers = data.data;
						} 
						$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
						
						APP.afterLoadingDataEditCtrl($scope, $staticStorage, 'Users');
					});
				}
				else {
					$scope.loading = APP.checkLoading($scope.ctrl, modalSettings, $q);
				}
			
			if($staticStorage.benchmark().isCacheble()){
				$scope.dataTmImage = $scope.$storage.dataTmImage;
			}
			$servicesStorage.TmImageDao().listScrollable({initDicts: false, initLists: false, pageNumber:1, pageSize: 10}, function (data) {
				$scope.dataTmImage = JSOG.decode(data.data);
				if($staticStorage.benchmark().isCacheble()){ 
					$scope.$storage.dataTmImage = $scope.dataTmImage;
				}
			});

		
				clearTimeout(timer);
		    	timer = null;
		
			}, APP.timeOutCount("Users", $staticStorage));
		};
		
		init(function() {
			APP.beforeLoadingDataEditCtrl($scope, $staticStorage, modalSettings, 'Users');
		});
		
		$scope.$on('$destroy', function() {
			for (var key in $scope) {
				if (key.substr(0, 1) != '$' && key != 'this')
					delete $scope[key];
			}
		});
		
		/*---------------------------*/

		$scope.editModalItemReqServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqServHotels
							, editItemId: itemId
							, excludeList: [ 'users' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemUserRoles = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'UserrolesEdit',
				controller: 'UserRolesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemuserRoleses
							, editItemId: itemId
							, excludeList: [ 'users' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		
		$scope.editModalItemReqServHotel = function (itemId) {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "edit"
							, isModal: true
							, isSimple: false
							, editItem: $scope.selectedItemreqServHotels
							, editItemId: itemId
							, excludeList: [ 'users' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.createModalItemReqServHotel = function () {
			if(typeof $scope.item.reqServHotels == "undefined"){
				$scope.item.reqServHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'users' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqServHotel#item: ', item);
				}
				$scope.item.reqServHotels.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemUserRoles = function () {
			if(typeof $scope.item.userRoleses == "undefined"){
				$scope.item.userRoleses = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'UserrolesEdit',
				controller: 'UserRolesEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'users' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemUserRoles#item: ', item);
				}
				$scope.item.userRoleses.push(item.item);
			}, function(){});
		};
		
		$scope.createModalItemReqServHotel = function () {
			if(typeof $scope.item.reqServHotels == "undefined"){
				$scope.item.reqServHotels = [];
			}
		
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelEdit',
				controller: 'ReqServHotelEditCtrl',
				resolve: {
					modalSettings: function () { 
						return { 
							  item: $scope.item
							, mode: "create"
							, isModal: true
							, isSimple: false
							, insertParent: true
							, editItem: {}
							, editItemId: -1
							, excludeList: [ 'users' ]
						} 
					}
				}
			});
			
			modalInstance.result.then(function(item){
				if(APP_INFO.debug){
					console.info('$scope.createModalItemReqServHotel#item: ', item);
				}
				$scope.item.reqServHotels.push(item.item);
			}, function(){});
		};
		

		/*---------------------------*/
		
		$scope.pickItemReqServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqServHotels = APP.checkDublicate2(
							$scope.item.reqServHotels
						  , data.data
						  , 'ReqServHotelView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemUserRoles = function () {
			var modalInstance = $modal.open({
				templateUrl: 'UserrolesFragmentSelector',
				controller: 'UserRolesSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.userRoleses = APP.checkDublicate2(
							$scope.item.userRoleses
						  , data.data
						  , 'UserRolesView'
				);
				
			}, function(){});
		};
	
		$scope.pickItemReqServHotel = function () {
			var modalInstance = $modal.open({
				templateUrl: 'ReqservhotelFragmentSelector',
				controller: 'ReqServHotelSelectorCtrl',
				resolve: {
					item: function () { return $scope.selectedItem; }
				}
			});
			
			modalInstance.result.then(function (data) {
				$scope.item.reqServHotels = APP.checkDublicate2(
							$scope.item.reqServHotels
						  , data.data
						  , 'ReqServHotelView'
				);
				
			}, function(){});
		};
	

		
}])

/*===========================*/


;