/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.Transient;
import com.fasterxml.jackson.annotation.JsonIgnore;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;
import javax.persistence.CascadeType;
import org.test.shop.model.domain.SObject;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;




/**
 * Users generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey"
			, "createon"
			, "modifyon"
			, "popularity" 
})
@Entity
@Table(name="users")
public class Users extends SObject  {

	private static final long serialVersionUID = 7668658664825973L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("image") private TmImage tmImage;
	@JsonProperty("activated") private Boolean activated;
	@JsonProperty("activationkey") private String activationkey;
	@JsonProperty("email") private String email;
	@JsonProperty("enabled") private Boolean enabled;
	@JsonProperty("firstname") private String firstname;
	@JsonProperty("landingpage") private String landingpage;
	@JsonProperty("langkey") private String langkey;
	@JsonProperty("lastname") private String lastname;
	@JsonProperty("password") private String password;
	@JsonProperty("username") private String username;
	@JsonProperty("token") private String token;
	@JsonProperty("phonenumber") private String phonenumber;
	@JsonProperty("usercolor") private String userColor;
	@JsonProperty("shopuser") private Boolean shopUser;
	@JsonProperty("physicalperson") private Boolean physicalPerson;
	@JsonProperty("legalentity") private Boolean legalEntity;
	private List<ReqServHotel> reqServHotelsForRequestUserId = new LinkedList<ReqServHotel>();
	private List<UserRoles> userRoleses = new LinkedList<UserRoles>();
	private List<RelUserDetails> relUserDetailses = new LinkedList<RelUserDetails>();
	private List<ReqServHotel> reqServHotelsForResponseUserId = new LinkedList<ReqServHotel>();

	public Users() {
	}

	public Users(int id, String username) {
		this.id = id;
		this.username=username;
	}

	public Users(int id,

 Boolean activated, String activationkey,
			String email, Boolean enabled, String firstname,
			String landingpage, String langkey, String lastname,
			String password, String username, String token, String phonenumber,
			String userColor, Boolean shopUser,
			Boolean physicalPerson, Boolean legalEntity,
			List<ReqServHotel> reqServHotelsForRequestUserId,
			List<UserRoles> userRoleses, List<RelUserDetails> relUserDetailses,
			List<ReqServHotel> reqServHotelsForResponseUserId) {
		this.id = id;
		this.tmImage = tmImage;
		this.activated = activated;
		this.activationkey = activationkey;
		this.email = email;
		this.enabled = enabled;
		this.firstname=firstname;
		this.landingpage = landingpage;
		this.langkey = langkey;
		this.lastname=lastname;
		this.password = password;
		this.username=username;
		this.token = token;
		this.phonenumber = phonenumber;
		this.userColor = userColor;
		this.shopUser = shopUser;
		this.physicalPerson = physicalPerson;
		this.legalEntity = legalEntity;
		this.reqServHotelsForRequestUserId = reqServHotelsForRequestUserId;
		this.userRoleses = userRoleses;
		this.relUserDetailses = relUserDetailses;
		this.reqServHotelsForResponseUserId = reqServHotelsForResponseUserId;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_USERS")
	@SequenceGenerator(name = "SQ_USERS", sequenceName = "SQ_USERS", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="image_id")
	public TmImage getTmImage() {
		return this.tmImage;
	}

	public void setTmImage(TmImage tmImage) {
		this.tmImage = tmImage;
	}

	

	

	

	

	@Column(name="activated")
	public Boolean getActivated() {
		return this.activated;
	}

	public void setActivated(Boolean activated) {
		this.activated = activated;
	}

	@Column(name="activationkey")
	public String getActivationkey() {
		return this.activationkey;
	}

	public void setActivationkey(String activationkey) {
		this.activationkey = activationkey;
	}

	@Column(name="email")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name="enabled")
	public Boolean getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}

	@Column(name="firstname")
	public String getFirstname() {
		return this.firstname;
	}

	public void setFirstname(String firstname) {
		this.firstname=firstname;
	}

	@Column(name="landingpage")
	public String getLandingpage() {
		return this.landingpage;
	}

	public void setLandingpage(String landingpage) {
		this.landingpage = landingpage;
	}

	@Column(name="langkey")
	public String getLangkey() {
		return this.langkey;
	}

	public void setLangkey(String langkey) {
		this.langkey = langkey;
	}

	@Column(name="lastname")
	public String getLastname() {
		return this.lastname;
	}

	public void setLastname(String lastname) {
		this.lastname=lastname;
	}

	@Column(name="password")
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name="username", unique = true, nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username=username;
	}

	@Column(name="token")
	public String getToken() {
		return this.token;
	}

	public void setToken(String token) {
		this.token = token;
	}

	@Column(name="phonenumber")
	public String getPhonenumber() {
		return this.phonenumber;
	}

	public void setPhonenumber(String phonenumber) {
		this.phonenumber = phonenumber;
	}

	@Column(name="user_color")
	public String getUserColor() {
		return this.userColor;
	}

	public void setUserColor(String userColor) {
		this.userColor = userColor;
	}

	

	@Column(name="shop_user")
	public Boolean getShopUser() {
		return this.shopUser;
	}

	public void setShopUser(Boolean shopUser) {
		this.shopUser = shopUser;
	}

	@Column(name="physical_person")
	public Boolean getPhysicalPerson() {
		return this.physicalPerson;
	}

	public void setPhysicalPerson(Boolean physicalPerson) {
		this.physicalPerson = physicalPerson;
	}

	@Column(name="legal_entity")
	public Boolean getLegalEntity() {
		return this.legalEntity;
	}

	public void setLegalEntity(Boolean legalEntity) {
		this.legalEntity = legalEntity;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="usersByRequestUserId")
	public List<ReqServHotel> getReqServHotelsForRequestUserId() {
		return this.reqServHotelsForRequestUserId;
	}

	public void setReqServHotelsForRequestUserId(List<ReqServHotel> reqServHotelsForRequestUserId) {
		this.reqServHotelsForRequestUserId = reqServHotelsForRequestUserId;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="users", cascade = CascadeType.ALL)
	public List<UserRoles> getUserRoleses() {
		return this.userRoleses;
	}

	public void setUserRoleses(List<UserRoles> userRoleses) {
		this.userRoleses = userRoleses;
	}

	@OneToMany(fetch=FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy="users")
	public List<RelUserDetails> getRelUserDetailses() {
		return this.relUserDetailses;
	}

	public void setRelUserDetailses(List<RelUserDetails> relUserDetailses) {
		this.relUserDetailses = relUserDetailses;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="usersByResponseUserId")
	public List<ReqServHotel> getReqServHotelsForResponseUserId() {
		return this.reqServHotelsForResponseUserId;
	}

	public void setReqServHotelsForResponseUserId(List<ReqServHotel> reqServHotelsForResponseUserId) {
		this.reqServHotelsForResponseUserId = reqServHotelsForResponseUserId;
	}
// #SETTER_AND_GETTER

	@Transient
	public String getLabel() {
		return lastname + " " + firstname; 
	}

	public void setLabel(String label) {
		
	}
	
	@JsonProperty("apitoken") private String apitoken;
	
	@Transient
	public String getApitoken() {
		return apitoken; 
	}

	public void setApitoken(String apitoken) {
		this.apitoken = apitoken;
	}
	
	@JsonProperty("hashkey") private String hashkey;
	
	@Transient
	public String getHashkey() {
		return hashkey; 
	}

	public void setHashkey(String hashkey) {
		this.hashkey = hashkey;
	}
	
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ReqServHotel arg0 : getReqServHotelsForRequestUserId()) {
			arg0.setUsersByRequestUserId(null);
		}

		for (UserRoles arg0 : getUserRoleses()) {
			arg0.setUsers(null);
		}

		for (ReqServHotel arg0 : getReqServHotelsForResponseUserId()) {
			arg0.setUsersByResponseUserId(null);
		}



		tmImage = null;

	}
	
	public Users specialInit() {
	
		
		return this;
	}
	
	public Users init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public Users preInitList() {
		if(getUserRoleses() == null) setUserRoleses(new LinkedList());
		getUserRoleses().parallelStream().forEach(it -> it.setUsers(this));

		return this;
	}
	
	public Users initList() {
		initLists(reqServHotelsForRequestUserId);
		initLists(userRoleses);
		initLists(relUserDetailses);
		initLists(reqServHotelsForResponseUserId);

		return this;
	}
	
	public Users initDicts() {
		initSentity(getTmImage());

		return this;
	}
	
	
}