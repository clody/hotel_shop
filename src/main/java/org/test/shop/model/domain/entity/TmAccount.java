/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.Transient;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;

import org.test.shop.model.domain.SObject;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * TmAccount generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="tm_account")
public class TmAccount extends SObject  {

	private static final long serialVersionUID = 2581376681128323L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("locationcountries") private LocationCountries locationCountries;
	@JsonProperty("accountfullname") private String accountFullname;
	@JsonProperty("accountname") private String accountName;
	@JsonProperty("descr") private String descr;
	private List<ServTransfer> servTransfers = new LinkedList<ServTransfer>();

	public TmAccount() {
	}

	public TmAccount(int id) {
		this.id = id;
	}

	public TmAccount(int id, LocationCountries locationCountries,


			String accountFullname, String accountName, String descr,
 List<ServTransfer> servTransfers) {
		this.id = id;
		this.locationCountries = locationCountries;
		this.accountFullname=accountFullname;
		this.accountName = accountName;
		this.descr = descr;
		this.servTransfers = servTransfers;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_TMACCOUNT")
	@SequenceGenerator(name = "SQ_TMACCOUNT", sequenceName = "SQ_TMACCOUNT", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="residency_id")
	public LocationCountries getLocationCountries() {
		return this.locationCountries;
	}

	public void setLocationCountries(LocationCountries locationCountries) {
		this.locationCountries = locationCountries;
	}

	

	

	

	

	@Column(name="account_fullname")
	public String getAccountFullname() {
		return this.accountFullname;
	}

	public void setAccountFullname(String accountFullname) {
		this.accountFullname=accountFullname;
	}

	@Column(name="account_name")
	public String getAccountName() {
		return this.accountName;
	}

	public void setAccountName(String accountName) {
		this.accountName = accountName;
	}

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="tmAccount")
	public List<ServTransfer> getServTransfers() {
		return this.servTransfers;
	}

	public void setServTransfers(List<ServTransfer> servTransfers) {
		this.servTransfers = servTransfers;
	}
// #SETTER_AND_GETTER

	@Transient
	public String getLabel() {
		return accountName;
	}
 
	public void setLabel(String label) {
		
	}
	
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ServTransfer arg0 : getServTransfers()) {
			arg0.setTmAccount(null);
		}



		locationCountries = null;

	}
	
	public TmAccount specialInit() {
	
		
		return this;
	}
	
	public TmAccount init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public TmAccount preInitList() {
		if(getServTransfers() == null) setServTransfers(new LinkedList());
		getServTransfers().parallelStream().forEach(it -> it.setTmAccount(this));

		return this;
	}
	
	public TmAccount initList() {
		initLists(servTransfers);

		return this;
	}
	
	public TmAccount initDicts() {
		initSentity(getLocationCountries());

		return this;
	}
	
	
}