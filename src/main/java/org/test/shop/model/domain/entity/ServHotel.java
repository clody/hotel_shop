/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.BatchSize;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;
import javax.persistence.CascadeType;
import org.test.shop.model.domain.SEntity;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * ServHotel generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="serv_hotel")
public class ServHotel extends SEntity  {

	private static final long serialVersionUID = 3198512991685948L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("infocontactinformation") private InfoContactInformation infoContactInformation;
	@JsonProperty("locationaddress") private LocationAddress locationAddress;
	@JsonProperty("locationcities") private LocationCities locationCities;
	@JsonProperty("locationcountries") private LocationCountries locationCountries;
	@JsonProperty("paymentdetails") private PaymentDetails paymentDetails;
	@JsonProperty("blacklist") private Boolean blacklist;
	@JsonProperty("conditiontext") private String conditionText;
	@JsonProperty("descr") private String descr;
	@JsonProperty("descrinternal") private String descrInternal;
	@JsonProperty("favorite") private Boolean favorite;
	@JsonProperty("freesale") private Boolean freesale;
	@JsonProperty("problem") private Boolean problem;
	@JsonProperty("showonline") private Boolean showonline;
	@JsonProperty("starcount") private Integer starcount;
	@JsonProperty("synopsis") private String synopsis;
	@JsonProperty("timedeparture") private String timedeparture;
	@JsonProperty("timeearlyrace") private String timeearlyrace;
	@JsonProperty("timelatedeparture") private String timelatedeparture;
	@JsonProperty("timerace") private String timerace;
	@JsonProperty("whereroomsarebooked") private String whereroomsarebooked;
	private List<RelServHotelImage> relServHotelImages = new LinkedList<RelServHotelImage>();
	private List<RelServHotelDocDocuments> relServHotelDocDocumentses = new LinkedList<RelServHotelDocDocuments>();
	private List<ReqServHotel> reqServHotels = new LinkedList<ReqServHotel>();
	private List<ServHotelRoom> servHotelRooms = new LinkedList<ServHotelRoom>();

	public ServHotel() {
	}

	public ServHotel(int id) {
		this.id = id;
	}

	public ServHotel(int id, InfoContactInformation infoContactInformation,
			LocationAddress locationAddress, LocationCities locationCities,
			LocationCountries locationCountries, PaymentDetails paymentDetails,


 Boolean blacklist, String conditionText,
			String descr, String descrInternal, Boolean favorite,
			Boolean freesale, Boolean problem, Boolean showonline,
			Integer starcount, String synopsis, String timedeparture,
			String timeearlyrace, String timelatedeparture, String timerace,
			String whereroomsarebooked,
			List<RelServHotelImage> relServHotelImages,
			List<RelServHotelDocDocuments> relServHotelDocDocumentses,
			List<ReqServHotel> reqServHotels, List<ServHotelRoom> servHotelRooms) {
		this.id = id;
		this.infoContactInformation = infoContactInformation;
		this.locationAddress = locationAddress;
		this.locationCities = locationCities;
		this.locationCountries = locationCountries;
		this.paymentDetails = paymentDetails;
		this.blacklist = blacklist;
		this.conditionText = conditionText;
		this.descr = descr;
		this.descrInternal = descrInternal;
		this.favorite = favorite;
		this.freesale = freesale;
		this.problem = problem;
		this.showonline = showonline;
		this.starcount = starcount;
		this.synopsis = synopsis;
		this.timedeparture = timedeparture;
		this.timeearlyrace = timeearlyrace;
		this.timelatedeparture = timelatedeparture;
		this.timerace = timerace;
		this.whereroomsarebooked = whereroomsarebooked;
		this.relServHotelImages = relServHotelImages;
		this.relServHotelDocDocumentses = relServHotelDocDocumentses;
		this.reqServHotels = reqServHotels;
		this.servHotelRooms = servHotelRooms;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_SERVHOTEL")
	@SequenceGenerator(name = "SQ_SERVHOTEL", sequenceName = "SQ_SERVHOTEL", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@Fetch(FetchMode.JOIN)
	@BatchSize(size = 100)
	@ManyToOne(fetch=FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinColumn(name="contactinformation_id")
	public InfoContactInformation getInfoContactInformation() {
		return this.infoContactInformation;
	}

	public void setInfoContactInformation(
			InfoContactInformation infoContactInformation) {
		this.infoContactInformation = infoContactInformation;
	}

	@Fetch(FetchMode.JOIN)
	@BatchSize(size = 100)
	@ManyToOne(fetch=FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinColumn(name="address_id")
	public LocationAddress getLocationAddress() {
		return this.locationAddress;
	}

	public void setLocationAddress(LocationAddress locationAddress) {
		this.locationAddress = locationAddress;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="locationcities_id")
	public LocationCities getLocationCities() {
		return this.locationCities;
	}

	public void setLocationCities(LocationCities locationCities) {
		this.locationCities = locationCities;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="locationcountries_id")
	public LocationCountries getLocationCountries() {
		return this.locationCountries;
	}

	public void setLocationCountries(LocationCountries locationCountries) {
		this.locationCountries = locationCountries;
	}

	@Fetch(FetchMode.JOIN)
	@BatchSize(size = 100)
	@ManyToOne(fetch=FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinColumn(name="payment_details_id")
	public PaymentDetails getPaymentDetails() {
		return this.paymentDetails;
	}

	public void setPaymentDetails(PaymentDetails paymentDetails) {
		this.paymentDetails = paymentDetails;
	}

	

	

	

	

	

	@Column(name="blacklist")
	public Boolean getBlacklist() {
		return this.blacklist;
	}

	public void setBlacklist(Boolean blacklist) {
		this.blacklist = blacklist;
	}

	@Column(name="condition_text", length = 2000)
	public String getConditionText() {
		return this.conditionText;
	}

	public void setConditionText(String conditionText) {
		this.conditionText = conditionText;
	}

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	@Column(name="descr_internal", length = 2000)
	public String getDescrInternal() {
		return this.descrInternal;
	}

	public void setDescrInternal(String descrInternal) {
		this.descrInternal = descrInternal;
	}

	@Column(name="favorite")
	public Boolean getFavorite() {
		return this.favorite;
	}

	public void setFavorite(Boolean favorite) {
		this.favorite = favorite;
	}

	@Column(name="freesale")
	public Boolean getFreesale() {
		return this.freesale;
	}

	public void setFreesale(Boolean freesale) {
		this.freesale = freesale;
	}

	@Column(name="problem")
	public Boolean getProblem() {
		return this.problem;
	}

	public void setProblem(Boolean problem) {
		this.problem = problem;
	}

	@Column(name="showonline")
	public Boolean getShowonline() {
		return this.showonline;
	}

	public void setShowonline(Boolean showonline) {
		this.showonline = showonline;
	}

	@Column(name="starcount")
	public Integer getStarcount() {
		return this.starcount;
	}

	public void setStarcount(Integer starcount) {
		this.starcount = starcount;
	}

	@Column(name="synopsis", length = 500)
	public String getSynopsis() {
		return this.synopsis;
	}

	public void setSynopsis(String synopsis) {
		this.synopsis = synopsis;
	}

	@Column(name="timedeparture")
	public String getTimedeparture() {
		return this.timedeparture;
	}

	public void setTimedeparture(String timedeparture) {
		this.timedeparture = timedeparture;
	}

	@Column(name="timeearlyrace")
	public String getTimeearlyrace() {
		return this.timeearlyrace;
	}

	public void setTimeearlyrace(String timeearlyrace) {
		this.timeearlyrace = timeearlyrace;
	}

	@Column(name="timelatedeparture")
	public String getTimelatedeparture() {
		return this.timelatedeparture;
	}

	public void setTimelatedeparture(String timelatedeparture) {
		this.timelatedeparture = timelatedeparture;
	}

	@Column(name="timerace")
	public String getTimerace() {
		return this.timerace;
	}

	public void setTimerace(String timerace) {
		this.timerace = timerace;
	}

	@Column(name="whereroomsarebooked")
	public String getWhereroomsarebooked() {
		return this.whereroomsarebooked;
	}

	public void setWhereroomsarebooked(String whereroomsarebooked) {
		this.whereroomsarebooked = whereroomsarebooked;
	}

	

	@OneToMany(fetch=FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy="servHotel")
	public List<RelServHotelImage> getRelServHotelImages() {
		return this.relServHotelImages;
	}

	public void setRelServHotelImages(List<RelServHotelImage> relServHotelImages) {
		this.relServHotelImages = relServHotelImages;
	}

	@OneToMany(fetch=FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy="servHotel")
	public List<RelServHotelDocDocuments> getRelServHotelDocDocumentses() {
		return this.relServHotelDocDocumentses;
	}

	public void setRelServHotelDocDocumentses(List<RelServHotelDocDocuments> relServHotelDocDocumentses) {
		this.relServHotelDocDocumentses = relServHotelDocDocumentses;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="servHotel")
	public List<ReqServHotel> getReqServHotels() {
		return this.reqServHotels;
	}

	public void setReqServHotels(List<ReqServHotel> reqServHotels) {
		this.reqServHotels = reqServHotels;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="servHotel")
	public List<ServHotelRoom> getServHotelRooms() {
		return this.servHotelRooms;
	}

	public void setServHotelRooms(List<ServHotelRoom> servHotelRooms) {
		this.servHotelRooms = servHotelRooms;
	}
// #SETTER_AND_GETTER
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ReqServHotel arg0 : getReqServHotels()) {
			arg0.setServHotel(null);
		}

		for (ServHotelRoom arg0 : getServHotelRooms()) {
			arg0.setServHotel(null);
		}



		infoContactInformation = null;
		locationAddress = null;
		locationCities = null;
		locationCountries = null;
		paymentDetails = null;

	}
	
	public ServHotel specialInit() {
	
		
		return this;
	}
	
	public ServHotel init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public ServHotel preInitList() {
		if(getRelServHotelImages() == null) setRelServHotelImages(new LinkedList());
		getRelServHotelImages().parallelStream().forEach(it -> it.setServHotel(this));
		if(getRelServHotelDocDocumentses() == null) setRelServHotelDocDocumentses(new LinkedList());
		getRelServHotelDocDocumentses().parallelStream().forEach(it -> it.setServHotel(this));
		if(getReqServHotels() == null) setReqServHotels(new LinkedList());
		getReqServHotels().parallelStream().forEach(it -> it.setServHotel(this));
		if(getServHotelRooms() == null) setServHotelRooms(new LinkedList());
		getServHotelRooms().parallelStream().forEach(it -> it.setServHotel(this));

		return this;
	}
	
	public ServHotel initList() {
		initLists(relServHotelImages);
		initLists(relServHotelDocDocumentses);
		initLists(reqServHotels);
		initLists(servHotelRooms);

		return this;
	}
	
	public ServHotel initDicts() {
		initSentity(getInfoContactInformation());
		initSentity(getLocationAddress());
		initSentity(getLocationCities());
		initSentity(getLocationCountries());
		initSentity(getPaymentDetails());

		return this;
	}
	
	
}