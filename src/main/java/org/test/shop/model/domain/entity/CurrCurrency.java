/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;

import org.test.shop.model.domain.SEntity;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * CurrCurrency generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="curr_currency")
public class CurrCurrency extends SEntity  {

	private static final long serialVersionUID = 6297816615455569L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("course") private Integer course;
	@JsonProperty("currencyname") private String currencyname;
	@JsonProperty("descr") private String descr;
	@JsonProperty("isbase") private Boolean isbase;
	@JsonProperty("isocode") private String isoCode;
	@JsonProperty("nameeng") private String nameeng;
	@JsonProperty("nameru") private String nameru;
	private List<ServTransfer> servTransfers = new LinkedList<ServTransfer>();
	private List<ServTransferRoute> servTransferRoutes = new LinkedList<ServTransferRoute>();

	public CurrCurrency() {
	}

	public CurrCurrency(int id) {
		this.id = id;
	}

	public CurrCurrency(int id,

 Integer course, String currencyname,
			String descr, Boolean isbase, String isoCode, String nameeng,
			String nameru, List<ServTransfer> servTransfers,
			List<ServTransferRoute> servTransferRoutes) {
		this.id = id;
		this.course = course;
		this.currencyname=currencyname;
		this.descr = descr;
		this.isbase = isbase;
		this.isoCode = isoCode;
		this.nameeng = nameeng;
		this.nameru = nameru;
		this.servTransfers = servTransfers;
		this.servTransferRoutes = servTransferRoutes;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_CURRCURRENCY")
	@SequenceGenerator(name = "SQ_CURRCURRENCY", sequenceName = "SQ_CURRCURRENCY", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	

	

	

	

	@Column(name="course")
	public Integer getCourse() {
		return this.course;
	}

	public void setCourse(Integer course) {
		this.course = course;
	}

	@Column(name="currencyname")
	public String getCurrencyname() {
		return this.currencyname;
	}

	public void setCurrencyname(String currencyname) {
		this.currencyname=currencyname;
	}

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	@Column(name="isbase")
	public Boolean getIsbase() {
		return this.isbase;
	}

	public void setIsbase(Boolean isbase) {
		this.isbase = isbase;
	}

	@Column(name="iso_code")
	public String getIsoCode() {
		return this.isoCode;
	}

	public void setIsoCode(String isoCode) {
		this.isoCode = isoCode;
	}

	@Column(name="nameeng")
	public String getNameeng() {
		return this.nameeng;
	}

	public void setNameeng(String nameeng) {
		this.nameeng = nameeng;
	}

	@Column(name="nameru")
	public String getNameru() {
		return this.nameru;
	}

	public void setNameru(String nameru) {
		this.nameru = nameru;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="currCurrency")
	public List<ServTransfer> getServTransfers() {
		return this.servTransfers;
	}

	public void setServTransfers(List<ServTransfer> servTransfers) {
		this.servTransfers = servTransfers;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="currCurrency")
	public List<ServTransferRoute> getServTransferRoutes() {
		return this.servTransferRoutes;
	}

	public void setServTransferRoutes(List<ServTransferRoute> servTransferRoutes) {
		this.servTransferRoutes = servTransferRoutes;
	}
// #SETTER_AND_GETTER
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ServTransfer arg0 : getServTransfers()) {
			arg0.setCurrCurrency(null);
		}

		for (ServTransferRoute arg0 : getServTransferRoutes()) {
			arg0.setCurrCurrency(null);
		}




	}
	
	public CurrCurrency specialInit() {
	
		
		return this;
	}
	
	public CurrCurrency init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public CurrCurrency preInitList() {
		if(getServTransfers() == null) setServTransfers(new LinkedList());
		getServTransfers().parallelStream().forEach(it -> it.setCurrCurrency(this));
		if(getServTransferRoutes() == null) setServTransferRoutes(new LinkedList());
		getServTransferRoutes().parallelStream().forEach(it -> it.setCurrCurrency(this));

		return this;
	}
	
	public CurrCurrency initList() {

		return this;
	}
	
	public CurrCurrency initDicts() {

		return this;
	}
	
	
}