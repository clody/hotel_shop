/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;

import org.test.shop.model.domain.SEntity;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * PaymentDetails generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="payment_details")
public class PaymentDetails extends SEntity  {

	private static final long serialVersionUID = 5893623772593585L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("banklocation") private String bankLocation;
	@JsonProperty("bin") private String bin;
	@JsonProperty("correspondentaccount") private String correspondentAccount;
	@JsonProperty("currentaccount") private String currentAccount;
	@JsonProperty("fullname") private String fullName;
	@JsonProperty("iin") private String iin;
	@JsonProperty("legaladdress") private String legalAddress;
	@JsonProperty("nameofthebank") private String nameOfTheBank;
	@JsonProperty("nceo") private String nceo;
	@JsonProperty("phone") private String phone;
	@JsonProperty("phone2") private String phone2;
	@JsonProperty("postaladdress") private String postalAddress;
	private List<ServHotel> servHotels = new LinkedList<ServHotel>();

	public PaymentDetails() {
	}

	public PaymentDetails(int id) {
		this.id = id;
	}

	public PaymentDetails(int id,

 String bankLocation, String bin,
			String correspondentAccount, String currentAccount,
			String fullName, String iin, String legalAddress,
			String nameOfTheBank, String nceo, String phone, String phone2,
			String postalAddress, List<ServHotel> servHotels) {
		this.id = id;
		this.bankLocation = bankLocation;
		this.bin = bin;
		this.correspondentAccount = correspondentAccount;
		this.currentAccount = currentAccount;
		this.fullName = fullName;
		this.iin = iin;
		this.legalAddress = legalAddress;
		this.nameOfTheBank = nameOfTheBank;
		this.nceo = nceo;
		this.phone = phone;
		this.phone2 = phone2;
		this.postalAddress = postalAddress;
		this.servHotels = servHotels;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_PAYMENTDETAILS")
	@SequenceGenerator(name = "SQ_PAYMENTDETAILS", sequenceName = "SQ_PAYMENTDETAILS", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	

	

	

	

	@Column(name="bank_location")
	public String getBankLocation() {
		return this.bankLocation;
	}

	public void setBankLocation(String bankLocation) {
		this.bankLocation = bankLocation;
	}

	@Column(name="bin")
	public String getBin() {
		return this.bin;
	}

	public void setBin(String bin) {
		this.bin = bin;
	}

	@Column(name="correspondent_account")
	public String getCorrespondentAccount() {
		return this.correspondentAccount;
	}

	public void setCorrespondentAccount(String correspondentAccount) {
		this.correspondentAccount = correspondentAccount;
	}

	@Column(name="current_account")
	public String getCurrentAccount() {
		return this.currentAccount;
	}

	public void setCurrentAccount(String currentAccount) {
		this.currentAccount = currentAccount;
	}

	@Column(name="full_name")
	public String getFullName() {
		return this.fullName;
	}

	public void setFullName(String fullName) {
		this.fullName = fullName;
	}

	@Column(name="iin")
	public String getIin() {
		return this.iin;
	}

	public void setIin(String iin) {
		this.iin = iin;
	}

	@Column(name="legal_address")
	public String getLegalAddress() {
		return this.legalAddress;
	}

	public void setLegalAddress(String legalAddress) {
		this.legalAddress = legalAddress;
	}

	@Column(name="name_of_the_bank")
	public String getNameOfTheBank() {
		return this.nameOfTheBank;
	}

	public void setNameOfTheBank(String nameOfTheBank) {
		this.nameOfTheBank = nameOfTheBank;
	}

	@Column(name="nceo")
	public String getNceo() {
		return this.nceo;
	}

	public void setNceo(String nceo) {
		this.nceo = nceo;
	}

	@Column(name="phone")
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name="phone2")
	public String getPhone2() {
		return this.phone2;
	}

	public void setPhone2(String phone2) {
		this.phone2 = phone2;
	}

	@Column(name="postal_address")
	public String getPostalAddress() {
		return this.postalAddress;
	}

	public void setPostalAddress(String postalAddress) {
		this.postalAddress = postalAddress;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="paymentDetails")
	public List<ServHotel> getServHotels() {
		return this.servHotels;
	}

	public void setServHotels(List<ServHotel> servHotels) {
		this.servHotels = servHotels;
	}
// #SETTER_AND_GETTER
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ServHotel arg0 : getServHotels()) {
			arg0.setPaymentDetails(null);
		}




	}
	
	public PaymentDetails specialInit() {
	
		
		return this;
	}
	
	public PaymentDetails init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public PaymentDetails preInitList() {
		if(getServHotels() == null) setServHotels(new LinkedList());
		getServHotels().parallelStream().forEach(it -> it.setPaymentDetails(this));

		return this;
	}
	
	public PaymentDetails initList() {
		initLists(servHotels);

		return this;
	}
	
	public PaymentDetails initDicts() {

		return this;
	}
	
	
}