/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;

import javax.persistence.Transient;
import javax.persistence.PreRemove;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;

import java.util.LinkedList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.test.shop.model.domain.SObject;



/**
 * DictGlobal generated by hbm2java, updated by voovee
 */
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey"
			, "servTransfersForPaymentTypeId"
			, "servTransfersForTypeTransferId"
			, "servTransfersForTransportId"
			, "servHotelRooms" 
})
@Entity
@Table(name="dict_global")
public class DictGlobal extends SObject  {

	private static final long serialVersionUID = 1522919452643432L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("dicttype") private String dictType;
	@JsonProperty("dictvalue") private String dictValue;
	@JsonProperty("dictvalueadditional") private String dictValueAdditional;
	private List<ServTransfer> servTransfersForPaymentTypeId = new LinkedList<ServTransfer>();
	private List<ServTransfer> servTransfersForTypeTransferId = new LinkedList<ServTransfer>();
	private List<ServTransfer> servTransfersForTransportId = new LinkedList<ServTransfer>();
	private List<ServHotelRoom> servHotelRooms = new LinkedList<ServHotelRoom>();

	public DictGlobal() {
	}

	public DictGlobal(int id) {
		this.id = id;
	}

	public DictGlobal(int id,

			String dictType, String dictValue, String dictValueAdditional,

			List<ServTransfer> servTransfersForPaymentTypeId,
			List<ServTransfer> servTransfersForTypeTransferId,
			List<ServTransfer> servTransfersForTransportId,
			List<ServHotelRoom> servHotelRooms) {
		this.id = id;
		this.dictType = dictType;
		this.dictValue = dictValue;
		this.dictValueAdditional = dictValueAdditional;
		this.servTransfersForPaymentTypeId = servTransfersForPaymentTypeId;
		this.servTransfersForTypeTransferId = servTransfersForTypeTransferId;
		this.servTransfersForTransportId = servTransfersForTransportId;
		this.servHotelRooms = servHotelRooms;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_DICTGLOBAL")
	@SequenceGenerator(name = "SQ_DICTGLOBAL", sequenceName = "SQ_DICTGLOBAL", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	

	

	

	

	@Column(name="dict_type")
	public String getDictType() {
		return this.dictType;
	}

	public void setDictType(String dictType) {
		this.dictType = dictType;
	}

	@Column(name="dict_value")
	public String getDictValue() {
		return this.dictValue;
	}

	public void setDictValue(String dictValue) {
		this.dictValue = dictValue;
	}

	@Column(name="dict_value_additional")
	public String getDictValueAdditional() {
		return this.dictValueAdditional;
	}

	public void setDictValueAdditional(String dictValueAdditional) {
		this.dictValueAdditional = dictValueAdditional;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="dictGlobalByPaymentTypeId")
	public List<ServTransfer> getServTransfersForPaymentTypeId() {
		return this.servTransfersForPaymentTypeId;
	}

	public void setServTransfersForPaymentTypeId(List<ServTransfer> servTransfersForPaymentTypeId) {
		this.servTransfersForPaymentTypeId = servTransfersForPaymentTypeId;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="dictGlobalByTypeTransferId")
	public List<ServTransfer> getServTransfersForTypeTransferId() {
		return this.servTransfersForTypeTransferId;
	}

	public void setServTransfersForTypeTransferId(List<ServTransfer> servTransfersForTypeTransferId) {
		this.servTransfersForTypeTransferId = servTransfersForTypeTransferId;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="dictGlobalByTransportId")
	public List<ServTransfer> getServTransfersForTransportId() {
		return this.servTransfersForTransportId;
	}

	public void setServTransfersForTransportId(List<ServTransfer> servTransfersForTransportId) {
		this.servTransfersForTransportId = servTransfersForTransportId;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="dictGlobal")
	public List<ServHotelRoom> getServHotelRooms() {
		return this.servHotelRooms;
	}

	public void setServHotelRooms(List<ServHotelRoom> servHotelRooms) {
		this.servHotelRooms = servHotelRooms;
	}
// #SETTER_AND_GETTER

	@Transient
	public String getLabel() {
		return dictValue;
	}
 
	public void setLabel(String label) {
		
	}
	
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ServTransfer arg0 : getServTransfersForPaymentTypeId()) {
			arg0.setDictGlobalByPaymentTypeId(null);
		}

		for (ServTransfer arg0 : getServTransfersForTypeTransferId()) {
			arg0.setDictGlobalByTypeTransferId(null);
		}

		for (ServTransfer arg0 : getServTransfersForTransportId()) {
			arg0.setDictGlobalByTransportId(null);
		}

		for (ServHotelRoom arg0 : getServHotelRooms()) {
			arg0.setDictGlobal(null);
		}




	}
	
	public DictGlobal specialInit() {
	
		
		return this;
	}
	
	public DictGlobal init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public DictGlobal preInitList() {

		return this;
	}
	
	public DictGlobal initList() {

		return this;
	}
	
	public DictGlobal initDicts() {

		return this;
	}
	
	
}