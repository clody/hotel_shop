/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;
import javax.persistence.CascadeType;
import org.test.shop.model.domain.SEntity;
import java.math.BigDecimal;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * ReqServHotel generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="req_serv_hotel")
public class ReqServHotel extends SEntity  {

	private static final long serialVersionUID = 2498666289288318L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("docdocumentsbydocumentforuser") private DocDocuments docDocumentsByDocumentForUserId;
	@JsonProperty("docdocumentsbydocumentforhotel") private DocDocuments docDocumentsByDocumentForHotelId;
	@JsonProperty("paymentprice") private PaymentPrice paymentPrice;
	@JsonProperty("paymenttariff") private PaymentTariff paymentTariff;
	@JsonProperty("servhotel") private ServHotel servHotel;
	@JsonProperty("servhotelroom") private ServHotelRoom servHotelRoom;
	@JsonProperty("usersbyrequestuser") private Users usersByRequestUserId;
	@JsonProperty("usersbyresponseuser") private Users usersByResponseUserId;
	@JsonProperty("accept") private Boolean accept;
	@JsonProperty("datedifference") private String datedifference;
	@JsonProperty("decline") private Boolean decline;
	@JsonProperty("departure") private Date departure;
	@JsonProperty("descr") private String descr;
	@JsonProperty("paymenttype") private Boolean paymentType;
	@JsonProperty("price") private BigDecimal price;
	@JsonProperty("progress") private Integer progress;
	@JsonProperty("race") private Date race;
	@JsonProperty("roomcount") private Integer roomCount;
	@JsonProperty("singleprice") private Integer singleprice;
	@JsonProperty("tariffcurrency") private String tariffcurrency;
	@JsonProperty("requestnumber") private String requestNumber;
	@JsonProperty("cancel") private Boolean cancel;
	@JsonProperty("confirm") private Boolean confirm;
	@JsonProperty("archived") private Boolean archived;
	private List<TmContactEasy> tmContactEasies = new LinkedList<TmContactEasy>();

	public ReqServHotel() {
	}

	public ReqServHotel(int id) {
		this.id = id;
	}

	public ReqServHotel(int id, DocDocuments docDocumentsByDocumentForUserId,
			DocDocuments docDocumentsByDocumentForHotelId,
			PaymentPrice paymentPrice, PaymentTariff paymentTariff,
			ServHotel servHotel, ServHotelRoom servHotelRoom,
			Users usersByRequestUserId, Users usersByResponseUserId,


 Boolean accept, String datedifference,
			Boolean decline, Date departure, String descr, Boolean paymentType,
			BigDecimal price, Integer progress, Date race, Integer roomCount,
			Integer singleprice, String tariffcurrency, String requestNumber,
			Boolean cancel, Boolean confirm, Boolean archived,
 List<TmContactEasy> tmContactEasies) {
		this.id = id;
		this.docDocumentsByDocumentForUserId = docDocumentsByDocumentForUserId;
		this.docDocumentsByDocumentForHotelId = docDocumentsByDocumentForHotelId;
		this.paymentPrice = paymentPrice;
		this.paymentTariff = paymentTariff;
		this.servHotel = servHotel;
		this.servHotelRoom = servHotelRoom;
		this.usersByRequestUserId = usersByRequestUserId;
		this.usersByResponseUserId = usersByResponseUserId;
		this.accept = accept;
		this.datedifference = datedifference;
		this.decline = decline;
		this.departure = departure;
		this.descr = descr;
		this.paymentType = paymentType;
		this.price = price;
		this.progress = progress;
		this.race = race;
		this.roomCount = roomCount;
		this.singleprice = singleprice;
		this.tariffcurrency = tariffcurrency;
		this.requestNumber = requestNumber;
		this.cancel = cancel;
		this.confirm = confirm;
		this.archived = archived;
		this.tmContactEasies = tmContactEasies;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_REQSERVHOTEL")
	@SequenceGenerator(name = "SQ_REQSERVHOTEL", sequenceName = "SQ_REQSERVHOTEL", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="document_for_user_id")
	public DocDocuments getDocDocumentsByDocumentForUserId() {
		return this.docDocumentsByDocumentForUserId;
	}

	public void setDocDocumentsByDocumentForUserId(
			DocDocuments docDocumentsByDocumentForUserId) {
		this.docDocumentsByDocumentForUserId = docDocumentsByDocumentForUserId;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="document_for_hotel_id")
	public DocDocuments getDocDocumentsByDocumentForHotelId() {
		return this.docDocumentsByDocumentForHotelId;
	}

	public void setDocDocumentsByDocumentForHotelId(
			DocDocuments docDocumentsByDocumentForHotelId) {
		this.docDocumentsByDocumentForHotelId = docDocumentsByDocumentForHotelId;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="payment_price_id")
	public PaymentPrice getPaymentPrice() {
		return this.paymentPrice;
	}

	public void setPaymentPrice(PaymentPrice paymentPrice) {
		this.paymentPrice = paymentPrice;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="payment_tariff_id")
	public PaymentTariff getPaymentTariff() {
		return this.paymentTariff;
	}

	public void setPaymentTariff(PaymentTariff paymentTariff) {
		this.paymentTariff = paymentTariff;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="serv_hotel_id")
	public ServHotel getServHotel() {
		return this.servHotel;
	}

	public void setServHotel(ServHotel servHotel) {
		this.servHotel = servHotel;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="serv_hotel_room_id")
	public ServHotelRoom getServHotelRoom() {
		return this.servHotelRoom;
	}

	public void setServHotelRoom(ServHotelRoom servHotelRoom) {
		this.servHotelRoom = servHotelRoom;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="request_user_id")
	public Users getUsersByRequestUserId() {
		return this.usersByRequestUserId;
	}

	public void setUsersByRequestUserId(Users usersByRequestUserId) {
		this.usersByRequestUserId = usersByRequestUserId;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="response_user_id")
	public Users getUsersByResponseUserId() {
		return this.usersByResponseUserId;
	}

	public void setUsersByResponseUserId(Users usersByResponseUserId) {
		this.usersByResponseUserId = usersByResponseUserId;
	}

	

	

	

	

	

	@Column(name="accept")
	public Boolean getAccept() {
		return this.accept;
	}

	public void setAccept(Boolean accept) {
		this.accept = accept;
	}

	@Column(name="datedifference")
	public String getDatedifference() {
		return this.datedifference;
	}

	public void setDatedifference(String datedifference) {
		this.datedifference = datedifference;
	}

	@Column(name="decline")
	public Boolean getDecline() {
		return this.decline;
	}

	public void setDecline(Boolean decline) {
		this.decline = decline;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="departure", length = 29)
	public Date getDeparture() {
		return this.departure;
	}

	public void setDeparture(Date departure) {
		this.departure = departure;
	}

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	@Column(name="payment_type")
	public Boolean getPaymentType() {
		return this.paymentType;
	}

	public void setPaymentType(Boolean paymentType) {
		this.paymentType = paymentType;
	}

	@Column(name="price", precision = 17, scale = 3)
	public BigDecimal getPrice() {
		return this.price;
	}

	public void setPrice(BigDecimal price) {
		this.price = price;
	}

	@Column(name="progress")
	public Integer getProgress() {
		return this.progress;
	}

	public void setProgress(Integer progress) {
		this.progress = progress;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="race", length = 29)
	public Date getRace() {
		return this.race;
	}

	public void setRace(Date race) {
		this.race = race;
	}

	@Column(name="room_count")
	public Integer getRoomCount() {
		return this.roomCount;
	}

	public void setRoomCount(Integer roomCount) {
		this.roomCount = roomCount;
	}

	@Column(name="singleprice")
	public Integer getSingleprice() {
		return this.singleprice;
	}

	public void setSingleprice(Integer singleprice) {
		this.singleprice = singleprice;
	}

	@Column(name="tariffcurrency")
	public String getTariffcurrency() {
		return this.tariffcurrency;
	}

	public void setTariffcurrency(String tariffcurrency) {
		this.tariffcurrency = tariffcurrency;
	}

	@Column(name="request_number")
	public String getRequestNumber() {
		return this.requestNumber;
	}

	public void setRequestNumber(String requestNumber) {
		this.requestNumber = requestNumber;
	}

	@Column(name="cancel")
	public Boolean getCancel() {
		return this.cancel;
	}

	public void setCancel(Boolean cancel) {
		this.cancel = cancel;
	}

	@Column(name="confirm")
	public Boolean getConfirm() {
		return this.confirm;
	}

	public void setConfirm(Boolean confirm) {
		this.confirm = confirm;
	}

	@Column(name="archived")
	public Boolean getArchived() {
		return this.archived;
	}

	public void setArchived(Boolean archived) {
		this.archived = archived;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="reqServHotel", cascade = CascadeType.ALL)
	public List<TmContactEasy> getTmContactEasies() {
		return this.tmContactEasies;
	}

	public void setTmContactEasies(List<TmContactEasy> tmContactEasies) {
		this.tmContactEasies = tmContactEasies;
	}
// #SETTER_AND_GETTER
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (TmContactEasy arg0 : getTmContactEasies()) {
			arg0.setReqServHotel(null);
		}



		docDocumentsByDocumentForUserId = null;
		docDocumentsByDocumentForHotelId = null;
		paymentPrice = null;
		paymentTariff = null;
		servHotel = null;
		servHotelRoom = null;
		usersByRequestUserId = null;
		usersByResponseUserId = null;

	}
	
	public ReqServHotel specialInit() {
	
		
		return this;
	}
	
	public ReqServHotel init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public ReqServHotel preInitList() {
		if(getTmContactEasies() == null) setTmContactEasies(new LinkedList());
		getTmContactEasies().parallelStream().forEach(it -> it.setReqServHotel(this));

		return this;
	}
	
	public ReqServHotel initList() {
		initLists(tmContactEasies);

		return this;
	}
	
	public ReqServHotel initDicts() {
		initSentity(getDocDocumentsByDocumentForUserId());
		initSentity(getDocDocumentsByDocumentForHotelId());
		initSentity(getPaymentPrice());
		initSentity(getPaymentTariff());
		initSentity(getServHotel());
		initSentity(getServHotelRoom());
		initSentity(getUsersByRequestUserId());
		initSentity(getUsersByResponseUserId());

		return this;
	}
	
	
}