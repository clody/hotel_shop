/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.Transient;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;
import javax.persistence.CascadeType;
import org.test.shop.model.domain.SObject;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * TmContact generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="tm_contact")
public class TmContact extends SObject  {

	private static final long serialVersionUID = 9352662999513776L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("locationcountries") private LocationCountries locationCountries;
	@JsonProperty("birthday") private Date birthday;
	@JsonProperty("contactname") private String contactName;
	@JsonProperty("contactpatronymic") private String contactPatronymic;
	@JsonProperty("contactsurname") private String contactSurname;
	@JsonProperty("descr") private String descr;
	@JsonProperty("passportenddate") private Date passportEndDate;
	@JsonProperty("passportnumber") private String passportNumber;
	@JsonProperty("passportstartdate") private Date passportStartDate;
	private List<RelServTransferTmContact> relServTransferTmContacts = new LinkedList<RelServTransferTmContact>();

	public TmContact() {
	}

	public TmContact(int id) {
		this.id = id;
	}

	public TmContact(int id, LocationCountries locationCountries,


			Date birthday, String contactName, String contactPatronymic,
			String contactSurname, String descr, Date passportEndDate,
			String passportNumber,
			List<RelServTransferTmContact> relServTransferTmContacts) {
		this.id = id;
		this.locationCountries = locationCountries;
		this.birthday = birthday;
		this.contactName = contactName;
		this.contactPatronymic = contactPatronymic;
		this.contactSurname=contactSurname;
		this.descr = descr;
		this.passportEndDate = passportEndDate;
		this.passportNumber = passportNumber;
		this.passportStartDate = passportStartDate;
		this.relServTransferTmContacts = relServTransferTmContacts;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_TMCONTACT")
	@SequenceGenerator(name = "SQ_TMCONTACT", sequenceName = "SQ_TMCONTACT", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="citizenship_id")
	public LocationCountries getLocationCountries() {
		return this.locationCountries;
	}

	public void setLocationCountries(LocationCountries locationCountries) {
		this.locationCountries = locationCountries;
	}

	

	

	

	

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="birthday", length = 29)
	public Date getBirthday() {
		return this.birthday;
	}

	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	@Column(name="contact_name")
	public String getContactName() {
		return this.contactName;
	}

	public void setContactName(String contactName) {
		this.contactName = contactName;
	}

	@Column(name="contact_patronymic")
	public String getContactPatronymic() {
		return this.contactPatronymic;
	}

	public void setContactPatronymic(String contactPatronymic) {
		this.contactPatronymic = contactPatronymic;
	}

	@Column(name="contact_surname")
	public String getContactSurname() {
		return this.contactSurname;
	}

	public void setContactSurname(String contactSurname) {
		this.contactSurname=contactSurname;
	}

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="passport_end_date", length = 29)
	public Date getPassportEndDate() {
		return this.passportEndDate;
	}

	public void setPassportEndDate(Date passportEndDate) {
		this.passportEndDate = passportEndDate;
	}

	@Column(name="passport_number")
	public String getPassportNumber() {
		return this.passportNumber;
	}

	public void setPassportNumber(String passportNumber) {
		this.passportNumber = passportNumber;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="passport_start_date", length = 29)
	public Date getPassportStartDate() {
		return this.passportStartDate;
	}

	public void setPassportStartDate(Date passportStartDate) {
		this.passportStartDate = passportStartDate;
	}

	

	@OneToMany(fetch=FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy="tmContact")
	public List<RelServTransferTmContact> getRelServTransferTmContacts() {
		return this.relServTransferTmContacts;
	}

	public void setRelServTransferTmContacts(List<RelServTransferTmContact> relServTransferTmContacts) {
		this.relServTransferTmContacts = relServTransferTmContacts;
	}
// #SETTER_AND_GETTER

	@Transient
	public String getLabel() {
		return contactSurname + " " + contactName;
	}
 
	public void setLabel(String label) {
		
	}
	
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		locationCountries = null;

	}
	
	public TmContact specialInit() {
	
		
		return this;
	}
	
	public TmContact init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public TmContact preInitList() {
		if(getRelServTransferTmContacts() == null) setRelServTransferTmContacts(new LinkedList());
		getRelServTransferTmContacts().parallelStream().forEach(it -> it.setTmContact(this));

		return this;
	}
	
	public TmContact initList() {
		initLists(relServTransferTmContacts);

		return this;
	}
	
	public TmContact initDicts() {
		initSentity(getLocationCountries());

		return this;
	}
	
	
}