/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;
import javax.persistence.CascadeType;
import org.test.shop.model.domain.SEntity;
import java.math.BigDecimal;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * ServTransfer generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="serv_transfer")
public class ServTransfer extends SEntity  {

	private static final long serialVersionUID = 8323124828747872L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("currcurrency") private CurrCurrency currCurrency;
	@JsonProperty("dictglobalbypaymenttype") private DictGlobal dictGlobalByPaymentTypeId;
	@JsonProperty("dictglobalbytypetransfer") private DictGlobal dictGlobalByTypeTransferId;
	@JsonProperty("dictglobalbytransport") private DictGlobal dictGlobalByTransportId;
	@JsonProperty("locationcities") private LocationCities locationCities;
	@JsonProperty("locationcountries") private LocationCountries locationCountries;
	@JsonProperty("tmaccount") private TmAccount tmAccount;
	@JsonProperty("datefrom") private Date dateFrom;
	@JsonProperty("dateto") private Date dateTo;
	@JsonProperty("descr") private String descr;
	@JsonProperty("passengersphones") private String passengersPhones;
	@JsonProperty("price") private BigDecimal price;
	@JsonProperty("transfername") private String transferName;
	@JsonProperty("visittable") private String visitTable;
	private List<RelServTransferTmContact> relServTransferTmContacts = new LinkedList<RelServTransferTmContact>();
	private List<ServTransferRoute> servTransferRoutes = new LinkedList<ServTransferRoute>();

	public ServTransfer() {
	}

	public ServTransfer(int id) {
		this.id = id;
	}

	public ServTransfer(int id, CurrCurrency currCurrency,
			DictGlobal dictGlobalByPaymentTypeId,
			DictGlobal dictGlobalByTypeTransferId,
			DictGlobal dictGlobalByTransportId, LocationCities locationCities,
			LocationCountries locationCountries, TmAccount tmAccount,


 Date dateFrom, Date dateTo, String descr,
			String passengersPhones, BigDecimal price, String transferName,
			String visitTable,
			List<RelServTransferTmContact> relServTransferTmContacts,
			List<ServTransferRoute> servTransferRoutes) {
		this.id = id;
		this.currCurrency = currCurrency;
		this.dictGlobalByPaymentTypeId = dictGlobalByPaymentTypeId;
		this.dictGlobalByTypeTransferId = dictGlobalByTypeTransferId;
		this.dictGlobalByTransportId = dictGlobalByTransportId;
		this.locationCities = locationCities;
		this.locationCountries = locationCountries;
		this.tmAccount = tmAccount;
		this.dateFrom = dateFrom;
		this.dateTo = dateTo;
		this.descr = descr;
		this.passengersPhones = passengersPhones;
		this.price = price;
		this.transferName = transferName;
		this.visitTable = visitTable;
		this.relServTransferTmContacts = relServTransferTmContacts;
		this.servTransferRoutes = servTransferRoutes;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_SERVTRANSFER")
	@SequenceGenerator(name = "SQ_SERVTRANSFER", sequenceName = "SQ_SERVTRANSFER", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="currency_id")
	public CurrCurrency getCurrCurrency() {
		return this.currCurrency;
	}

	public void setCurrCurrency(CurrCurrency currCurrency) {
		this.currCurrency = currCurrency;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="payment_type_id")
	public DictGlobal getDictGlobalByPaymentTypeId() {
		return this.dictGlobalByPaymentTypeId;
	}

	public void setDictGlobalByPaymentTypeId(
			DictGlobal dictGlobalByPaymentTypeId) {
		this.dictGlobalByPaymentTypeId = dictGlobalByPaymentTypeId;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="type_transfer_id")
	public DictGlobal getDictGlobalByTypeTransferId() {
		return this.dictGlobalByTypeTransferId;
	}

	public void setDictGlobalByTypeTransferId(
			DictGlobal dictGlobalByTypeTransferId) {
		this.dictGlobalByTypeTransferId = dictGlobalByTypeTransferId;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="transport_id")
	public DictGlobal getDictGlobalByTransportId() {
		return this.dictGlobalByTransportId;
	}

	public void setDictGlobalByTransportId(DictGlobal dictGlobalByTransportId) {
		this.dictGlobalByTransportId = dictGlobalByTransportId;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="location_cities_id")
	public LocationCities getLocationCities() {
		return this.locationCities;
	}

	public void setLocationCities(LocationCities locationCities) {
		this.locationCities = locationCities;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="location_countries_id")
	public LocationCountries getLocationCountries() {
		return this.locationCountries;
	}

	public void setLocationCountries(LocationCountries locationCountries) {
		this.locationCountries = locationCountries;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="account_id")
	public TmAccount getTmAccount() {
		return this.tmAccount;
	}

	public void setTmAccount(TmAccount tmAccount) {
		this.tmAccount = tmAccount;
	}

	

	

	

	

	

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="date_from", length = 29)
	public Date getDateFrom() {
		return this.dateFrom;
	}

	public void setDateFrom(Date dateFrom) {
		this.dateFrom = dateFrom;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name="date_to", length = 29)
	public Date getDateTo() {
		return this.dateTo;
	}

	public void setDateTo(Date dateTo) {
		this.dateTo = dateTo;
	}

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	@Column(name="passengers_phones")
	public String getPassengersPhones() {
		return this.passengersPhones;
	}

	public void setPassengersPhones(String passengersPhones) {
		this.passengersPhones = passengersPhones;
	}

	@Column(name="price", precision = 17, scale = 3)
	public BigDecimal getPrice() {
		return this.price;
	}

	public void setPrice(BigDecimal price) {
		this.price = price;
	}

	@Column(name="transfer_name")
	public String getTransferName() {
		return this.transferName;
	}

	public void setTransferName(String transferName) {
		this.transferName = transferName;
	}

	@Column(name="visit_table")
	public String getVisitTable() {
		return this.visitTable;
	}

	public void setVisitTable(String visitTable) {
		this.visitTable = visitTable;
	}

	

	@OneToMany(fetch=FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE }, mappedBy="servTransfer")
	public List<RelServTransferTmContact> getRelServTransferTmContacts() {
		return this.relServTransferTmContacts;
	}

	public void setRelServTransferTmContacts(List<RelServTransferTmContact> relServTransferTmContacts) {
		this.relServTransferTmContacts = relServTransferTmContacts;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="servTransfer")
	public List<ServTransferRoute> getServTransferRoutes() {
		return this.servTransferRoutes;
	}

	public void setServTransferRoutes(List<ServTransferRoute> servTransferRoutes) {
		this.servTransferRoutes = servTransferRoutes;
	}
// #SETTER_AND_GETTER
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ServTransferRoute arg0 : getServTransferRoutes()) {
			arg0.setServTransfer(null);
		}



		currCurrency = null;
		dictGlobalByPaymentTypeId = null;
		dictGlobalByTypeTransferId = null;
		dictGlobalByTransportId = null;
		locationCities = null;
		locationCountries = null;
		tmAccount = null;

	}
	
	public ServTransfer specialInit() {
	
		
		return this;
	}
	
	public ServTransfer init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public ServTransfer preInitList() {
		if(getRelServTransferTmContacts() == null) setRelServTransferTmContacts(new LinkedList());
		getRelServTransferTmContacts().parallelStream().forEach(it -> it.setServTransfer(this));
		if(getServTransferRoutes() == null) setServTransferRoutes(new LinkedList());
		getServTransferRoutes().parallelStream().forEach(it -> it.setServTransfer(this));

		return this;
	}
	
	public ServTransfer initList() {
		initLists(relServTransferTmContacts);
		initLists(servTransferRoutes);

		return this;
	}
	
	public ServTransfer initDicts() {
		initSentity(getCurrCurrency());
		initSentity(getDictGlobalByPaymentTypeId());
		initSentity(getDictGlobalByTypeTransferId());
		initSentity(getDictGlobalByTransportId());
		initSentity(getLocationCities());
		initSentity(getLocationCountries());
		initSentity(getTmAccount());

		return this;
	}
	
	
}