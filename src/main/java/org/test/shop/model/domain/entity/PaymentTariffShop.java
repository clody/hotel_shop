/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;

import org.test.shop.model.domain.SEntity;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * PaymentTariffShop generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="payment_tariff_shop")
public class PaymentTariffShop extends SEntity  {

	private static final long serialVersionUID = 6281931857783595L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("percentageofallowances") private Integer percentageOfAllowances;
	@JsonProperty("ispercentageofallowances") private Boolean isPercentageOfAllowances;
	private List<PaymentPriceShop> paymentPriceShops = new LinkedList<PaymentPriceShop>();
	private List<ServHotelRoom> servHotelRooms = new LinkedList<ServHotelRoom>();

	public PaymentTariffShop() {
	}

	public PaymentTariffShop(int id) {
		this.id = id;
	}

	public PaymentTariffShop(int id, Integer percentageOfAllowances,
			Boolean isPercentageOfAllowances,


			List<PaymentPriceShop> paymentPriceShops,
			List<ServHotelRoom> servHotelRooms) {
		this.id = id;
		this.percentageOfAllowances = percentageOfAllowances;
		this.isPercentageOfAllowances = isPercentageOfAllowances;
		this.paymentPriceShops = paymentPriceShops;
		this.servHotelRooms = servHotelRooms;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_PAYMENTTARIFFSHOP")
	@SequenceGenerator(name = "SQ_PAYMENTTARIFFSHOP", sequenceName = "SQ_PAYMENTTARIFFSHOP", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@Column(name="percentage_of_allowances")
	public Integer getPercentageOfAllowances() {
		return this.percentageOfAllowances;
	}

	public void setPercentageOfAllowances(Integer percentageOfAllowances) {
		this.percentageOfAllowances = percentageOfAllowances;
	}

	@Column(name="is_percentage_of_allowances")
	public Boolean getIsPercentageOfAllowances() {
		return this.isPercentageOfAllowances;
	}

	public void setIsPercentageOfAllowances(Boolean isPercentageOfAllowances) {
		this.isPercentageOfAllowances = isPercentageOfAllowances;
	}

	

	

	

	

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="paymentTariffShop")
	public List<PaymentPriceShop> getPaymentPriceShops() {
		return this.paymentPriceShops;
	}

	public void setPaymentPriceShops(List<PaymentPriceShop> paymentPriceShops) {
		this.paymentPriceShops = paymentPriceShops;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="paymentTariffShop")
	public List<ServHotelRoom> getServHotelRooms() {
		return this.servHotelRooms;
	}

	public void setServHotelRooms(List<ServHotelRoom> servHotelRooms) {
		this.servHotelRooms = servHotelRooms;
	}
// #SETTER_AND_GETTER
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (PaymentPriceShop arg0 : getPaymentPriceShops()) {
			arg0.setPaymentTariffShop(null);
		}

		for (ServHotelRoom arg0 : getServHotelRooms()) {
			arg0.setPaymentTariffShop(null);
		}




	}
	
	public PaymentTariffShop specialInit() {
	
		
		return this;
	}
	
	public PaymentTariffShop init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public PaymentTariffShop preInitList() {
		if(getPaymentPriceShops() == null) setPaymentPriceShops(new LinkedList());
		getPaymentPriceShops().parallelStream().forEach(it -> it.setPaymentTariffShop(this));
		if(getServHotelRooms() == null) setServHotelRooms(new LinkedList());
		getServHotelRooms().parallelStream().forEach(it -> it.setPaymentTariffShop(this));

		return this;
	}
	
	public PaymentTariffShop initList() {
		initLists(paymentPriceShops);
		initLists(servHotelRooms);

		return this;
	}
	
	public PaymentTariffShop initDicts() {

		return this;
	}
	
	
}