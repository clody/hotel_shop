/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.Transient;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;

import org.test.shop.model.domain.SObject;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * LocationCities generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="location_cities")
public class LocationCities extends SObject  {

	private static final long serialVersionUID = 1695222235298644L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("locationcountries") private LocationCountries locationCountries;
	@JsonProperty("cityname") private String cityname;
	@JsonProperty("descr") private String descr;
	private List<ServTransfer> servTransfers = new LinkedList<ServTransfer>();
	private List<ServHotel> servHotels = new LinkedList<ServHotel>();

	public LocationCities() {
	}

	public LocationCities(int id) {
		this.id = id;
	}

	public LocationCities(int id, LocationCountries locationCountries,


			String cityname,
			List<ServTransfer> servTransfers, List<ServHotel> servHotels) {
		this.id = id;
		this.locationCountries = locationCountries;
		this.cityname=cityname;
		this.descr = descr;
		this.servTransfers = servTransfers;
		this.servHotels = servHotels;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_LOCATIONCITIES")
	@SequenceGenerator(name = "SQ_LOCATIONCITIES", sequenceName = "SQ_LOCATIONCITIES", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="countryid")
	public LocationCountries getLocationCountries() {
		return this.locationCountries;
	}

	public void setLocationCountries(LocationCountries locationCountries) {
		this.locationCountries = locationCountries;
	}

	

	

	

	

	@Column(name="cityname")
	public String getCityname() {
		return this.cityname;
	}

	public void setCityname(String cityname) {
		this.cityname=cityname;
	}

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="locationCities")
	public List<ServTransfer> getServTransfers() {
		return this.servTransfers;
	}

	public void setServTransfers(List<ServTransfer> servTransfers) {
		this.servTransfers = servTransfers;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="locationCities")
	public List<ServHotel> getServHotels() {
		return this.servHotels;
	}

	public void setServHotels(List<ServHotel> servHotels) {
		this.servHotels = servHotels;
	}
// #SETTER_AND_GETTER

	@Transient
	public String getLabel() {
		return cityname;
	}

	public void setLabel(String label) {
		setCityname(label);
	}
	
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ServTransfer arg0 : getServTransfers()) {
			arg0.setLocationCities(null);
		}

		for (ServHotel arg0 : getServHotels()) {
			arg0.setLocationCities(null);
		}



		locationCountries = null;

	}
	
	public LocationCities specialInit() {
	
		
		return this;
	}
	
	public LocationCities init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public LocationCities preInitList() {
		if(getServTransfers() == null) setServTransfers(new LinkedList());
		getServTransfers().parallelStream().forEach(it -> it.setLocationCities(this));
		if(getServHotels() == null) setServHotels(new LinkedList());
		getServHotels().parallelStream().forEach(it -> it.setLocationCities(this));

		return this;
	}
	
	public LocationCities initList() {

		return this;
	}
	
	public LocationCities initDicts() {

		return this;
	}
	
	
}