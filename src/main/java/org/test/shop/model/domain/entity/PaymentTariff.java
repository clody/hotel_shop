/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;

import org.test.shop.model.domain.SEntity;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * PaymentTariff generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="payment_tariff")
public class PaymentTariff extends SEntity  {

	private static final long serialVersionUID = 2734918612437966L;

	@JsonProperty("id") private Integer id;
	private List<ServHotelRoom> servHotelRoomsForCostTarriffId = new LinkedList<ServHotelRoom>();
	private List<ServHotelRoom> servHotelRoomsForRrTarriffId = new LinkedList<ServHotelRoom>();
	private List<ReqServHotel> reqServHotels = new LinkedList<ReqServHotel>();
	private List<PaymentPrice> paymentPrices = new LinkedList<PaymentPrice>();

	public PaymentTariff() {
	}

	public PaymentTariff(int id) {
		this.id = id;
	}

	public PaymentTariff(int id,


			List<ServHotelRoom> servHotelRoomsForCostTarriffId,
			List<ServHotelRoom> servHotelRoomsForRrTarriffId,
			List<ReqServHotel> reqServHotels, List<PaymentPrice> paymentPrices) {
		this.id = id;
		this.servHotelRoomsForCostTarriffId = servHotelRoomsForCostTarriffId;
		this.servHotelRoomsForRrTarriffId = servHotelRoomsForRrTarriffId;
		this.reqServHotels = reqServHotels;
		this.paymentPrices = paymentPrices;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_PAYMENTTARIFF")
	@SequenceGenerator(name = "SQ_PAYMENTTARIFF", sequenceName = "SQ_PAYMENTTARIFF", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	

	

	

	

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="paymentTariffByCostTarriffId")
	public List<ServHotelRoom> getServHotelRoomsForCostTarriffId() {
		return this.servHotelRoomsForCostTarriffId;
	}

	public void setServHotelRoomsForCostTarriffId(List<ServHotelRoom> servHotelRoomsForCostTarriffId) {
		this.servHotelRoomsForCostTarriffId = servHotelRoomsForCostTarriffId;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="paymentTariffByRrTarriffId")
	public List<ServHotelRoom> getServHotelRoomsForRrTarriffId() {
		return this.servHotelRoomsForRrTarriffId;
	}

	public void setServHotelRoomsForRrTarriffId(List<ServHotelRoom> servHotelRoomsForRrTarriffId) {
		this.servHotelRoomsForRrTarriffId = servHotelRoomsForRrTarriffId;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="paymentTariff")
	public List<ReqServHotel> getReqServHotels() {
		return this.reqServHotels;
	}

	public void setReqServHotels(List<ReqServHotel> reqServHotels) {
		this.reqServHotels = reqServHotels;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="paymentTariff")
	public List<PaymentPrice> getPaymentPrices() {
		return this.paymentPrices;
	}

	public void setPaymentPrices(List<PaymentPrice> paymentPrices) {
		this.paymentPrices = paymentPrices;
	}
// #SETTER_AND_GETTER
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ServHotelRoom arg0 : getServHotelRoomsForCostTarriffId()) {
			arg0.setPaymentTariffByCostTarriffId(null);
		}

		for (ServHotelRoom arg0 : getServHotelRoomsForRrTarriffId()) {
			arg0.setPaymentTariffByRrTarriffId(null);
		}

		for (ReqServHotel arg0 : getReqServHotels()) {
			arg0.setPaymentTariff(null);
		}

		for (PaymentPrice arg0 : getPaymentPrices()) {
			arg0.setPaymentTariff(null);
		}




	}
	
	public PaymentTariff specialInit() {
	
		
		return this;
	}
	
	public PaymentTariff init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public PaymentTariff preInitList() {
		if(getServHotelRoomsForCostTarriffId() == null) setServHotelRoomsForCostTarriffId(new LinkedList());
		getServHotelRoomsForCostTarriffId().parallelStream().forEach(it -> it.setPaymentTariffByCostTarriffId(this));
		if(getServHotelRoomsForRrTarriffId() == null) setServHotelRoomsForRrTarriffId(new LinkedList());
		getServHotelRoomsForRrTarriffId().parallelStream().forEach(it -> it.setPaymentTariffByRrTarriffId(this));
		if(getReqServHotels() == null) setReqServHotels(new LinkedList());
		getReqServHotels().parallelStream().forEach(it -> it.setPaymentTariff(this));
		if(getPaymentPrices() == null) setPaymentPrices(new LinkedList());
		getPaymentPrices().parallelStream().forEach(it -> it.setPaymentTariff(this));

		return this;
	}
	
	public PaymentTariff initList() {
		initLists(servHotelRoomsForCostTarriffId);
		initLists(servHotelRoomsForRrTarriffId);
		initLists(reqServHotels);
		initLists(paymentPrices);

		return this;
	}
	
	public PaymentTariff initDicts() {

		return this;
	}
	
	
}