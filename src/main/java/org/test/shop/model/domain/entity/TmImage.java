/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.Transient;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.test.shop.model.domain.SObject;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * TmImage generated by hbm2java, updated by voovee
 */
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey"
			, "path" 
})
@Entity
@Table(name="tm_image")
public class TmImage extends SObject  {

	private static final long serialVersionUID = 2655326713137138L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("contenttype") private String contenttype;
	@JsonProperty("extension") private String extension;
	@JsonProperty("name") private String name;
	@JsonProperty("originalfilename") private String originalfilename;
	@JsonProperty("path") private String path;
	@JsonProperty("size") private String size;
	private List<RelServHotelImage> relServHotelImages = new LinkedList<RelServHotelImage>();
	private List<RelServHotelRoomImage> relServHotelRoomImages = new LinkedList<RelServHotelRoomImage>();
	private List<Users> userses = new LinkedList<Users>();

	public TmImage() {
	}

	public TmImage(int id) {
		this.id = id;
	}

	public TmImage(int id,

			String contenttype, String extension, String name,
			String originalfilename, String path, String size,
 List<RelServHotelImage> relServHotelImages,
			List<RelServHotelRoomImage> relServHotelRoomImages,
			List<Users> userses) {
		this.id = id;
		this.contenttype = contenttype;
		this.extension = extension;
		this.name=name;
		this.originalfilename=originalfilename;
		this.path = path;
		this.size = size;
		this.relServHotelImages = relServHotelImages;
		this.relServHotelRoomImages = relServHotelRoomImages;
		this.userses = userses;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_TMIMAGE")
	@SequenceGenerator(name = "SQ_TMIMAGE", sequenceName = "SQ_TMIMAGE", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	

	

	

	

	@Column(name="contenttype")
	public String getContenttype() {
		return this.contenttype;
	}

	public void setContenttype(String contenttype) {
		this.contenttype = contenttype;
	}

	@Column(name="extension")
	public String getExtension() {
		return this.extension;
	}

	public void setExtension(String extension) {
		this.extension = extension;
	}

	@Column(name="name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name=name;
	}

	@Column(name="originalfilename")
	public String getOriginalfilename() {
		return this.originalfilename;
	}

	public void setOriginalfilename(String originalfilename) {
		this.originalfilename=originalfilename;
	}

	@Column(name="path")
	public String getPath() {
		return this.path;
	}

	public void setPath(String path) {
		this.path = path;
	}

	@Column(name="size")
	public String getSize() {
		return this.size;
	}

	public void setSize(String size) {
		this.size = size;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="tmImage")
	public List<RelServHotelImage> getRelServHotelImages() {
		return this.relServHotelImages;
	}

	public void setRelServHotelImages(List<RelServHotelImage> relServHotelImages) {
		this.relServHotelImages = relServHotelImages;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="tmImage")
	public List<RelServHotelRoomImage> getRelServHotelRoomImages() {
		return this.relServHotelRoomImages;
	}

	public void setRelServHotelRoomImages(List<RelServHotelRoomImage> relServHotelRoomImages) {
		this.relServHotelRoomImages = relServHotelRoomImages;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="tmImage")
	public List<Users> getUserses() {
		return this.userses;
	}

	public void setUserses(List<Users> userses) {
		this.userses = userses;
	}
// #SETTER_AND_GETTER

	@Transient
	public String getLabel() {
		return originalfilename;
	}

	public void setLabel(String label) {
		
	}
	
	@Transient
	public String getUrl() {
		return name + "." + extension;
	}

	public void setUrl(String url) {
		
	}
	
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (Users arg0 : getUserses()) {
			arg0.setTmImage(null);
		}




	}
	
	public TmImage specialInit() {
	
		
		return this;
	}
	
	public TmImage init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public TmImage preInitList() {
		if(getRelServHotelImages() == null) setRelServHotelImages(new LinkedList());
		getRelServHotelImages().parallelStream().forEach(it -> it.setTmImage(this));
		if(getRelServHotelRoomImages() == null) setRelServHotelRoomImages(new LinkedList());
		getRelServHotelRoomImages().parallelStream().forEach(it -> it.setTmImage(this));
		if(getUserses() == null) setUserses(new LinkedList());
		getUserses().parallelStream().forEach(it -> it.setTmImage(this));

		return this;
	}
	
	public TmImage initList() {
		initLists(relServHotelImages);
		initLists(relServHotelRoomImages);
		initLists(userses);

		return this;
	}
	
	public TmImage initDicts() {

		return this;
	}
	
	
}