/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.Transient;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;

import org.test.shop.model.domain.SObject;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * LocationCountries generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="location_countries")
public class LocationCountries extends SObject  {

	private static final long serialVersionUID = 8266213329762249L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("countryname") private String countryname;
	@JsonProperty("descr") private String descr;
	@JsonProperty("isocode") private String isoCode;
	@JsonProperty("nameeng") private String nameeng;
	private List<TmContact> tmContacts = new LinkedList<TmContact>();
	private List<ServHotel> servHotels = new LinkedList<ServHotel>();
	private List<LocationCities> locationCitieses = new LinkedList<LocationCities>();
	private List<ServTransfer> servTransfers = new LinkedList<ServTransfer>();
	private List<TmAccount> tmAccounts = new LinkedList<TmAccount>();
	private List<TmContactEasy> tmContactEasies = new LinkedList<TmContactEasy>();

	public LocationCountries() {
	}

	public LocationCountries(int id) {
		this.id = id;
	}

	public LocationCountries(int id,

 String countryname, String descr, String isoCode,
			String nameeng, List<TmContact> tmContacts,
			List<ServHotel> servHotels, List<LocationCities> locationCitieses,
			List<ServTransfer> servTransfers, List<TmAccount> tmAccounts,
			List<TmContactEasy> tmContactEasies) {
		this.id = id;
		this.countryname=countryname;
		this.descr = descr;
		this.isoCode = isoCode;
		this.nameeng = nameeng;
		this.tmContacts = tmContacts;
		this.servHotels = servHotels;
		this.locationCitieses = locationCitieses;
		this.servTransfers = servTransfers;
		this.tmAccounts = tmAccounts;
		this.tmContactEasies = tmContactEasies;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_LOCATIONCOUNTRIES")
	@SequenceGenerator(name = "SQ_LOCATIONCOUNTRIES", sequenceName = "SQ_LOCATIONCOUNTRIES", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	

	

	

	

	@Column(name="countryname")
	public String getCountryname() {
		return this.countryname;
	}

	public void setCountryname(String countryname) {
		this.countryname=countryname;
	}

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	@Column(name="iso_code")
	public String getIsoCode() {
		return this.isoCode;
	}

	public void setIsoCode(String isoCode) {
		this.isoCode = isoCode;
	}

	@Column(name="nameeng")
	public String getNameeng() {
		return this.nameeng;
	}

	public void setNameeng(String nameeng) {
		this.nameeng = nameeng;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="locationCountries")
	public List<TmContact> getTmContacts() {
		return this.tmContacts;
	}

	public void setTmContacts(List<TmContact> tmContacts) {
		this.tmContacts = tmContacts;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="locationCountries")
	public List<ServHotel> getServHotels() {
		return this.servHotels;
	}

	public void setServHotels(List<ServHotel> servHotels) {
		this.servHotels = servHotels;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="locationCountries")
	public List<LocationCities> getLocationCitieses() {
		return this.locationCitieses;
	}

	public void setLocationCitieses(List<LocationCities> locationCitieses) {
		this.locationCitieses = locationCitieses;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="locationCountries")
	public List<ServTransfer> getServTransfers() {
		return this.servTransfers;
	}

	public void setServTransfers(List<ServTransfer> servTransfers) {
		this.servTransfers = servTransfers;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="locationCountries")
	public List<TmAccount> getTmAccounts() {
		return this.tmAccounts;
	}

	public void setTmAccounts(List<TmAccount> tmAccounts) {
		this.tmAccounts = tmAccounts;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="locationCountries")
	public List<TmContactEasy> getTmContactEasies() {
		return this.tmContactEasies;
	}

	public void setTmContactEasies(List<TmContactEasy> tmContactEasies) {
		this.tmContactEasies = tmContactEasies;
	}
// #SETTER_AND_GETTER

	@Transient
	public String getLabel() {
		return countryname;
	}

	public void setLabel(String label) {
		setCountryname(label);
	}
	
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (TmContact arg0 : getTmContacts()) {
			arg0.setLocationCountries(null);
		}

		for (ServHotel arg0 : getServHotels()) {
			arg0.setLocationCountries(null);
		}

		for (LocationCities arg0 : getLocationCitieses()) {
			arg0.setLocationCountries(null);
		}

		for (ServTransfer arg0 : getServTransfers()) {
			arg0.setLocationCountries(null);
		}

		for (TmAccount arg0 : getTmAccounts()) {
			arg0.setLocationCountries(null);
		}

		for (TmContactEasy arg0 : getTmContactEasies()) {
			arg0.setLocationCountries(null);
		}




	}
	
	public LocationCountries specialInit() {
	
		
		return this;
	}
	
	public LocationCountries init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public LocationCountries preInitList() {
		if(getTmContacts() == null) setTmContacts(new LinkedList());
		getTmContacts().parallelStream().forEach(it -> it.setLocationCountries(this));
		if(getServHotels() == null) setServHotels(new LinkedList());
		getServHotels().parallelStream().forEach(it -> it.setLocationCountries(this));
		if(getLocationCitieses() == null) setLocationCitieses(new LinkedList());
		getLocationCitieses().parallelStream().forEach(it -> it.setLocationCountries(this));
		if(getServTransfers() == null) setServTransfers(new LinkedList());
		getServTransfers().parallelStream().forEach(it -> it.setLocationCountries(this));
		if(getTmAccounts() == null) setTmAccounts(new LinkedList());
		getTmAccounts().parallelStream().forEach(it -> it.setLocationCountries(this));
		if(getTmContactEasies() == null) setTmContactEasies(new LinkedList());
		getTmContactEasies().parallelStream().forEach(it -> it.setLocationCountries(this));

		return this;
	}
	
	public LocationCountries initList() {

		return this;
	}
	
	public LocationCountries initDicts() {

		return this;
	}
	
	
}