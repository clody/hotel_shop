/* #UPDATED */
/* #CLEARED */
package org.test.shop.model.domain.entity;

// Generated 30.08.2015 21:00:08 by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonProperty;
import javax.persistence.PreRemove;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.voodoodyne.jackson.jsog.JSOGGenerator;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.OptimisticLockType;
import org.hibernate.annotations.OptimisticLocking;
import org.hibernate.annotations.SelectBeforeUpdate;

import org.test.shop.model.domain.SEntity;
import java.math.BigDecimal;

import java.util.LinkedList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * ServTransferRoute generated by hbm2java, updated by voovee
 */
@DynamicInsert(true)
@DynamicUpdate(true)
@SelectBeforeUpdate(false)
@OptimisticLocking(type = OptimisticLockType.VERSION)
@JsonIdentityInfo(generator = JSOGGenerator.class)
@JsonIgnoreProperties({
			 
			  "firmid"
			, "firm"
			, "serieskey" 
})
@Entity
@Table(name="serv_transfer_route")
public class ServTransferRoute extends SEntity  {

	private static final long serialVersionUID = 2937314482655155L;

	@JsonProperty("id") private Integer id;
	@JsonProperty("currcurrency") private CurrCurrency currCurrency;
	@JsonProperty("servtransfer") private ServTransfer servTransfer;
	@JsonProperty("descr") private String descr;
	@JsonProperty("driver") private String driver;
	@JsonProperty("driverphone") private String driverPhone;
	@JsonProperty("fixedallowance") private BigDecimal fixedAllowance;
	@JsonProperty("free") private Boolean free;
	@JsonProperty("percentageofallowances") private BigDecimal percentageOfAllowances;
	@JsonProperty("sum") private Integer sum;
	private List<ServTransferRoutePoint> servTransferRoutePoints = new LinkedList<ServTransferRoutePoint>();

	public ServTransferRoute() {
	}

	public ServTransferRoute(int id) {
		this.id = id;
	}

	public ServTransferRoute(int id, CurrCurrency currCurrency,
			ServTransfer servTransfer,

 String descr, String driver,
			String driverPhone, BigDecimal fixedAllowance, Boolean free,
			BigDecimal percentageOfAllowances,
			List<ServTransferRoutePoint> servTransferRoutePoints) {
		this.id = id;
		this.currCurrency = currCurrency;
		this.servTransfer = servTransfer;
		this.descr = descr;
		this.driver = driver;
		this.driverPhone = driverPhone;
		this.fixedAllowance = fixedAllowance;
		this.free = free;
		this.percentageOfAllowances = percentageOfAllowances;
		this.sum = sum;
		this.servTransferRoutePoints = servTransferRoutePoints;
	}

	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_SERVTRANSFERROUTE")
	@SequenceGenerator(name = "SQ_SERVTRANSFERROUTE", sequenceName = "SQ_SERVTRANSFERROUTE", initialValue = 10, allocationSize = 1)
	@Id
	@Column(name="id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}
	

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="currency_id")
	public CurrCurrency getCurrCurrency() {
		return this.currCurrency;
	}

	public void setCurrCurrency(CurrCurrency currCurrency) {
		this.currCurrency = currCurrency;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="serv_transfer_id")
	public ServTransfer getServTransfer() {
		return this.servTransfer;
	}

	public void setServTransfer(ServTransfer servTransfer) {
		this.servTransfer = servTransfer;
	}

	

	

	

	

	

	@Column(name="descr", length = 2000)
	public String getDescr() {
		return this.descr;
	}

	public void setDescr(String descr) {
		this.descr = descr;
	}

	@Column(name="driver")
	public String getDriver() {
		return this.driver;
	}

	public void setDriver(String driver) {
		this.driver = driver;
	}

	@Column(name="driver_phone")
	public String getDriverPhone() {
		return this.driverPhone;
	}

	public void setDriverPhone(String driverPhone) {
		this.driverPhone = driverPhone;
	}

	@Column(name="fixed_allowance", precision = 17, scale = 3)
	public BigDecimal getFixedAllowance() {
		return this.fixedAllowance;
	}

	public void setFixedAllowance(BigDecimal fixedAllowance) {
		this.fixedAllowance = fixedAllowance;
	}

	@Column(name="free")
	public Boolean getFree() {
		return this.free;
	}

	public void setFree(Boolean free) {
		this.free = free;
	}

	@Column(name="percentage_of_allowances", precision = 17, scale = 3)
	public BigDecimal getPercentageOfAllowances() {
		return this.percentageOfAllowances;
	}

	public void setPercentageOfAllowances(BigDecimal percentageOfAllowances) {
		this.percentageOfAllowances = percentageOfAllowances;
	}

	@Column(name="sum")
	public Integer getSum() {
		return this.sum;
	}

	public void setSum(Integer sum) {
		this.sum = sum;
	}

	

	@OneToMany(fetch=FetchType.LAZY, mappedBy="servTransferRoute")
	public List<ServTransferRoutePoint> getServTransferRoutePoints() {
		return this.servTransferRoutePoints;
	}

	public void setServTransferRoutePoints(List<ServTransferRoutePoint> servTransferRoutePoints) {
		this.servTransferRoutePoints = servTransferRoutePoints;
	}
// #SETTER_AND_GETTER
	
// ------------------ Logic part ------------------
	
	@PreRemove
	public void preRemove() {
		for (ServTransferRoutePoint arg0 : getServTransferRoutePoints()) {
			arg0.setServTransferRoute(null);
		}



		currCurrency = null;
		servTransfer = null;

	}
	
	public ServTransferRoute specialInit() {
	
		
		return this;
	}
	
	public ServTransferRoute init() {
		initList();
		initDicts();
		
		return this;
	}
	
	public ServTransferRoute preInitList() {
		if(getServTransferRoutePoints() == null) setServTransferRoutePoints(new LinkedList());
		getServTransferRoutePoints().parallelStream().forEach(it -> it.setServTransferRoute(this));

		return this;
	}
	
	public ServTransferRoute initList() {
		initLists(servTransferRoutePoints);

		return this;
	}
	
	public ServTransferRoute initDicts() {
		initSentity(getCurrCurrency());
		initSentity(getServTransfer());

		return this;
	}
	
	
}